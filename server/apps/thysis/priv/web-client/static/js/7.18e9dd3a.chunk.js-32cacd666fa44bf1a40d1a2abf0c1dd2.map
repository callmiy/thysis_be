{"version":3,"sources":["routes/Quote/route.tsx","graphql/quote-full.fragment.ts","graphql/quote-full.query.ts","routes/Quote/index.ts"],"names":["Quote","_React$Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","renderMainOrLoading","_this$props","props","loading","quote","error","react","className","message","Dimmer","inverted","active","Loader","size","text","date","pageStart","pageEnd","volume","extras","source","NavLink","to","makeSourceURL","id","sourceDisplay","tags","List","divided","map","renderTag","Item","as","makeTagURL","key","inherits","createClass","value","setTitle","AppSidebar","Header","title","showSideBarTrigger","React","quoteFullFrag","gql","_templateObject","sourceForDisplayFrag","quoteFullQuery","quote_full_query_templateObject","sourceGraphQl","graphql","QUOTE_QUERY","_ref","data","objectSpread","options","_ref2","variables","match","params","compose","withApollo"],"mappings":"0QAmHeA,EAlGf,SAAAC,GAAA,SAAAD,IAAA,IAAAE,EAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,GAAA,QAAAO,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,GAAA,OAAAT,EAAAC,OAAAS,EAAA,EAAAT,CAAAE,MAAAJ,EAAAE,OAAAU,EAAA,EAAAV,CAAAJ,IAAAe,KAAAC,MAAAd,EAAA,CAAAI,MAAAW,OAAAP,MAqBEQ,oBAAsB,WAAM,IAAAC,EACQhB,EAAKiB,MAA/BC,EADkBF,EAClBE,QAASC,EADSH,EACTG,MAAOC,EADEJ,EACFI,MAExB,OAAIA,EAEAC,EAAA,qBAAKC,UAAU,uDACZF,EAAMG,SAKTL,IAAYC,EAEZE,EAAA,cAACG,EAAA,EAAD,CACEC,UAAU,EACVH,UAAU,4BACVI,QAAQ,GAERL,EAAA,cAACM,EAAA,EAAD,CAAQC,KAAK,UAAb,cAMJP,EAAA,qBAAKC,UAAU,QACbD,EAAA,qBAAKC,UAAU,cAAcH,EAAMU,MAEnCR,EAAA,yBAEAA,EAAA,qBAAKC,UAAU,QAAf,SAA6BH,EAAMW,MAEnCT,EAAA,qBAAKC,UAAU,cAAf,eAAyCH,EAAMY,UAA/C,KAEAV,EAAA,qBAAKC,UAAU,YAAf,aAAqCH,EAAMa,QAA3C,KAEAX,EAAA,qBAAKC,UAAU,UAAf,WAAiCH,EAAMc,OAAvC,KAEAZ,EAAA,qBAAKC,UAAU,UAAf,WAAiCH,EAAMe,OAAvC,KAEAb,EAAA,yBAECF,EAAMgB,QACLd,EAAA,cAACe,EAAA,EAAD,CAASC,GAAIC,YAAcnB,EAAMgB,OAAOI,IAAKjB,UAAU,cACpDkB,YAAcrB,EAAMgB,SAIxBhB,EAAMsB,MACLpB,EAAA,yBACEA,EAAA,gCAEAA,EAAA,cAACqB,EAAA,EAAD,CAAMC,SAAS,GAAOxB,EAAMsB,KAAKG,IAAI5C,EAAK6C,eAxEtD7C,EA+EU6C,UAAY,SAAC1B,GACnB,GAAKA,EAAL,CAD0D,IAKlDoB,EAAapB,EAAboB,GAAIV,EAASV,EAATU,KACZ,OACER,EAAA,cAACqB,EAAA,EAAKI,KAAN,CACEC,GAAIX,IACJC,GAAIW,YAAWT,GACfU,IAAKV,EACLjB,UAAU,cAEVD,EAAA,yBAAMQ,MA5Fd7B,EAAA,OAAAC,OAAAiD,EAAA,EAAAjD,CAAAJ,EAAAC,GAAAG,OAAAkD,EAAA,EAAAlD,CAAAJ,EAAA,EAAAoD,IAAA,oBAAAG,MAAA,WAEIC,YAAS,WAFb,CAAAJ,IAAA,uBAAAG,MAAA,WAMIC,gBANJ,CAAAJ,IAAA,SAAAG,MAAA,WAUI,OACE/B,EAAA,cAACiC,EAAA,EAAD,KACEjC,EAAA,qBAAKC,UAAU,eACbD,EAAA,cAACkC,EAAA,EAAD,CAAYC,MAAM,QAAQC,oBAAoB,IAE7CtD,KAAKY,4BAfhBlB,EAAA,CAA2B6D,+VCbpB,IAAMC,EAAgBC,IAAHC,IAmBtBC,kMCnBG,IAUQC,EAVeH,IAAHI,IAOvBL,GCDEM,EAAgBC,kBACpBC,EACA,CACElD,MAAO,SAAAmD,GAAc,IAAXC,EAAWD,EAAXC,KACR,OAAOpE,OAAAqE,EAAA,EAAArE,CAAA,GAAKoE,IAGdE,QAAS,SAAAC,GACP,MAAO,CACLC,UAAW,CACTtD,MAAO,CACLoB,GAJgBiC,EAAZE,MAIMC,OAAOpC,SAQdqC,4BACbC,aACAZ,EAFaW,CAGb/E","file":"static/js/7.18e9dd3a.chunk.js","sourcesContent":["import * as React from \"react\";\nimport { Dimmer } from \"semantic-ui-react\";\nimport { Loader } from \"semantic-ui-react\";\nimport { List } from \"semantic-ui-react\";\nimport { NavLink } from \"react-router-dom\";\n\nimport \"./quote-route.scss\";\nimport RootHeader from \"../../components/Header\";\nimport { setTitle } from \"../../routes/util\";\nimport { makeSourceURL } from \"../../routes/util\";\nimport { makeTagURL } from \"../../routes/util\";\nimport { Props } from \"./quote\";\nimport { State } from \"./quote\";\nimport { QuoteFull_quote_tags } from \"../../graphql/gen.types\";\nimport { sourceDisplay } from \"../../graphql/utils\";\nimport AppSideBar from \"../../components/AppSidebar\";\n\nexport class Quote extends React.Component<Props, State> {\n  componentDidMount() {\n    setTitle(\"Quote\");\n  }\n\n  componentWillUnmount() {\n    setTitle();\n  }\n\n  render() {\n    return (\n      <AppSideBar>\n        <div className=\"quote-route\">\n          <RootHeader title=\"Quote\" showSideBarTrigger={true} />\n\n          {this.renderMainOrLoading()}\n        </div>\n      </AppSideBar>\n    );\n  }\n\n  renderMainOrLoading = () => {\n    const { loading, quote, error } = this.props;\n\n    if (error) {\n      return (\n        <div className=\"{`${classes.sourceMain} ${classes.errorContainer}`}\">\n          {error.message}\n        </div>\n      );\n    }\n\n    if (loading || !quote) {\n      return (\n        <Dimmer\n          inverted={true}\n          className=\"{`${classes.sourceMain}`}\"\n          active={true}\n        >\n          <Loader size=\"medium\">Loading..</Loader>\n        </Dimmer>\n      );\n    }\n\n    return (\n      <div className=\"main\">\n        <div className=\"quote-text\">{quote.text}</div>\n\n        <hr />\n\n        <div className=\"date\">Date: {quote.date}</div>\n\n        <div className=\"page-start\">Page start: {quote.pageStart} </div>\n\n        <div className=\"page-end\">Page End: {quote.pageEnd} </div>\n\n        <div className=\"volume\">Volume: {quote.volume} </div>\n\n        <div className=\"extras\">Extras: {quote.extras} </div>\n\n        <hr />\n\n        {quote.source && (\n          <NavLink to={makeSourceURL(quote.source.id)} className=\"quote-text\">\n            {sourceDisplay(quote.source)}\n          </NavLink>\n        )}\n\n        {quote.tags && (\n          <div>\n            <h4>Tags</h4>\n\n            <List divided={true}>{quote.tags.map(this.renderTag)}</List>\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  private renderTag = (quote: QuoteFull_quote_tags | null) => {\n    if (!quote) {\n      return undefined;\n    }\n\n    const { id, text } = quote;\n    return (\n      <List.Item\n        as={NavLink}\n        to={makeTagURL(id)}\n        key={id}\n        className=\"quote-text\"\n      >\n        <div>{text}</div>\n      </List.Item>\n    );\n  };\n}\n\nexport default Quote;\n","import gql from \"graphql-tag\";\n\nimport { sourceForDisplayFrag } from \"../graphql/source-for-display.fragment\";\n\nexport const quoteFullFrag = gql`\n  fragment QuoteFullFrag on Quote {\n    id\n    text\n    date\n    extras\n    issue\n    pageStart\n    pageEnd\n    volume\n    source {\n      ...SourceForDisplayFrag\n    }\n    tags {\n      id\n      text\n    }\n  }\n\n  ${sourceForDisplayFrag}\n`;\n\nexport default quoteFullFrag;\n","import gql from \"graphql-tag\";\n\nimport { quoteFullFrag } from \"./quote-full.fragment\";\n\nexport const quoteFullQuery = gql`\n  query QuoteFull($quote: GetQuoteInput!) {\n    quote(quote: $quote) {\n      ...QuoteFullFrag\n    }\n  }\n\n  ${quoteFullFrag}\n`;\n\nexport default quoteFullQuery;\n","import { graphql } from \"react-apollo\";\nimport { withApollo } from \"react-apollo\";\nimport { compose } from \"react-apollo\";\n\nimport Quote from \"./route\";\nimport { OwnProps } from \"./quote\";\nimport { QuoteFull as QuoteFullQuery } from \"../../graphql/gen.types\";\nimport { QuoteFullVariables } from \"../../graphql/gen.types\";\nimport QUOTE_QUERY from \"../../graphql/quote-full.query\";\n\nconst sourceGraphQl = graphql<OwnProps, QuoteFullQuery, QuoteFullVariables>(\n  QUOTE_QUERY,\n  {\n    props: ({ data }) => {\n      return { ...data };\n    },\n\n    options: ({ match }) => {\n      return {\n        variables: {\n          quote: {\n            id: match.params.id\n          }\n        }\n      };\n    }\n  }\n);\n\nexport default compose(\n  withApollo,\n  sourceGraphQl\n)(Quote);\n"],"sourceRoot":""}