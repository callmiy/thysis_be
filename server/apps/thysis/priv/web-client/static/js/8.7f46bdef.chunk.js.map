{"version":3,"sources":["routes/Author/route.tsx","graphql/author-route.fragment.ts","graphql/author-route.query.ts","routes/Author/index.ts"],"names":["Author","_React$Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","isEditing","renderMainOrLoading","_this$props","props","loading","error","author","react","className","message","Loading","NewAuthorModal","open","dismissModal","toggleEditModal","onAuthorCreated","authorEdited","authorFullName","Icon","name","onClick","sources","List","divided","map","renderSource","undefined","source","Item","as","NavLink","to","makeSourceURL","id","key","sourceDisplay","setState","s","update","$set","_ref","firstName","middleName","lastName","inherits","createClass","value","setTitle","AppSidebar","Header","title","showSideBarTrigger","nextProps","currentState","React","authorRouteFrag","gql","_templateObject","sourceForDisplayFrag","authorRouteQuery","author_route_query_templateObject","authorsGraphQl","graphql","AUTHORS_QUERY","data","objectSpread","options","_ref2","variables","match","params","compose","withApollo"],"mappings":"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","file":"static/js/8.7f46bdef.chunk.js","sourcesContent":["import * as React from \"react\";\nimport { Icon } from \"semantic-ui-react\";\nimport { List } from \"semantic-ui-react\";\nimport { NavLink } from \"react-router-dom\";\nimport update from \"immutability-helper\";\n\nimport \"./author-route.scss\";\nimport RootHeader from \"../../components/Header\";\nimport NewAuthorModal from \"../../components/NewAuthorModal\";\nimport { setTitle } from \"../../routes/util\";\nimport { makeSourceURL } from \"../../routes/util\";\nimport { Props } from \"./author\";\nimport { State } from \"./author\";\nimport { AuthorRouteFrag_sources, AuthorFrag } from \"../../graphql/gen.types\";\nimport { authorFullName, sourceDisplay } from \"../../graphql/utils\";\nimport Loading from \"../../components/Loading\";\nimport AppSideBar from \"../../components/AppSidebar\";\n\nexport class Author extends React.Component<Props, State> {\n  static getDerivedStateFromProps(nextProps: Props, currentState: State) {\n    const { author } = nextProps;\n\n    if (author && !currentState.author) {\n      return update(currentState, {\n        author: {\n          $set: author\n        }\n      });\n    }\n\n    return null;\n  }\n\n  state: State = { isEditing: false };\n\n  componentDidMount() {\n    setTitle(\"Author\");\n  }\n\n  componentWillUnmount() {\n    setTitle();\n  }\n\n  render() {\n    return (\n      <AppSideBar>\n        <div className=\"author-route\">\n          <RootHeader title=\"Author\" showSideBarTrigger={true} />\n\n          {this.renderMainOrLoading()}\n        </div>\n      </AppSideBar>\n    );\n  }\n\n  renderMainOrLoading = () => {\n    const { loading, error } = this.props;\n    const { author } = this.state;\n\n    if (error) {\n      return <div className=\"\">{error.message}</div>;\n    }\n\n    if (loading || !author) {\n      return <Loading />;\n    }\n\n    return (\n      <div className=\"main\">\n        {this.state.isEditing && (\n          <NewAuthorModal\n            author={author}\n            open={this.state.isEditing}\n            dismissModal={this.toggleEditModal}\n            onAuthorCreated={this.authorEdited}\n          />\n        )}\n\n        <div className=\"text\">\n          <span className=\"author-full-name\">{authorFullName(author)}</span>\n\n          <Icon\n            name=\"edit\"\n            className=\"edit-author-icon\"\n            onClick={this.toggleEditModal}\n          />\n        </div>\n\n        <hr />\n\n        {author.sources && author.sources.length ? (\n          <div>\n            <h4>Sources</h4>\n\n            <List divided={true}>{author.sources.map(this.renderSource)}</List>\n          </div>\n        ) : (\n          undefined\n        )}\n      </div>\n    );\n  };\n\n  private renderSource = (source: null | AuthorRouteFrag_sources) => {\n    if (!source) {\n      return undefined;\n    }\n\n    return (\n      <List.Item\n        as={NavLink}\n        to={makeSourceURL(source.id)}\n        key={source.id}\n        className=\"text\"\n      >\n        <div>{sourceDisplay(source)}</div>\n      </List.Item>\n    );\n  };\n\n  private toggleEditModal = () => {\n    this.setState(s =>\n      update(s, {\n        isEditing: {\n          $set: !s.isEditing\n        }\n      })\n    );\n  };\n\n  private authorEdited = ({ firstName, middleName, lastName }: AuthorFrag) => {\n    this.setState(s =>\n      update(s, {\n        author: {\n          firstName: {\n            $set: firstName\n          },\n\n          middleName: {\n            $set: middleName\n          },\n\n          lastName: {\n            $set: lastName\n          }\n        }\n      })\n    );\n  };\n}\n\nexport default Author;\n","import gql from \"graphql-tag\";\n\nimport { sourceForDisplayFrag } from \"../graphql/source-for-display.fragment\";\n\nexport const authorRouteFrag = gql`\n  fragment AuthorRouteFrag on Author {\n    id\n    lastName\n    firstName\n    middleName\n    __typename\n    sources {\n      ...SourceForDisplayFrag\n    }\n  }\n\n  ${sourceForDisplayFrag}\n`;\n\nexport default authorRouteFrag;\n","import gql from \"graphql-tag\";\n\nimport { authorRouteFrag } from \"./author-route.fragment\";\n\nexport const authorRouteQuery = gql`\n  query AuthorRouteQuery($author: GetAuthorInput!) {\n    author(author: $author) {\n      ...AuthorRouteFrag\n    }\n  }\n\n  ${authorRouteFrag}\n`;\n\nexport default authorRouteQuery;\n","import { graphql } from \"react-apollo\";\nimport { withApollo } from \"react-apollo\";\nimport { compose } from \"react-apollo\";\n\nimport Author from \"./route\";\nimport { OwnProps } from \"./author\";\nimport { AuthorRouteQuery } from \"../../graphql/gen.types\";\nimport { AuthorRouteQueryVariables } from \"../../graphql/gen.types\";\nimport AUTHORS_QUERY from \"../../graphql/author-route.query\";\n\nconst authorsGraphQl = graphql<\n  OwnProps,\n  AuthorRouteQuery,\n  AuthorRouteQueryVariables\n>(AUTHORS_QUERY, {\n  props: ({ data }) => {\n    return { ...data };\n  },\n\n  options: ({ match }) => {\n    return {\n      variables: {\n        author: {\n          id: match.params.id\n        }\n      }\n    };\n  }\n});\n\nexport default compose(\n  withApollo,\n  authorsGraphQl\n)(Author);\n"],"sourceRoot":""}