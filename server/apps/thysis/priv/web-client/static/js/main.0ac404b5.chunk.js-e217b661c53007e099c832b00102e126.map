{"version":3,"sources":["routes/util.ts","utils/index.ts","containers/App/app.utils.ts","graphql/project.fragment.ts","graphql/source-type.fragment.ts","graphql/source-full.fragment.ts","graphql/author.fragment.ts","graphql/tag-mini.fragment.ts","socket.ts","state/project.local.query.ts","graphql/tags-mini.query.ts","graphql/sources-1.query.ts","state/user.local.mutation.ts","graphql/source-for-display.fragment.ts","graphql/source-types.query.ts","graphql/authors.query.ts","state/initial-data.ts","graphql/projects.query.ts","constants.ts","graphql/refresh-user.query.ts","containers/App/Refresh/component.tsx","containers/App/Refresh/index.ts","containers/App/AuthRequired/component.tsx","containers/App/AuthRequired/index.ts","containers/App/container.tsx","containers/App/index.ts","registerServiceWorker.ts","index.tsx","graphql/user.fragment.ts","state/index.ts","components/Loading/component.tsx","components/Loading/index.ts","apollo-setup.ts","state/auth-user.local.query.ts","get-backend-urls.ts"],"names":["__webpack_require__","d","__webpack_exports__","TAG_URL","makeTagURL","SOURCE_URL","makeSourceURL","QUOTE_URL","makeQuoteURL","AUTHOR_ROUTE_URL","makeAuthorRouteURL","ROOT_URL","makeNewQuoteURL","SEARCH_QUOTES_URL","USER_REG_URL","LOGIN_URL","PROJECTS_URL","setTitle","id","replace","titleEl","document","getElementById","title","innerText","concat","logger","_ref","Object","_home_kanmii_projects_thysis_client_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","_home_kanmii_projects_thysis_client_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","mark","_callee","prefix","tag","wrap","_context","prev","next","process","stop","this","_x","_x2","apply","arguments","MediaQueryKey","AppSidebarContext","React","showSidebar","onShowClicked","onHide","AppSidebarConsumer","Consumer","mediaQueries","_home_kanmii_projects_thysis_client_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_1__","SCREEN_MIN_WIDTH_600","initialState","values","reduce","acc","k","_home_kanmii_projects_thysis_client_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","projectFragment","gql","_templateObject","sourceTypeFrag","sourceFullFrag","sourceForDisplayFrag","authorFrag","tagFrag","CHANNEL","ChannelTopic","socket","phoenix__WEBPACK_IMPORTED_MODULE_0__","_utils__WEBPACK_IMPORTED_MODULE_1__","_state__WEBPACK_IMPORTED_MODULE_2__","_get_backend_urls__WEBPACK_IMPORTED_MODULE_3__","AppSocket","appSocket","sendDataAuth","query","variables","ok","error","length","undefined","defaultError","channel","topic","_ref$ok","params","onTimeout","push","receive","data","reasons","sendChannelMsg","dataAuthChannel","GRAPHQL_AUTH","connect","socketDisconnectedCount","token","getToken","payload","Socket","getBackendUrls","websocketUrl","onOpen","DATA_AUTH","join","message","onData","reason","dispatchDisconnected","joinDataAuthChannel","onError","defineSocket","currentProjectLocalQuery","tagMinimalQuery","sources1Query","userLocalMutation","userFragment","userLocalMutationGql","graphql","props","updateLocalUser","mutate","sourceTypesQuery","authorsQuery","AUTHORS_PROJECT_INPUT_KEY","connectAndLoad","projects","client","jwt","writeQuery","PROJECTS_QUERY","sourcesProjVariables","authorsProjectVariables","projectIds","map","p","projectId","projectsLen","authorProject","len","queryStr","inputs","forEach","input","makeAuthorsProjectsQuery","sourcesProjects","toSourceId","makeSourcesProjectsQuery","allInputs","_home_kanmii_projects_thysis_client_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_4__","loc","source","body","_home_kanmii_projects_thysis_client_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_2__","_saveTags","saveTags","tags","_x3","_saveSources","saveSources","_saveSourceTypes","saveSourceTypes","sourceTypes","_x4","_saveProjectAuthors","saveProjectAuthors","abrupt","TAGS_MINI_QUERY","_callee2","_context2","SOURCE_TYPES_QUERY","_callee3","_context3","sid","sources","SOURCES_QUERY","_callee4","_context4","authors","AUTHORS_QUERY","author","projectsQuery","TOKEN_KEY","CURRENT_PROJECT_KEY","ROOT_CONTAINER_STYLE","MenuItemNames","height","display","flexDirection","flex","refreshUserQuery","Refresh","_React$Component","classCallCheck","possibleConstructorReturn","getPrototypeOf","inherits","createClass","key","value","_this$props","loading","user","refresh","currentProject","react_default","createElement","Loading","_this$props$component","componentProps","Component","component","rest","objectWithoutProperties","includes","Redirect","to","location","pathname","refreshUserGql","REFRESH_USER_QUERY","ownProps","objectSpread","options","_ref2","compose","withApollo","AuthRequired","AuthComponent","staleToken","react","Route","assign","render","childProps","path","App_Refresh","authUserLocalGraphQl","AUTH_USER_LOCAL_QUERY","currentProjectLocalGql","CURRENT_PROJECT_QUERY","ReactLazy","TagDetail","lazy","Promise","all","e","then","bind","Source","NewQuote","Quote","AuthorRoute","LoginRoute","ProjectsRoute","SearchQuotes","UserRegRoute","App","_getPrototypeOf2","_this","_len","args","Array","_key","call","state","mediaListeners","toggleSidebar","setState","handleSidebarHide","tearDownMediaListeners","m","setUpMediaListeners","queries","handleMediaQueryChange","_loop","index","window","matchMedia","addListener","removeListener","mql","matches","media","updates","entries","acc2","slicedToArray","isMatchedMedia","$set","s","update","_componentDidMount","asyncToGenerator","regenerator_default","persistCache","t0","cacheLoaded","_this$state","mQueries","Suspense","fallback","react_apollo_browser_umd","app_utils","Provider","minWidth600","BrowserRouter","Switch","exact","routeProps","App_AuthRequired","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","div","classList","add","textNode","createTextNode","appendChild","style","cssText","parent","addEventListener","refreshEvent","showRefreshUI","console","log","catch","currentTarget","removeEventListener","reload","ReactDOM","containers_App","URL","toString","origin","fetch","response","status","headers","get","indexOf","ready","unregister","checkValidServiceWorker","registerServiceWorker","updateNetworkStatus","_","networkStatus","__typename","isConnected","cache","writeData","userMutation","_ref5","_home_kanmii_projects_thysis_client_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_2__","_ref3","_ref4","_ref6","loggedOutUser","storeToken","_home_kanmii_projects_thysis_client_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__","readQuery","USER_QUERY","searchComponentState","resetClientAndPersistor","clearToken","clearProject","currentProjectMutation","_ref7","_ref8","storeProject","searchComponentStateMutation","_ref9","_ref10","searchText","searchLoading","result","searchError","initState","withClientState","resolvers","Mutation","defaults","getProject","localStorage","getItem","setItem","removeItem","project","JSON","parse","_ref11","stringify","Dimmer","inverted","className","active","Loader","size","httpLink","HTTP_URL","apiUrl","HttpLink","uri","ApolloLink","operation","forward","setContext","authorization","graphQLErrors","networkError","logError","errorName","obj","InMemoryCache","ApolloClient","link","from","storage","persistor","CachePersistor","_persistCache","SCHEMA_VERSION","SCHEMA_VERSION_KEY","restore","purge","pause","clearStore","resume","authUserLocalQuery","httpHostRegexExec","exec","Error","httpHost"],"mappings":"yFAAAA,EAAAC,EAAAC,EAAA,sBAAAC,IAAAH,EAAAC,EAAAC,EAAA,sBAAAE,IAAAJ,EAAAC,EAAAC,EAAA,sBAAAG,IAAAL,EAAAC,EAAAC,EAAA,sBAAAI,IAAAN,EAAAC,EAAAC,EAAA,sBAAAK,IAAAP,EAAAC,EAAAC,EAAA,sBAAAM,IAAAR,EAAAC,EAAAC,EAAA,sBAAAO,IAAAT,EAAAC,EAAAC,EAAA,sBAAAQ,IAAAV,EAAAC,EAAAC,EAAA,sBAAAS,IAAAX,EAAAC,EAAAC,EAAA,sBAAAU,IAAAZ,EAAAC,EAAAC,EAAA,sBAAAW,IAAAb,EAAAC,EAAAC,EAAA,sBAAAY,IAAAd,EAAAC,EAAAC,EAAA,sBAAAa,IAAAf,EAAAC,EAAAC,EAAA,sBAAAc,IAAAhB,EAAAC,EAAAC,EAAA,sBAAAe,IAEO,IAAMd,EAAU,YACVC,EAAa,SAACc,GACzB,OAAOf,EAAQgB,QAAQ,MAAOD,IAGnBb,EAAa,eACbC,EAAgB,SAACY,GAC5B,OAAOb,EAAWc,QAAQ,MAAOD,IAGtBX,EAAY,cACZC,EAAe,SAACU,GAC3B,OAAOX,EAAUY,QAAQ,MAAOD,IAGrBT,EAAmB,eACnBC,EAAqB,SAACQ,GACjC,OAAOT,EAAiBU,QAAQ,MAAOD,IAG5BP,EAAW,cACXC,EAAkB,SAACM,GAC9B,OAAOP,EAASQ,QAAQ,aAAcD,GAAM,KAGjCL,EAAoB,iBAEpBC,EAAe,iBACfC,EAAY,cACZC,EAAe,YAIxBI,EAAUC,SAASC,eAAe,gBAEzBL,EAAW,SAACM,GAClBH,IACHA,EAAUC,SAASC,eAAe,iBAGhCF,IACFA,EAAQI,UAAYD,EAAK,YAAAE,OAAeF,GAAU,oKCnCzCG,EAAM,eAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAG,SAAAC,EAAOC,EAAgBC,GAAvB,OAAAL,EAAAC,EAAAK,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAChBC,EADgB,wBAAAH,EAAAI,SAAAR,EAAAS,SAAH,gBAAAC,EAAAC,GAAA,OAAAjB,EAAAkB,MAAAH,KAAAI,YAAA,yMCSPC,yBARCC,EAAoBC,gBAAyC,CACxEC,aAAa,EACbC,cAAe,kBAAM,MACrBC,OAAQ,kBAAM,QAGHC,EAAqBL,EAAkBM,mBAExCP,0DAIL,IAAMQ,EAAY3B,OAAA4B,EAAA,EAAA5B,CAAA,GACtBmB,EAAcU,qBAAuB,iCAW3BC,EAAsB,CACjCR,aAAa,EACbK,aAAc3B,OAAO+B,OAAOZ,GAAea,OACzC,SAACC,EAAKC,GAAN,OAAAlC,OAAAmC,EAAA,EAAAnC,CAAA,GAAkBiC,EAAlBjC,OAAA4B,EAAA,EAAA5B,CAAA,GAAwBkC,GAAI,KAC5B,iPCnCG,IAAME,QAAkBC,GAAHC,kPCArB,IAAMC,QAAiBF,GAAHC,KAQZC,qQCNR,IAAMC,EAAiBH,IAAHC,IAKvBG,KAGWD,8QCVR,IAAME,QAAaL,GAAHC,KAURI,mPCVR,IAAMC,QAAUN,GAAHC,KASLK,wCCXf,IAMKC,EAKAC,EAKDC,EAhBJC,EAAA3E,EAAA,KAAA4E,EAAA5E,EAAA,IAAA6E,EAAA7E,EAAA,IAAA8E,EAAA9E,EAAA,cAMKwE,uEAKAC,0EAOE,IAuIMM,EAvIe,WAC1B,IAAMC,EAAY,CAChBC,aA4BF,SACEC,EACAC,EACAC,GAEA,IADAC,EACAvC,UAAAwC,OAAA,QAAAC,IAAAzC,UAAA,GAAAA,UAAA,GADyB0C,EAEzB,OA6CF,SACEC,EADF9D,GASE,IANE+D,EAMF/D,EANE+D,MAMFC,EAAAhE,EALEyD,UAKF,IAAAO,EALOH,EAKPG,EAJEN,EAIF1D,EAJE0D,MACAO,EAGFjE,EAHEiE,OACAC,EAEFlE,EAFEkE,UAGGJ,GAKL/D,YAAO,MAAO,4BAA6BgE,EAAO,YAAa,CAC7DN,KACAC,QACAO,SACAC,cAGFJ,EACGK,KAAKJ,EAAOE,GAAU,IACtBG,QAAQ,KAAM,SAACC,GACdtE,YACE,MACA,uBACAgE,EACA,gCACAM,GAGFZ,EAAGY,KAEJD,QAAQ,QAAS,WAAkB,IAAjBE,EAAiBnD,UAAAwC,OAAA,QAAAC,IAAAzC,UAAA,GAAAA,UAAA,GAAP,GAC3BpB,YAAO,QAAS,uBAAwBgE,EAAO,YAAaO,GAE5DZ,EAAMY,KAEPF,QAAQ,UAAW,SAAAE,GACdJ,GACFA,EAAUI,MA/BdvE,YAAO,OAAQ,4CAA6C+D,GAxDvDS,CAAeC,EAAiB,CACrCf,KACAQ,OAAQ,CACNV,QACAC,aAEFO,MAAOjB,EAAa2B,aACpBf,WAxCFgB,WAGF,GAAI3B,EACF,OAAOM,EAGT,IACImB,EADAG,EAA0B,EAI9B,SAASD,IAAyD,IAAjDE,EAAiDzD,UAAAwC,OAAA,QAAAC,IAAAzC,UAAA,GAAAA,UAAA,GAAzC0D,cAAYC,EAA6B3D,UAAAwC,OAAA,EAAAxC,UAAA,QAAAyC,EAC1DK,EAASW,EAAQ,CAAEX,OAAQ,CAAEW,UAAY,IAC/C7B,EAAS,IAAIgC,SAAOC,cAAiBC,aAAchB,IAC5CS,UAEHE,GACF7B,EAAOmC,OAAO,kBAiClB,SAA6BJ,GAC3B,IAAMb,EAASa,EACX,CAAEvB,MAAOuB,EAAQvB,MAAOC,UAAWsB,EAAQtB,WAC3C,IAEJgB,EAAkBzB,EAAOe,QAAQjB,EAAQsC,UAAWlB,IAGjDmB,OACAhB,QAAQ,KAAM,SAAAiB,GACbV,EAA0B,EAEtBG,GACFA,EAAQQ,OAAOD,GAGjBtF,YAAO,MAAO,2BAA4BsF,KAE3CjB,QAAQ,QAAS,SAAAmB,GAChBC,IACAzF,YAAO,QAAS,+BAAgCwF,KAEjDnB,QAAQ,UAAW,WAClBoB,IACAzF,YAAO,OAAQ,oCAzDG0F,CAAoBX,KAG1C/B,EAAO2C,QAAQ,WACbF,MAuBJ,SAASA,IACyB,IAA5Bb,IACFA,EAA0B,GA+E9B,SAASd,IACP,OAAO,KAGT,OAxGAa,IAwGOrB,EAGgBsC,GACVvC,oQCrJR,IAAMwC,EAA2BtD,IAAHC,IAOjCF,KAGWuD,6NCXR,IAAMC,EAAkBvD,IAAHC,IAOxBK,KAGWiD,qRCVR,IAAMC,EAAgBxD,IAAHC,IAOtBE,KAGWqD,+TCPR,IAAMC,EAAoBzD,IAAHC,IAO1ByD,KAeSC,EAAuBC,kBAKlCH,EAAmB,CACnBI,MAAO,SAAAA,GAGL,MAAO,CACLC,gBAHaD,EAAME,0cC/BlB,IAAM3D,EAAuBJ,IAAHC,IAoB7BI,IACAH,0OCtBG,IAAM8D,EAAmBhE,IAAHC,IAOzBC,KAGW8D,iRCVR,IAAMC,EAAejE,IAAHC,IAOrBI,KAGW4D,qeCKf,IAAMC,EAA4B,gBA0MnBC,IAxMe,SAC5BC,EACAC,EACAC,GAEA,GAAKF,GAIAA,EAAS/C,OAAd,CAIAgD,EAAOE,WAAW,CAChBtD,MAAOuD,IACPzC,KAAM,CAAEqC,cAGV,IAAMK,EAAuB,GACvBC,EAA0B,GAE1BC,EAAaP,EAASQ,IAAI,SAAAC,GAC9B,IAAKA,EACH,MAAO,GAF0B,IAKvBC,EAAcD,EAAlB5H,GAQR,OANAwH,EAAoB,SAAAjH,OAAUsH,IAAe,CAAEA,aAE/CJ,EAAuB,GAAAlH,OAAI0G,GAAJ1G,OAAgCsH,IAAe,CACpEA,aAGKA,IAGHC,EAAcJ,EAAWtD,OAEzB2D,EA4GN,SAAkCC,GAChC,IAAIC,EAAW,GACTC,EAAmB,GAEzB,OAAKF,GAOLN,EAAWS,QAAQ,SAAAnI,GACjB,IAAMoI,EAAK,GAAA7H,OAAM0G,GAAN1G,OAAkCP,GAC7CkI,EAAOtD,KAAP,IAAArE,OAAgB6H,EAAhB,sBAEAH,GAAQ,GAAA1H,OAAO6H,EAAP,uBAAA7H,OAAkC6H,EAAlC,2CAKH,CACLH,WACAC,WAjBO,CACLD,WACAC,UAnHgBG,CAAyBP,GACzCQ,EAqIN,SAAkCN,GAChC,IAAIC,EAAW,GACTC,EAAmB,GAEzB,OAAKF,GAOLN,EAAWS,QAAQ,SAAAnI,GACjB,IAAMoI,EAAK,GAAA7H,OAAMgI,EAAWvI,IAC5BkI,EAAOtD,KAAP,IAAArE,OAAgB6H,EAAhB,sBAEAH,GAAQ,GAAA1H,OAAO6H,EAAP,uBAAA7H,OAAkC6H,EAAlC,+CAKH,CACLH,WACAC,WAjBO,CACLD,WACAC,UA5IkBM,CAAyBV,GAC3CW,EAAY/H,OAAAgI,EAAA,EAAAhI,CAAI4H,EAAgBJ,QAApB3H,OAAAG,OAAAgI,EAAA,EAAAhI,CAA+BqH,EAAcG,SAAQrC,KACrE,KAGI7B,EAAQjB,IAAHC,IACYyF,EACfH,EAAgBL,SAEhBF,EAAcE,SAYhBhF,IACAC,IACAG,KAENG,IAAO2B,QACLkC,EACA,CACErD,MAAOA,EAAM2E,IAAIC,OAAOC,KACxB5E,UAAUvD,OAAAoI,EAAA,EAAApI,CAAA,GAAM8G,EAAyBC,GACzC1B,OAkEJ,SAAAtF,GAAkD,IAA9BqE,EAA8BrE,EAA9BqE,MApIjB,SAAArD,GAAAsH,EAAApH,MAAAH,KAAAI,YAqIDoH,CAASlE,EAAKmE,MArIb,SAAAC,GAAAC,EAAAxH,MAAAH,KAAAI,WAsIDwH,CAAYtE,GAtIX,SAAApD,GAAA2H,EAAA1H,MAAAH,KAAAI,WAuID0H,CAAgBxE,EAAKyE,aAvIpB,SAAAC,GAAAC,EAAA9H,MAAAH,KAAAI,WAwID8H,CAAmB5E,MAxIlB,SAAAiE,IAAA,OAAAA,EAAArI,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAsEH,SAAAC,EAAwBkI,GAAxB,OAAArI,EAAAC,EAAAK,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UACO4H,EADP,CAAA9H,EAAAE,KAAA,eAAAF,EAAAwI,OAAA,iBAKEvC,EAAOE,WAAW,CAAEtD,MAAO4F,IAAiB9E,KAAM,CAAEmE,UALtD,wBAAA9H,EAAAI,SAAAR,EAAAS,UAtEGG,MAAAH,KAAAI,WAAA,SAAAyH,IAAA,OAAAA,EAAA3I,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KA8EH,SAAA+I,EACEN,GADF,OAAA3I,EAAAC,EAAAK,KAAA,SAAA4I,GAAA,cAAAA,EAAA1I,KAAA0I,EAAAzI,MAAA,UAGOkI,EAHP,CAAAO,EAAAzI,KAAA,eAAAyI,EAAAH,OAAA,iBAOEvC,EAAOE,WAAW,CAChBtD,MAAO+F,IACPjF,KAAM,CAAEyE,iBATZ,wBAAAO,EAAAvI,SAAAsI,EAAArI,UA9EGG,MAAAH,KAAAI,WAAA,SAAAuH,IAAA,OAAAA,EAAAzI,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KA2FH,SAAAkJ,EAA2BlF,GAA3B,OAAAlE,EAAAC,EAAAK,KAAA,SAAA+I,GAAA,cAAAA,EAAA7I,KAAA6I,EAAA5I,MAAA,OACEqG,EAAWS,QAAQ,SAAAnI,GACjB,IAAMkK,EAAM3B,EAAWvI,GACjBmK,EAAUrF,EAAKoF,GAEhBC,GAIL/C,EAAOE,WAAW,CAChBtD,MAAOoG,IACPnG,UAAW,CACT2E,OAAQ,CACNf,UAAW7H,IAGf8E,KAAM,CAAEqF,eAhBd,wBAAAF,EAAA1I,SAAAyI,EAAAxI,UA3FGG,MAAAH,KAAAI,WAAA,SAAA6H,IAAA,OAAAA,EAAA/I,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAgHH,SAAAuJ,EAAkCvF,GAAlC,OAAAlE,EAAAC,EAAAK,KAAA,SAAAoJ,GAAA,cAAAA,EAAAlJ,KAAAkJ,EAAAjJ,MAAA,OACEqG,EAAWS,QAAQ,SAAAnI,GACjB,IAAMuK,EAAUzF,EAAI,GAAAvE,OAAI0G,GAAJ1G,OAAgCP,IAE/CuK,GAILnD,EAAOE,WAAW,CAChBtD,MAAOwG,IACPvG,UAAW,CACTwG,OAAQ,CACN5C,UAAW7H,IAGf8E,KAAM,CAAEyF,eAfd,wBAAAD,EAAA/I,SAAA8I,EAAA7I,UAhHGG,MAAAH,KAAAI,WA2IH,SAAS2G,EAAWvI,GAClB,eAAAO,OAAgBP,0OCjKb,IAAM0K,EAAgB3H,IAAHC,IAOtBF,KAGW4H,uCCZf5L,EAAAC,EAAAC,EAAA,sBAAA2L,IAAA7L,EAAAC,EAAAC,EAAA,sBAAA4L,IAAA9L,EAAAC,EAAAC,EAAA,sBAAA6L,IAAA/L,EAAAC,EAAAC,EAAA,sBAAA8L,IAAO,IAmBKA,EAZCH,EAAY,QACZC,EAAsB,kBAItBC,EAAuB,CAClCE,OAAQ,OACRC,QAAS,OACTC,cAXmC,SAYnCC,KAAM,aAGIJ,qvBChBL,IAaQK,EAbiBpI,IAAHC,IASzBF,IACA2D,cCRS2E,EAAb,SAAAC,GAAA,SAAAD,IAAA,OAAA1K,OAAA4K,EAAA,EAAA5K,CAAAc,KAAA4J,GAAA1K,OAAA6K,EAAA,EAAA7K,CAAAc,KAAAd,OAAA8K,EAAA,EAAA9K,CAAA0K,GAAAzJ,MAAAH,KAAAI,YAAA,OAAAlB,OAAA+K,EAAA,EAAA/K,CAAA0K,EAAAC,GAAA3K,OAAAgL,EAAA,EAAAhL,CAAA0K,EAAA,EAAAO,IAAA,SAAAC,MAAA,WACW,IAAAC,EACmDrK,KAAKoF,MAAvDkF,EADDD,EACCC,QAAkBC,EADnBF,EACUG,QAAeC,EADzBJ,EACyBI,eAAgB9H,EADzC0H,EACyC1H,MAChD,GAAI2H,IAAYC,EACd,OAAOG,EAAArL,EAAAsL,cAACC,EAAA,EAAD,MAHF,IAAAC,EAMmC7K,KAAKoF,MAAM0F,eAAlCC,EANZF,EAMCG,UAAyBC,EAN1B/L,OAAAgM,EAAA,EAAAhM,CAAA2L,EAAA,eAQP,OAAIlI,IAAUA,EAAM2B,QAAQ6G,SAAS,WAC5BT,EAAArL,EAAAsL,cAACS,EAAA,EAAD,CAAUC,GAAIhN,MAIpBoM,IACAQ,EAAKK,UAAYL,EAAKK,SAASC,YAAcjN,IAKzCoM,EAAArL,EAAAsL,cAACI,EAAcE,GAHbP,EAAArL,EAAAsL,cAACS,EAAA,EAAD,CAAUC,GAAI/M,UAjB3BsL,EAAA,CAA6BrJ,IAAMwK,oBCK7BS,EAAiBrG,kBAKrBsG,EAAoB,CACpBrG,MAAO,SAAAnG,GAAwB,IAArBqE,EAAqBrE,EAArBqE,KAAMoI,EAAezM,EAAfyM,SACd,IAAKpI,EACH,OAAOA,EAFoB,IAKrBkH,EAAYlH,EAAZkH,QAER,IAAKA,EACH,OAAOlH,EARoB,IAWrBqC,EAAkB6E,EAAlB7E,SAAUE,EAAQ2E,EAAR3E,IACVD,EAA4B8F,EAA5B9F,OAAQP,EAAoBqG,EAApBrG,gBAQhB,OANAK,YAAeC,EAAUC,EAAQC,GAEjCR,EAAgB,CACd5C,UAAW,CAAE8H,KAAMC,KAGdtL,OAAAyM,EAAA,EAAAzM,CAAA,GAAKoE,EAAZ,CAAkBkH,aAGpBoB,QAAS,SAAAC,GAAA,MAAc,CACrBpJ,UAAW,CACT+H,QAAS,CAAE3E,IAFNgG,EAAGhG,UAOCiG,oBACbC,aACA7G,IACAsG,EAHaM,CAIblC,GC3CWoC,EAAe,SAAA/M,GAMf,IALAgN,EAKAhN,EALX+L,UACAT,EAIWtL,EAJXsL,KACA2B,EAGWjN,EAHXiN,WACAzB,EAEWxL,EAFXwL,eACGQ,EACQ/L,OAAAgM,EAAA,EAAAhM,CAAAD,EAAA,oDACLqE,EAAIpE,OAAAyM,EAAA,EAAAzM,CAAA,CACRqL,OACAE,kBACGQ,GAyBL,OAAOkB,EAAA,cAACC,EAAA,EAADlN,OAAAmN,OAAA,GAAW/I,EAAX,CAAiBgJ,OAtBT,SAACC,GACd,OAAIhC,EACGE,GAAkBQ,EAAKuB,OAASlO,IAI9B6N,EAAA,cAACF,EAAD/M,OAAAmN,OAAA,GAAmB/I,EAAUiJ,IAH3BJ,EAAA,cAACf,EAAA,EAAD,CAAUC,GAAI/M,MAMrB4N,EAEAC,EAAA,cAACM,EAAD,CACE3B,eAAc5L,OAAAyM,EAAA,EAAAzM,CAAA,CAAI8L,UAAWiB,GAAkBM,GAC/C1G,IAAKqG,EACLzB,eAAgBA,IAKf0B,EAAA,cAACf,EAAA,EAAD,CAAUC,GAAIhN,WC5BnBqO,EAAuBvH,kBAK3BwH,IAAuB,CACvBvH,MAAO,SAAAnG,GACL,OADmBA,EAAXqE,QAKNsJ,EAAyBzH,kBAK7B0H,IAAuB,CACvBzH,MAAO,SAAAyG,GACL,OADmBA,EAAXvI,QAKGwI,oBACbY,EACAE,EAFad,CAGbE,oBCPIc,EAAYvM,EACZwM,EAAYD,EAAUE,KAAK,kBAAMC,QAAAC,IAAA,CAAA5P,EAAA6P,EAAA,GAAA7P,EAAA6P,EAAA,GAAA7P,EAAA6P,EAAA,GAAA7P,EAAA6P,EAAA,KAAAC,KAAA9P,EAAA+P,KAAA,aACjCC,EAASR,EAAUE,KAAK,kBAAMC,QAAAC,IAAA,CAAA5P,EAAA6P,EAAA,GAAA7P,EAAA6P,EAAA,GAAA7P,EAAA6P,EAAA,GAAA7P,EAAA6P,EAAA,KAAAC,KAAA9P,EAAA+P,KAAA,aAC9BE,EAAWT,EAAUE,KAAK,kBAAMC,QAAAC,IAAA,CAAA5P,EAAA6P,EAAA,GAAA7P,EAAA6P,EAAA,GAAA7P,EAAA6P,EAAA,IAAA7P,EAAA6P,EAAA,GAAA7P,EAAA6P,EAAA,KAAAC,KAAA9P,EAAA+P,KAAA,aAChCG,EAAQV,EAAUE,KAAK,kBAAMC,QAAAC,IAAA,CAAA5P,EAAA6P,EAAA,GAAA7P,EAAA6P,EAAA,GAAA7P,EAAA6P,EAAA,GAAA7P,EAAA6P,EAAA,KAAAC,KAAA9P,EAAA+P,KAAA,aAC7BI,EAAcX,EAAUE,KAAK,kBAAMC,QAAAC,IAAA,CAAA5P,EAAA6P,EAAA,GAAA7P,EAAA6P,EAAA,GAAA7P,EAAA6P,EAAA,GAAA7P,EAAA6P,EAAA,KAAAC,KAAA9P,EAAA+P,KAAA,aACnCK,EAAaZ,EAAUE,KAAK,kBAAMC,QAAAC,IAAA,CAAA5P,EAAA6P,EAAA,GAAA7P,EAAA6P,EAAA,KAAAC,KAAA9P,EAAA+P,KAAA,aAClCM,GAAgBb,EAAUE,KAAK,kBAAMC,QAAAC,IAAA,CAAA5P,EAAA6P,EAAA,GAAA7P,EAAA6P,EAAA,GAAA7P,EAAA6P,EAAA,IAAA7P,EAAA6P,EAAA,GAAA7P,EAAA6P,EAAA,MAAAC,KAAA9P,EAAA+P,KAAA,aAErCO,GAAed,EAAUE,KAAK,kBAClCC,QAAAC,IAAA,CAAA5P,EAAA6P,EAAA,GAAA7P,EAAA6P,EAAA,GAAA7P,EAAA6P,EAAA,GAAA7P,EAAA6P,EAAA,MAAAC,KAAA9P,EAAA+P,KAAA,aAGIQ,GAAef,EAAUE,KAAK,kBAClCC,QAAAC,IAAA,CAAA5P,EAAA6P,EAAA,GAAA7P,EAAA6P,EAAA,MAAAC,KAAA9P,EAAA+P,KAAA,aAGWS,GAAb,SAAAjE,GAAA,SAAAiE,IAAA,IAAAC,EAAAC,EAAA9O,OAAA4K,EAAA,EAAA5K,CAAAc,KAAA8N,GAAA,QAAAG,EAAA7N,UAAAwC,OAAAsL,EAAA,IAAAC,MAAAF,GAAAG,EAAA,EAAAA,EAAAH,EAAAG,IAAAF,EAAAE,GAAAhO,UAAAgO,GAAA,OAAAJ,EAAA9O,OAAA6K,EAAA,EAAA7K,CAAAc,MAAA+N,EAAA7O,OAAA8K,EAAA,EAAA9K,CAAA4O,IAAAO,KAAAlO,MAAA4N,EAAA,CAAA/N,MAAAjB,OAAAmP,MACEI,MAAetN,IADjBgN,EAEEO,eAAoC,GAFtCP,EAoGUQ,cAAgB,WAAM,IACpBhO,EAAgBwN,EAAKM,MAArB9N,YACRwN,EAAKS,SAAS,CAAEjO,aAAcA,KAtGlCwN,EAyGUU,kBAAoB,kBAAMV,EAAKS,SAAS,CAAEjO,aAAa,KAzGjEwN,EA2GUW,uBAAyB,kBAAMX,EAAKO,eAAe5H,QAAQ,SAAAiI,GAAC,OAAIA,OA3G1EZ,EA6GUa,oBAAsB,WAK5B,IAJA,IAAMC,EAAU5P,OAAO+B,OAAOJ,KAExBkO,EAAyBf,EAAKe,uBAHFC,EAAA,SAKzBC,GACP,IAAML,EAAIM,OAAOC,WAAWL,EAAQG,IACpCL,EAAEQ,YAAYL,GACdA,EAAuBH,GACvBZ,EAAKO,eAAeU,GAAS,kBAC3BL,EAAES,eAAeN,KALZE,EAAQ,EAAGA,EAAQH,EAAQlM,OAAQqM,IAASD,EAA5CC,IAlHbjB,EA2HUe,uBAAyB,SAC/BO,GACG,IACKC,EAAmBD,EAAnBC,QAASC,EAAUF,EAAVE,MAGXC,EAAUvQ,OAAOwQ,QAAQ7O,KAAcK,OAAO,SAACyO,EAAD1Q,GAAkB,IAAA4M,EAAA3M,OAAA0Q,EAAA,EAAA1Q,CAAAD,EAAA,GAAVmC,EAAUyK,EAAA,GAC9DgE,EAD8DhE,EAAA,KACvC2D,EAO7B,OALIK,GAAkBzO,IAAMf,IAAcU,sBACxCiN,EAAKS,SAAS,CAAEjO,YAAa+O,IAG/BI,EAAKvO,GAAK,CAAE0O,OAAMD,GAAiBN,GAC5BI,GAVI,IAab3B,EAAKS,SAAS,SAAAsB,GAAC,OACbC,IAAOD,EAAG,CACRlP,aAAc4O,OA9ItBzB,EAAA,OAAA9O,OAAA+K,EAAA,EAAA/K,CAAA4O,EAAAjE,GAAA3K,OAAAgL,EAAA,EAAAhL,CAAA4O,EAAA,EAAA3D,IAAA,oBAAAC,MAAA,eAAA6F,EAAA/Q,OAAAgR,EAAA,EAAAhR,CAAAiR,EAAA9Q,EAAAC,KAAA,SAAAC,IAAA,OAAA4Q,EAAA9Q,EAAAK,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAMYuQ,cANZ,OAAAzQ,EAAAE,KAAA,eAAAF,EAAAC,KAAA,EAAAD,EAAA0Q,GAAA1Q,EAAA,SAQMX,YAAO,QAAS,+BAAVW,EAAA0Q,IARZ,OAWIrQ,KAAKyO,SAAS,CAAE6B,aAAa,IAC7BtQ,KAAK6O,sBAZT,yBAAAlP,EAAAI,SAAAR,EAAAS,KAAA,qCAAAiQ,EAAA9P,MAAAH,KAAAI,YAAA,KAAA+J,IAAA,uBAAAC,MAAA,WAgBIpK,KAAK2O,2BAhBT,CAAAxE,IAAA,SAAAC,MAAA,WAsBI,IAFwBpK,KAAKsO,MAArBgC,YAGN,OAAOnE,EAAA,cAACvB,EAAA,EAAD,MAJF,IAAA2F,EAOyCvQ,KAAKsO,MAA7C9N,EAPD+P,EAOC/P,YAA2BgQ,EAP5BD,EAOc1P,aAErB,OACEsL,EAAA,cAACW,EAAU2D,SAAX,CAAoBC,SAAUvE,EAAA,cAACvB,EAAA,EAAD,OAC5BuB,EAAA,cAACwE,EAAA,eAAD,CAAgB/K,OAAQA,KACtBuG,EAAA,cAACyE,EAAA,EAAkBC,SAAnB,CACEzG,MAAO,CACL5J,cACAC,cAAeT,KAAKwO,cACpB9N,OAAQV,KAAK0O,kBACboC,YAAaN,EAASnQ,IAAcU,wBAGtCoL,EAAA,cAAC4E,EAAA,EAAD,KACE5E,EAAA,cAAC6E,EAAA,EAAD,KACE7E,EAAA,cAACC,EAAA,EAAD,CACE6E,OAAO,EACPzE,KAAMpO,IACNkO,OAAQ,SAAA4E,GAAU,OAAI/E,EAAA,cAAC0B,GAAiBqD,MAG1C/E,EAAA,cAACC,EAAA,EAAD,CACE6E,OAAO,EACPzE,KAAMnO,IACNiO,OAAQ,SAAA4E,GAAU,OAAI/E,EAAA,cAACuB,EAAewD,MAGxC/E,EAAA,cAACgF,EAAD,CACEF,OAAO,EACPzE,KAAM7O,IACNqN,UAAWsC,IAGbnB,EAAA,cAACgF,EAAD,CAAcF,OAAO,EAAMzE,KAAM3O,IAAWmN,UAAWwC,IAEvDrB,EAAA,cAACgF,EAAD,CACEF,OAAO,EACPzE,KAAMzO,IACNiN,UAAWyC,IAGbtB,EAAA,cAACgF,EAAD,CACEF,OAAO,EACPzE,KAAMlO,IACN0M,UAAW2C,KAGbxB,EAAA,cAACgF,EAAD,CACEF,OAAO,EACPzE,KAAMrO,IACN6M,UAAW4C,KAGbzB,EAAA,cAACgF,EAAD,CACEF,OAAO,EACPzE,KAAM/O,IACNuN,UAAW+B,IAGbZ,EAAA,cAACgF,EAAD,CACEF,OAAO,EACPzE,KAAMvO,IACN+M,UAAWuC,IAGbpB,EAAA,cAACC,EAAA,EAAD,CAAOE,OAAQ,SAAA4E,GAAU,OAAI/E,EAAA,cAACuB,EAAewD,eA3F7DpD,EAAA,CAAyBvN,aC9CVuN,MCSTsD,kBAAcC,QACW,cAA7BnC,OAAO5D,SAASgG,UAEe,UAA7BpC,OAAO5D,SAASgG,UAEhBpC,OAAO5D,SAASgG,SAASC,MACvB,4DAyCN,SAASC,GAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTrE,KAAK,SAAAyE,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WAClCD,IACFA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBzD,QACfoD,UAAUC,cAAcO,WA6D1C,WACE,IAAMC,EAAMxT,SAASgM,cAAc,OACnCwH,EAAIC,UAAUC,IAAI,KAAM,WAAY,QACpC,IAAMC,EAAW3T,SAAS4T,eACxB,sDAEFJ,EAAIK,YAAYF,GAChBH,EAAIM,MAAMC,QAAV,iIAQA,IAAMC,EAAShU,SAASgM,cAAc,OACtCgI,EAAOF,MAAMC,QAAb,yNAaAC,EAAOH,YAAYL,GACnBxT,SAAS0I,KAAKmL,YAAYG,GAC1BA,EAAOC,iBAAiB,QAASC,IAAc,GAtFjCC,GAKAC,QAAQC,IAAI,4CAOvBC,MAAM,SAAAtQ,GACLoQ,QAAQpQ,MAAM,4CAA6CA,KA+BjE,SAASkQ,GAAa1F,GAEpB,IAAM+F,EAAgB/F,EAAE+F,cACpBA,GACFA,EAAcC,oBAAoB,QAASN,IAAc,GAI3D3D,OAAO5D,SAAS8H,SCnHlBC,SAAgBlH,EAAA,cAACmH,GAAD,MAAS3U,SAASC,eAAe,SDWlC,WACb,GAA6C,kBAAmB8S,UAAW,CAMzE,GAJkB,IAAI6B,IACpBzT,GACAoP,OAAO5D,SAASkI,YAEJC,SAAWvE,OAAO5D,SAASmI,OAIvC,OAGFvE,OAAO0D,iBAAiB,OAAQ,WAC9B,IAAMnB,EAAK,GAAA1S,OAAMe,GAAN,sBAEPsR,IAoDV,SAAiCK,GAE/BiC,MAAMjC,GACHrE,KAAK,SAAAuG,GAGkB,MAApBA,EAASC,SACwD,IAAjED,EAASE,QAAQC,IAAI,gBAAiBC,QAAQ,cAG9CrC,UAAUC,cAAcqC,MAAM5G,KAAK,SAAAyE,GACjCA,EAAaoC,aAAa7G,KAAK,WAC7B8B,OAAO5D,SAAS8H,aAKpB5B,GAAgBC,KAGnBwB,MAAM,WACLF,QAAQC,IACN,mEAxEAkB,CAAwBzC,GAIxBC,UAAUC,cAAcqC,MAAM5G,KAAK,WACjC2F,QAAQC,IACN,+GAMJxB,GAAgBC,MCzCxB0C,iQCTO,IAAMlP,QAAe1D,GAAHC,KASVyD,4KCOTmP,EAED,SAACC,EAADpV,EAAA4M,GAAmC,IAChCvI,EAAO,CACXgR,cAAe,CACbC,WAAY,gBACZC,YAJkCvV,EAA7BuV,cAQT,OARsC3I,EAAZ4I,MAOpBC,UAAU,CAAEpR,SACX,MAGHqR,EAA4C,eAAAC,EAAA1V,OAAA2V,EAAA,EAAA3V,CAAAE,EAAAC,EAAAC,KAAG,SAAAC,EACnD8U,EADmDS,EAAAC,GAAA,IAAAxK,EAAAkK,EAAAO,EAAAC,EAAA3R,EAAA,OAAAlE,EAAAC,EAAAK,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UAEjD0K,EAFiDuK,EAEjDvK,KACAkK,EAHiDM,EAGjDN,OAEElK,EAL+C,CAAA5K,EAAAE,KAAA,eAMjD4U,EAAMC,UAAU,CAAEpR,KAAM,CAAEiH,OAAM2B,WAAY,KAAM+I,cAAe,QACjEC,EAAW3K,EAAK1E,KAPiClG,EAAAwI,OAAA,SAS1CoC,GAT0C,UAAAyK,EAAA9V,OAAAiW,EAAA,EAAAjW,CAAA,GAe7CuV,EAAMW,UAA4B,CAAE5S,MAAO6S,OAAiB,CAC9D9K,KAAM,OAFI0K,EAdqCD,EAc3CzK,KAMFjH,EAAO,CACXiH,KAAM,KACN2B,WAAY,KACZzB,eAAgB,KAChB6K,qBAAsB,OAKpBL,EA7B+C,CAAAtV,EAAAE,KAAA,gBAAAF,EAAAE,KAAA,GA8B3C0V,cA9B2C,QA+BjDjS,EAAK2R,cAAgBA,EA/B4B,eAAAtV,EAAAE,KAAA,GAkC7C4U,EAAMC,UAAU,CACpBpR,SAnCiD,eAqCnDkS,IACAC,IAtCmD9V,EAAAwI,OAAA,SAwC5C8M,GAxC4C,yBAAAtV,EAAAI,SAAAR,EAAAS,SAAH,gBAAAC,EAAAC,EAAAwH,GAAA,OAAAkN,EAAAzU,MAAAH,KAAAI,YAAA,GA2C5CsV,EAED,SAACrB,EAADsB,EAAAC,GAAsC,IAAhCnL,EAAgCkL,EAAhClL,eACHnH,EAAO,CAAEmH,kBAKf,OANyCmL,EAAZnB,MAEvBC,UAAU,CAAEpR,SAElBuS,EAAapL,GAEN,MAGHqL,EAED,SAACzB,EAAD0B,EAAAC,GAA+C,IAAnBzY,EAAmBwY,EAAzCT,qBAA6Bb,EAAYuB,EAAZvB,MAShCnR,EAAO,CACXgS,qBATa,CACbW,WAAY1Y,EAAE0Y,YAAc,GAC5BC,cAAe3Y,EAAE2Y,gBAAiB,EAClCC,OAAQ5Y,EAAE4Y,QAAU,KACpBC,YAAa7Y,EAAE6Y,aAAe,KAC9B7B,WAAY,yBASd,OAFAE,EAAMC,UAAU,CAAEpR,SAEX,MAGI+S,EAAY,SAAC5B,GACxB,OAAO6B,YAAgB,CACrB7B,QACA8B,UAAW,CACTC,SAAU,CACRpC,sBACA7J,KAAMoK,EACNlK,eAAgBiL,EAChBJ,qBAAsBQ,IAG1BW,SAAU,CACRvK,WAAYpI,IACZyG,KAAM,KACNE,eAAgBiM,IAChBpB,qBAAsB,KACtBL,cAAe,SAKRnR,EAAW,kBACtB6S,aAAaC,QAAQzN,MAAc,MAE/B+L,EAAa,SAACrR,GAAD,OAAmB8S,aAAaE,QAAQ1N,IAAWtF,IAEhE2R,EAAa,kBAAMmB,aAAaG,WAAW3N,MAE3CuN,EAAa,WACjB,IAAMK,EAAUJ,aAAaC,QAAQxN,KACrC,OAAO2N,EAAUC,KAAKC,MAAMF,GAAW,MAGnClB,EAAY,eAAAqB,EAAAhY,OAAA2V,EAAA,EAAA3V,CAAAE,EAAAC,EAAAC,KAAG,SAAA+I,EAAO0O,GAAP,OAAA3X,EAAAC,EAAAK,KAAA,SAAA4I,GAAA,cAAAA,EAAA1I,KAAA0I,EAAAzI,MAAA,cAAAyI,EAAAH,OAAA,SACnBwO,aAAaE,QAAQzN,IAAqB4N,KAAKG,UAAUJ,KADtC,wBAAAzO,EAAAvI,SAAAsI,EAAArI,SAAH,gBAAAgI,GAAA,OAAAkP,EAAA/W,MAAAH,KAAAI,YAAA,GAGZqV,EAAe,kBAAMkB,aAAaG,WAAW1N,oECvItCwB,UAAU,kBACrBuB,EAAA,cAACiL,EAAA,EAAD,CAAQC,UAAU,EAAMC,UAAU,gBAAgBC,QAAQ,GACxDpL,EAAA,cAACqL,EAAA,EAAD,CAAQC,KAAK,UAAb,gBCNW7M,2ICWX8M,6FAFEC,EAAW1T,cAAiB2T,OAGlCF,EAAW,IAAIG,IAAS,CAAEC,IAAKH,IAC/BD,EAoDS,IAAIK,IAAW,SAACC,EAAWC,GAChC,IAAMpU,EAAQC,cAUd,OARID,GACFmU,EAAUE,WAAW,CACnBrE,QAAS,CACPsE,cAAa,UAAApZ,OAAY8E,MAKxBoU,EAAUA,EAAQD,GAAa,OA/DVjZ,OAAO2Y,GACvCA,EAoHS/S,YAAQ,SAAAkH,GAA0DA,EAAvDuM,cAAuD,IAAxCC,EAAwCxM,EAAxCwM,aAAc1E,EAA0B9H,EAA1B8H,SAEvC2E,GAFiEzM,EAAhBmM,UAEtC,SAACO,EAAmBC,MAmBjC7E,GACF2E,EAAS,WAAY3E,GAGnB0E,GACFC,EAAS,UAAWD,KA9IOtZ,OAAO2Y,GAMxC,IAAMjD,EAAQ,IAAIgE,IAEL7S,EAAS,IAAI8S,IAAa,CACrCjE,QACAkE,KAAMZ,IAAWa,KAAK,CAACvC,YAAU5B,GAAQiD,MAIrCmB,EAAUlC,aAEVmC,EAAY,IAAIC,iBAAe,CACnCtE,QACAoE,UACA1O,IAAK,gCAGA,SAAeiG,IAAtB,OAAA4I,EAAA7Y,MAAAH,KAAAI,sDAAO,SAAAiI,IAAA,IAAA4Q,EAAAC,EAAA,OAAA9Z,EAAAC,EAAAK,KAAA,SAAA4I,GAAA,cAAAA,EAAA1I,KAAA0I,EAAAzI,MAAA,UACCoZ,EAAiB,MACjBC,EAAqB,+BACJvC,aAAaC,QAAQsC,KAErBD,EALlB,CAAA3Q,EAAAzI,KAAA,eAAAyI,EAAAzI,KAAA,EAQGiZ,EAAUK,UARb,OAAA7Q,EAAAzI,KAAA,uBAAAyI,EAAAzI,KAAA,GAYGiZ,EAAUM,QAZb,QAaHzC,aAAaE,QAAQqC,EAAoBD,GAbtC,eAAA3Q,EAAAH,OAAA,SAgBE2Q,GAhBF,yBAAAxQ,EAAAvI,SAAAsI,EAAArI,gCAmBA,IAAMuV,EAAuB,eAAAtW,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAG,SAAAC,IAAA,OAAAH,EAAAC,EAAAK,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAC/BiZ,EAAUO,QADqB,cAAA1Z,EAAAE,KAAA,EAE/BiZ,EAAUM,QAFqB,cAAAzZ,EAAAE,KAAA,EAG/B+F,EAAO0T,aAHwB,cAAA3Z,EAAAE,KAAA,EAI/BiZ,EAAUS,SAJqB,wBAAA5Z,EAAAI,SAAAR,EAAAS,SAAH,yBAAAf,EAAAkB,MAAAH,KAAAI,YAAA,kQCnD7B,IAAMoZ,EAAqBjY,IAAHC,IAS3ByD,KAGWuU,uCCiBAvV,IAjCe,WAC5B,IAMIC,EANE0T,EAAS9X,qCAYb,IAAM2Z,EAAoB,SAASC,KAAK9B,GAExC,IAAK6B,EACH,MAAM,IAAIE,MAAM,yBAA2B/B,EAAS,KAGtD,IAAMgC,EAAWH,EAAkB,GAQrC,OALEvV,EAAe0T,EACZnZ,QAAQmb,EAHwB,UAAbA,EAAuB,MAAQ,MAIlDnb,QA1BU,SA0BQ,WAGhB,CACLmZ,SACA1T","file":"static/js/main.0ac404b5.chunk.js","sourcesContent":["// ROUTE URLS\n\nexport const TAG_URL = \"/tags/:id\";\nexport const makeTagURL = (id: string) => {\n  return TAG_URL.replace(\":id\", id);\n};\n\nexport const SOURCE_URL = \"/sources/:id\";\nexport const makeSourceURL = (id: string) => {\n  return SOURCE_URL.replace(\":id\", id);\n};\n\nexport const QUOTE_URL = \"/quotes/:id\";\nexport const makeQuoteURL = (id: string) => {\n  return QUOTE_URL.replace(\":id\", id);\n};\n\nexport const AUTHOR_ROUTE_URL = \"/authors/:id\";\nexport const makeAuthorRouteURL = (id: string) => {\n  return AUTHOR_ROUTE_URL.replace(\":id\", id);\n};\n\nexport const ROOT_URL = \"/:sourceId?\";\nexport const makeNewQuoteURL = (id?: string) => {\n  return ROOT_URL.replace(\":sourceId?\", id || \"\");\n};\n\nexport const SEARCH_QUOTES_URL = \"/search/quotes\";\n\nexport const USER_REG_URL = \"/auth/register\";\nexport const LOGIN_URL = \"/auth/login\";\nexport const PROJECTS_URL = \"/projects\" as string;\n\n// END ROUTE URLS\n\nlet titleEl = document.getElementById(\"thysis-title\");\n\nexport const setTitle = (title?: string) => {\n  if (!titleEl) {\n    titleEl = document.getElementById(\"thysis-title\");\n  }\n\n  if (titleEl) {\n    titleEl.innerText = title ? `Thysis | ${title}` : \"Thysis\";\n  }\n};\n","import { InputOnChangeData } from \"semantic-ui-react/dist/commonjs/elements/Input/Input\";\n\nexport type SemanticOnInputChangeFunc = (\n  e: React.ChangeEvent<HTMLInputElement>,\n  data: InputOnChangeData\n) => void;\n\n// tslint:disable-next-line:no-any\nexport const logger = async (prefix: string, tag: string, ...data: any) => {\n  if (process.env.NODE_ENV === \"development\") {\n    // tslint:disable-next-line:no-console\n    console[prefix](\n      \"\\n\\n     =======logging starts======\\n\",\n      tag,\n      \"\\n\",\n      ...data,\n      \"\\n     =======logging ends======\\n\"\n    );\n  }\n};\n","import * as React from \"react\";\n\nexport interface SideBarContextProps {\n  showSidebar: boolean;\n  minWidth600?: boolean;\n  onShowClicked: () => void;\n  onHide: () => void;\n}\n\nexport const AppSidebarContext = React.createContext<SideBarContextProps>({\n  showSidebar: false,\n  onShowClicked: () => null,\n  onHide: () => null\n});\n\nexport const AppSidebarConsumer = AppSidebarContext.Consumer;\n\nexport enum MediaQueryKey {\n  SCREEN_MIN_WIDTH_600 = \"screenMinWidth600\"\n}\n\nexport const mediaQueries = {\n  [MediaQueryKey.SCREEN_MIN_WIDTH_600]: \"screen and (min-width: 600px)\"\n};\n\ntype StateMediaQueries = { [k in MediaQueryKey]: boolean };\n\nexport interface State {\n  showSidebar: boolean;\n  cacheLoaded?: boolean;\n  mediaQueries: StateMediaQueries;\n}\n\nexport const initialState: State = {\n  showSidebar: false,\n  mediaQueries: Object.values(MediaQueryKey).reduce(\n    (acc, k) => ({ ...acc, [k]: false }),\n    {} as StateMediaQueries\n  )\n};\n","import gql from \"graphql-tag\";\n\nexport const projectFragment = gql`\n  fragment ProjectFragment on Project {\n    id\n    title\n    insertedAt\n  }\n`;\n\nexport default projectFragment;\n","import gql from \"graphql-tag\";\n\nexport const sourceTypeFrag = gql`\n  fragment SourceTypeFrag on SourceType {\n    id\n    name\n    __typename\n  }\n`;\n\nexport default sourceTypeFrag;\n","import gql from \"graphql-tag\";\n\nimport { sourceForDisplayFrag } from \"../graphql/source-for-display.fragment\";\n\nexport const sourceFullFrag = gql`\n  fragment SourceFullFrag on Source {\n    ...SourceForDisplayFrag\n  }\n\n  ${sourceForDisplayFrag}\n`;\n\nexport default sourceFullFrag;\n","import gql from \"graphql-tag\";\n\nexport const authorFrag = gql`\n  fragment AuthorFrag on Author {\n    id\n    firstName\n    lastName\n    middleName\n    __typename\n  }\n`;\n\nexport default authorFrag;\n","import gql from \"graphql-tag\";\n\nexport const tagFrag = gql`\n  fragment TagFrag on Tag {\n    id\n    text\n    question\n    __typename\n  }\n`;\n\nexport default tagFrag;\n","import { Socket, Channel } from \"phoenix\";\nimport { logger } from \"./utils\";\nimport { getToken } from \"./state\";\nimport getBackendUrls from \"./get-backend-urls\";\nimport { AllQueries } from \"./graphql/gen.types\";\n\nenum CHANNEL {\n  \"DATA_PLAIN\" = \"data:pxy\",\n  \"DATA_AUTH\" = \"data:pxz\"\n}\n\nenum ChannelTopic {\n  \"GRAPHQL_PLAIN\" = \"graphql:pxy\",\n  \"GRAPHQL_AUTH\" = \"graphql:pxz\"\n}\n\nlet socket: Socket;\n\nexport const defineSocket = () => {\n  const appSocket = {\n    sendDataAuth,\n    connect\n  };\n\n  if (socket) {\n    return appSocket;\n  }\n\n  let socketDisconnectedCount = 0;\n  let dataAuthChannel: Channel;\n  // let initialDataSynced = false\n\n  function connect(token = getToken(), payload?: ConnectionPayload) {\n    const params = token ? { params: { token } } : {};\n    socket = new Socket(getBackendUrls().websocketUrl, params);\n    socket.connect();\n\n    if (token) {\n      socket.onOpen(() => joinDataAuthChannel(payload));\n    }\n\n    socket.onError(() => {\n      dispatchDisconnected();\n    });\n  }\n\n  connect();\n\n  function sendDataAuth<TVariables, TData, TError = {}>(\n    query: string,\n    variables: TVariables,\n    ok: OnChannelMessage<TData>,\n    error: OnError<TError> = defaultError\n  ) {\n    return sendChannelMsg(dataAuthChannel, {\n      ok,\n      params: {\n        query,\n        variables\n      },\n      topic: ChannelTopic.GRAPHQL_AUTH,\n      error\n    });\n  }\n\n  function dispatchDisconnected() {\n    if (socketDisconnectedCount === 0) {\n      socketDisconnectedCount = 1;\n    }\n  }\n\n  function joinDataAuthChannel(payload?: ConnectionPayload) {\n    const params = payload\n      ? { query: payload.query, variables: payload.variables }\n      : {};\n\n    dataAuthChannel = socket.channel(CHANNEL.DATA_AUTH, params);\n\n    dataAuthChannel\n      .join()\n      .receive(\"ok\", message => {\n        socketDisconnectedCount = 0;\n\n        if (payload) {\n          payload.onData(message);\n        }\n\n        logger(\"log\", \"Data auth channel joined\", message);\n      })\n      .receive(\"error\", reason => {\n        dispatchDisconnected();\n        logger(\"error\", \"Data auth channel join error\", reason);\n      })\n      .receive(\"timeout\", () => {\n        dispatchDisconnected();\n        logger(\"warn\", \"Data auth channel join timeout\");\n      });\n  }\n\n  function sendChannelMsg<TData, B, C>(\n    channel: Channel,\n    {\n      topic,\n      ok = defaultError,\n      error,\n      params,\n      onTimeout\n    }: ChannelMessageSend<TData, B, C>\n  ) {\n    if (!channel) {\n      logger(\"warn\", \"Sending to channel: - channel unavailable\", channel);\n      return;\n    }\n\n    logger(\"log\", \"Sending to channel topic:\", topic, \"params:\\n\", {\n      ok,\n      error,\n      params,\n      onTimeout\n    });\n\n    channel\n      .push(topic, params || {})\n      .receive(\"ok\", (data: TData) => {\n        logger(\n          \"log\",\n          \"socket send to topic\",\n          topic,\n          \"successful.\\nReceived data:\\n\",\n          data\n        );\n\n        ok(data);\n      })\n      .receive(\"error\", (reasons = {}) => {\n        logger(\"error\", \"socket send to topic\", topic, \"Errors:\\n\", reasons);\n\n        error(reasons);\n      })\n      .receive(\"timeout\", reasons => {\n        if (onTimeout) {\n          onTimeout(reasons);\n        }\n      });\n  }\n\n  function defaultError() {\n    return null;\n  }\n\n  return appSocket;\n};\n\nexport const AppSocket = defineSocket();\nexport default AppSocket;\n\ntype OnChannelMessage<T> = (msg: T) => void;\ntype OnError<T> = (reason: T) => void;\n\ninterface ChannelMessage<TData, TParams, TError = {}, TTimeout = {}> {\n  params: TParams;\n\n  ok: OnChannelMessage<TData>;\n\n  error: OnError<TError>;\n\n  onTimeout?: (reason: TTimeout) => void;\n}\n\ntype ChannelMessageSend<\n  TData,\n  TParams,\n  TError = {},\n  TTimeout = {}\n> = ChannelMessage<TData, TParams, TError, TTimeout> & {\n  topic: ChannelTopic;\n};\n\ninterface ConnectionPayload<TVariables = {}> {\n  query: string;\n  variables: TVariables;\n  onData: (data: { data: AllQueries }) => void;\n}\n","import gql from \"graphql-tag\";\nimport { projectFragment } from \"../graphql/project.fragment\";\nimport { ProjectFragment } from \"../graphql/gen.types\";\nimport { DataValue } from \"react-apollo\";\n\nexport const currentProjectLocalQuery = gql`\n  query CurrentProjectLocalQuery {\n    currentProject @client {\n      ...ProjectFragment\n    }\n  }\n\n  ${projectFragment}\n`;\n\nexport default currentProjectLocalQuery;\n\nexport interface CurrentProjectLocalData {\n  currentProject?: ProjectFragment | null;\n}\n\nexport type CurrProjLocalGqlProps = DataValue<CurrentProjectLocalData>;\n","import gql from \"graphql-tag\";\n\nimport tagFrag from \"./tag-mini.fragment\";\n\nexport const tagMinimalQuery = gql`\n  query TagsMinimal {\n    tags {\n      ...TagFrag\n    }\n  }\n\n  ${tagFrag}\n`;\n\nexport default tagMinimalQuery;\n","import gql from \"graphql-tag\";\n\nimport { sourceFullFrag } from \"./source-full.fragment\";\n\nexport const sources1Query = gql`\n  query Sources1Query($source: GetSourcesInput!) {\n    sources(source: $source) {\n      ...SourceFullFrag\n    }\n  }\n\n  ${sourceFullFrag}\n`;\n\nexport default sources1Query;\n","import gql from \"graphql-tag\";\nimport { graphql } from \"react-apollo\";\nimport { MutationFn } from \"react-apollo\";\n\nimport { UserFragment } from \"./../graphql/gen.types\";\nimport { userFragment } from \"../graphql/user.fragment\";\n\nexport const userLocalMutation = gql`\n  mutation UserLocalMutation($user: LocalUserInput!) {\n    user(user: $user) @client {\n      ...UserFragment\n    }\n  }\n\n  ${userFragment}\n`;\n\nexport default userLocalMutation;\n\nexport interface Variable {\n  user: UserFragment | null;\n}\n\ntype Fn = MutationFn<Variable, Variable>;\n\nexport interface UserLocalMutationProps {\n  updateLocalUser: Fn;\n}\n\nexport const userLocalMutationGql = graphql<\n  {},\n  Variable,\n  Variable,\n  UserLocalMutationProps\n>(userLocalMutation, {\n  props: props => {\n    const mutate = props.mutate as Fn;\n\n    return {\n      updateLocalUser: mutate\n    };\n  }\n});\n","import gql from \"graphql-tag\";\n\nimport { authorFrag } from \"../graphql/author.fragment\";\nimport { sourceTypeFrag } from \"../graphql/source-type.fragment\";\n\nexport const sourceForDisplayFrag = gql`\n  fragment SourceForDisplayFrag on Source {\n    id\n    year\n    topic\n    publication\n    url\n    insertedAt\n    updatedAt\n    __typename\n\n    authors {\n      ...AuthorFrag\n    }\n\n    sourceType {\n      ...SourceTypeFrag\n    }\n  }\n\n  ${authorFrag}\n  ${sourceTypeFrag}\n`;\n\nexport default sourceForDisplayFrag;\n","import gql from \"graphql-tag\";\n\nimport sourceTypeFrag from \"./source-type.fragment\";\n\nexport const sourceTypesQuery = gql`\n  query SourceTypes {\n    sourceTypes {\n      ...SourceTypeFrag\n    }\n  }\n\n  ${sourceTypeFrag}\n`;\n\nexport default sourceTypesQuery;\n","import gql from \"graphql-tag\";\n\nimport { authorFrag } from \"./author.fragment\";\n\nexport const authorsQuery = gql`\n  query GetAllAuthors($author: GetAuthorsInput!) {\n    authors(author: $author) {\n      ...AuthorFrag\n    }\n  }\n\n  ${authorFrag}\n`;\n\nexport default authorsQuery;\n","import ApolloClient from \"apollo-client\";\n\nimport { sourceFullFrag } from \"../graphql/source-full.fragment\";\nimport { tagFrag } from \"../graphql/tag-mini.fragment\";\nimport { sourceTypeFrag } from \"../graphql/source-type.fragment\";\nimport gql from \"graphql-tag\";\nimport socket from \"../socket\";\nimport {\n  ProjectFragment,\n  AllQueries,\n  TagFrag,\n  SourceTypeFrag\n} from \"../graphql/gen.types\";\nimport TAGS_MINI_QUERY from \"../graphql/tags-mini.query\";\nimport SOURCES_QUERY from \"../graphql/sources-1.query\";\nimport SOURCE_TYPES_QUERY from \"../graphql/source-types.query\";\nimport AUTHORS_QUERY from \"../graphql/authors.query\";\nimport PROJECTS_QUERY from \"../graphql/projects.query\";\n\nconst AUTHORS_PROJECT_INPUT_KEY = \"authorProject\";\n\nexport const connectAndLoad = (\n  projects: Array<null | ProjectFragment> | null,\n  client: ApolloClient<{}>,\n  jwt: string\n) => {\n  if (!projects) {\n    return;\n  }\n\n  if (!projects.length) {\n    return;\n  }\n\n  client.writeQuery({\n    query: PROJECTS_QUERY,\n    data: { projects }\n  });\n\n  const sourcesProjVariables = {};\n  const authorsProjectVariables = {};\n\n  const projectIds = projects.map(p => {\n    if (!p) {\n      return \"\";\n    }\n\n    const { id: projectId } = p;\n\n    sourcesProjVariables[`source${projectId}`] = { projectId };\n\n    authorsProjectVariables[`${AUTHORS_PROJECT_INPUT_KEY}${projectId}`] = {\n      projectId\n    };\n\n    return projectId;\n  });\n\n  const projectsLen = projectIds.length;\n\n  const authorProject = makeAuthorsProjectsQuery(projectsLen);\n  const sourcesProjects = makeSourcesProjectsQuery(projectsLen);\n  const allInputs = [...sourcesProjects.inputs, ...authorProject.inputs].join(\n    \",\"\n  );\n\n  const query = gql`\n      query AllQueries(${allInputs}) {\n        ${sourcesProjects.queryStr}\n\n        ${authorProject.queryStr}\n\n        tags: tags {\n          ...TagFrag\n        }\n\n        sourceTypes {\n          ...SourceTypeFrag\n        }\n\n      }\n\n      ${sourceTypeFrag}\n      ${sourceFullFrag}\n      ${tagFrag} `;\n\n  socket.connect(\n    jwt,\n    {\n      query: query.loc.source.body,\n      variables: { ...sourcesProjVariables, ...authorsProjectVariables },\n      onData: onLoaded\n    }\n  );\n\n  async function saveTags(tags: Array<TagFrag | null> | null) {\n    if (!tags) {\n      return;\n    }\n\n    client.writeQuery({ query: TAGS_MINI_QUERY, data: { tags } });\n  }\n\n  async function saveSourceTypes(\n    sourceTypes: Array<SourceTypeFrag | null> | null\n  ) {\n    if (!sourceTypes) {\n      return;\n    }\n\n    client.writeQuery({\n      query: SOURCE_TYPES_QUERY,\n      data: { sourceTypes }\n    });\n  }\n\n  async function saveSources(data: AllQueries) {\n    projectIds.forEach(id => {\n      const sid = toSourceId(id);\n      const sources = data[sid];\n\n      if (!sources) {\n        return;\n      }\n\n      client.writeQuery({\n        query: SOURCES_QUERY,\n        variables: {\n          source: {\n            projectId: id\n          }\n        },\n        data: { sources }\n      });\n    });\n  }\n\n  async function saveProjectAuthors(data: AllQueries) {\n    projectIds.forEach(id => {\n      const authors = data[`${AUTHORS_PROJECT_INPUT_KEY}${id}`];\n\n      if (!authors) {\n        return;\n      }\n\n      client.writeQuery({\n        query: AUTHORS_QUERY,\n        variables: {\n          author: {\n            projectId: id\n          }\n        },\n        data: { authors }\n      });\n    });\n  }\n\n  function onLoaded({ data }: { data: AllQueries }) {\n    saveTags(data.tags);\n    saveSources(data);\n    saveSourceTypes(data.sourceTypes);\n    saveProjectAuthors(data);\n  }\n\n  function toSourceId(id: string) {\n    return `source${id}`;\n  }\n\n  function makeAuthorsProjectsQuery(len: number) {\n    let queryStr = \"\";\n    const inputs: string[] = [];\n\n    if (!len) {\n      return {\n        queryStr,\n        inputs\n      };\n    }\n\n    projectIds.forEach(id => {\n      const input = `${AUTHORS_PROJECT_INPUT_KEY}${id}`;\n      inputs.push(`$${input}: GetAuthorsInput`);\n\n      queryStr += `${input}: authors(author: $${input}) {\n        ...AuthorFrag\n      }\\n`;\n    });\n\n    return {\n      queryStr,\n      inputs\n    };\n  }\n\n  function makeSourcesProjectsQuery(len: number) {\n    let queryStr = \"\";\n    const inputs: string[] = [];\n\n    if (!len) {\n      return {\n        queryStr,\n        inputs\n      };\n    }\n\n    projectIds.forEach(id => {\n      const input = `${toSourceId(id)}`;\n      inputs.push(`$${input}: GetSourcesInput`);\n\n      queryStr += `${input}: sources(source: $${input}) {\n        ...SourceFullFrag\n      }\\n`;\n    });\n\n    return {\n      queryStr,\n      inputs\n    };\n  }\n};\n\nexport default connectAndLoad;\n","import gql from \"graphql-tag\";\n\nimport { projectFragment } from \"./project.fragment\";\n\nexport const projectsQuery = gql`\n  query ProjectsQuery {\n    projects {\n      ...ProjectFragment\n    }\n  }\n\n  ${projectFragment}\n`;\n\nexport default projectsQuery;\n","import { SimpleStyle } from \"jss/css\";\n\nexport const POSITION_RELATIVE = \"relative\" as \"relative\";\nexport const POSITION_ABSOLUTE = \"absolute\" as \"absolute\";\nexport const FLEX_WRAP_WRAP = \"wrap\" as \"wrap\";\nexport const BORDER_COLLAPSE_SEPARATE = \"separate\" as \"separate\";\nexport const FLEX_DIRECTION_COLUMN = \"column\" as \"column\";\nexport const OVERFLOW_X_HIDDEN = \"hidden\" as \"hidden\";\nexport const OVERFLOW_Y_AUTO = \"auto\" as \"auto\";\nexport const TOKEN_KEY = \"token\";\nexport const CURRENT_PROJECT_KEY = \"current-project\";\n\nexport type SimpleCss = Record<string, SimpleStyle>;\n\nexport const ROOT_CONTAINER_STYLE = {\n  height: \"100%\",\n  display: \"flex\",\n  flexDirection: FLEX_DIRECTION_COLUMN,\n  flex: 1\n};\n\nexport enum MenuItemNames {\n  HOME = \"home\",\n  NEW_TAG = \"newTag\",\n  NEW_SOURCE = \"newSource\",\n  TAG_LIST = \"tagList\",\n  SOURCE_LIST = \"sourceList\",\n  NEW_AUTHOR = \"newAuthor\",\n  NEW_SOURCE_TYPE = \"newSourceType\"\n}\n","import gql from \"graphql-tag\";\n\nimport { userFragment } from \"./user.fragment\";\nimport { projectFragment } from \"./project.fragment\";\n\nexport const refreshUserQuery = gql`\n  query RefreshUserQuery($refresh: RefreshInput!) {\n    refresh(refresh: $refresh) {\n      ...UserFragment\n      projects {\n        ...ProjectFragment\n      }\n    }\n  }\n  ${projectFragment}\n  ${userFragment}\n`;\n\nexport default refreshUserQuery;\n","import React from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { LOGIN_URL, PROJECTS_URL } from \"../../../routes/util\";\n\nimport { Props } from \"./refresh\";\nimport Loading from \"../../../components/Loading\";\n\nexport class Refresh extends React.Component<Props, {}> {\n  render() {\n    const { loading, refresh: user, currentProject, error } = this.props;\n    if (loading && !user) {\n      return <Loading />;\n    }\n\n    const { component: Component, ...rest } = this.props.componentProps;\n\n    if (error && !error.message.includes(\"Network\")) {\n      return <Redirect to={LOGIN_URL} />;\n    }\n\n    if (\n      !currentProject &&\n      (rest.location && rest.location.pathname) !== PROJECTS_URL\n    ) {\n      return <Redirect to={PROJECTS_URL} />;\n    }\n\n    return <Component {...rest} />;\n  }\n}\n\nexport default Refresh;\n","import { graphql, compose, withApollo, DataValue } from \"react-apollo\";\n\nimport REFRESH_USER_QUERY from \"../../../graphql/refresh-user.query\";\nimport {\n  RefreshUserQuery,\n  RefreshUserQueryVariables\n} from \"../../../graphql/gen.types\";\nimport { userLocalMutationGql } from \"../../../state/user.local.mutation\";\nimport { OwnProps } from \"./refresh\";\nimport { Refresh } from \"./component\";\nimport connectAndLoad from \"../../../state/initial-data\";\n\nconst refreshUserGql = graphql<\n  OwnProps,\n  RefreshUserQuery,\n  RefreshUserQueryVariables,\n  DataValue<RefreshUserQuery, RefreshUserQueryVariables> | undefined\n>(REFRESH_USER_QUERY, {\n  props: ({ data, ownProps }) => {\n    if (!data) {\n      return data;\n    }\n\n    const { refresh } = data;\n\n    if (!refresh) {\n      return data;\n    }\n\n    const { projects, jwt } = refresh;\n    const { client, updateLocalUser } = ownProps;\n\n    connectAndLoad(projects, client, jwt);\n\n    updateLocalUser({\n      variables: { user: refresh }\n    });\n\n    return { ...data, refresh };\n  },\n\n  options: ({ jwt }) => ({\n    variables: {\n      refresh: { jwt }\n    }\n  })\n});\n\nexport default compose(\n  withApollo,\n  userLocalMutationGql,\n  refreshUserGql\n)(Refresh);\n","import * as React from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { RouteProps } from \"react-router-dom\";\nimport { Route } from \"react-router-dom\";\n\nimport Refresh from \"./../Refresh\";\nimport { Props } from \"./auth-required\";\nimport { LOGIN_URL, PROJECTS_URL } from \"./../../../routes/util\";\n\nexport const AuthRequired = ({\n  component: AuthComponent,\n  user,\n  staleToken,\n  currentProject,\n  ...rest\n}: Props) => {\n  const data = {\n    user,\n    currentProject,\n    ...rest\n  };\n\n  const render = (childProps: RouteProps) => {\n    if (user) {\n      if (!currentProject && rest.path !== PROJECTS_URL) {\n        return <Redirect to={PROJECTS_URL} />;\n      }\n\n      return <AuthComponent {...data} {...childProps} />;\n    }\n\n    if (staleToken) {\n      return (\n        <Refresh\n          componentProps={{ component: AuthComponent, ...childProps }}\n          jwt={staleToken}\n          currentProject={currentProject}\n        />\n      );\n    }\n\n    return <Redirect to={LOGIN_URL} />;\n  };\n\n  return <Route {...data} render={render} />;\n};\n\nexport default AuthRequired;\n","import { graphql } from \"react-apollo\";\nimport { compose } from \"react-apollo\";\n\nimport AUTH_USER_LOCAL_QUERY, {\n  UserLocalGqlData\n} from \"../../../state/auth-user.local.query\";\nimport CURRENT_PROJECT_QUERY from \"../../../state/project.local.query\";\nimport { CurrentProjectLocalData } from \"../../../state/project.local.query\";\nimport { LocalUserGqlProps } from \"./auth-required\";\nimport { OwnProps } from \"./auth-required\";\nimport { CurrentProjectLocalGqlProps } from \"./auth-required\";\nimport { AuthRequired } from \"./component\";\n\nconst authUserLocalGraphQl = graphql<\n  OwnProps,\n  UserLocalGqlData,\n  {},\n  LocalUserGqlProps\n>(AUTH_USER_LOCAL_QUERY, {\n  props: ({ data }) => {\n    return data;\n  }\n});\n\nconst currentProjectLocalGql = graphql<\n  OwnProps,\n  CurrentProjectLocalData,\n  {},\n  CurrentProjectLocalGqlProps\n>(CURRENT_PROJECT_QUERY, {\n  props: ({ data }) => {\n    return data;\n  }\n});\n\nexport default compose(\n  authUserLocalGraphQl,\n  currentProjectLocalGql\n)(AuthRequired);\n","import * as React from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { Switch } from \"react-router-dom\";\nimport { Route } from \"react-router-dom\";\nimport { ApolloProvider } from \"react-apollo\";\nimport update from \"immutability-helper\";\n\nimport { client, persistCache } from \"../../apollo-setup\";\nimport {\n  ROOT_URL,\n  PROJECTS_URL,\n  TAG_URL,\n  SOURCE_URL,\n  SEARCH_QUOTES_URL,\n  QUOTE_URL,\n  AUTHOR_ROUTE_URL,\n  USER_REG_URL,\n  LOGIN_URL\n} from \"./../../routes/util\";\nimport Loading from \"./../../components/Loading\";\nimport AuthRequired from \"./AuthRequired\";\nimport {\n  AppSidebarContext,\n  State,\n  initialState,\n  mediaQueries,\n  MediaQueryKey\n} from \"./app.utils\";\nimport { logger } from \"../../utils\";\n\n// tslint:disable-next-line:no-any\nconst ReactLazy = React as any;\nconst TagDetail = ReactLazy.lazy(() => import(\"./../../routes/TagDetail\"));\nconst Source = ReactLazy.lazy(() => import(\"./../../routes/Source\"));\nconst NewQuote = ReactLazy.lazy(() => import(\"./../../routes/NewQuote\"));\nconst Quote = ReactLazy.lazy(() => import(\"./../../routes/Quote\"));\nconst AuthorRoute = ReactLazy.lazy(() => import(\"./../../routes/Author\"));\nconst LoginRoute = ReactLazy.lazy(() => import(\"./../../routes/Login\"));\nconst ProjectsRoute = ReactLazy.lazy(() => import(\"./../../routes/Projects\"));\n\nconst SearchQuotes = ReactLazy.lazy(() =>\n  import(\"./../../routes/SearchQuotes\")\n);\n\nconst UserRegRoute = ReactLazy.lazy(() =>\n  import(\"./../../routes/Registration\")\n);\n\nexport class App extends React.Component<{}, State> {\n  state: State = initialState;\n  mediaListeners: Array<() => void> = [];\n\n  async componentDidMount() {\n    try {\n      await persistCache();\n    } catch (error) {\n      logger(\"error\", \"Error restoring Apollo cache\", error);\n    }\n\n    this.setState({ cacheLoaded: true });\n    this.setUpMediaListeners();\n  }\n\n  componentWillUnmount() {\n    this.tearDownMediaListeners();\n  }\n\n  render() {\n    const { cacheLoaded } = this.state;\n\n    if (!cacheLoaded) {\n      return <Loading />;\n    }\n\n    const { showSidebar, mediaQueries: mQueries } = this.state;\n\n    return (\n      <ReactLazy.Suspense fallback={<Loading />}>\n        <ApolloProvider client={client}>\n          <AppSidebarContext.Provider\n            value={{\n              showSidebar,\n              onShowClicked: this.toggleSidebar,\n              onHide: this.handleSidebarHide,\n              minWidth600: mQueries[MediaQueryKey.SCREEN_MIN_WIDTH_600]\n            }}\n          >\n            <BrowserRouter>\n              <Switch>\n                <Route\n                  exact={true}\n                  path={USER_REG_URL}\n                  render={routeProps => <UserRegRoute {...routeProps} />}\n                />\n\n                <Route\n                  exact={true}\n                  path={LOGIN_URL}\n                  render={routeProps => <LoginRoute {...routeProps} />}\n                />\n\n                <AuthRequired\n                  exact={true}\n                  path={SOURCE_URL}\n                  component={Source}\n                />\n\n                <AuthRequired exact={true} path={QUOTE_URL} component={Quote} />\n\n                <AuthRequired\n                  exact={true}\n                  path={AUTHOR_ROUTE_URL}\n                  component={AuthorRoute}\n                />\n\n                <AuthRequired\n                  exact={true}\n                  path={PROJECTS_URL}\n                  component={ProjectsRoute}\n                />\n\n                <AuthRequired\n                  exact={true}\n                  path={SEARCH_QUOTES_URL}\n                  component={SearchQuotes}\n                />\n\n                <AuthRequired\n                  exact={true}\n                  path={TAG_URL}\n                  component={TagDetail}\n                />\n\n                <AuthRequired\n                  exact={true}\n                  path={ROOT_URL}\n                  component={NewQuote}\n                />\n\n                <Route render={routeProps => <LoginRoute {...routeProps} />} />\n              </Switch>\n            </BrowserRouter>\n          </AppSidebarContext.Provider>\n        </ApolloProvider>\n      </ReactLazy.Suspense>\n    );\n  }\n\n  private toggleSidebar = () => {\n    const { showSidebar } = this.state;\n    this.setState({ showSidebar: !showSidebar });\n  };\n\n  private handleSidebarHide = () => this.setState({ showSidebar: false });\n\n  private tearDownMediaListeners = () => this.mediaListeners.forEach(m => m());\n\n  private setUpMediaListeners = () => {\n    const queries = Object.values(mediaQueries);\n    // tslint:disable-next-line:no-any\n    const handleMediaQueryChange = this.handleMediaQueryChange as any;\n\n    for (let index = 0; index < queries.length; index++) {\n      const m = window.matchMedia(queries[index]) as MediaQueryList;\n      m.addListener(handleMediaQueryChange);\n      handleMediaQueryChange(m);\n      this.mediaListeners[index] = () =>\n        m.removeListener(handleMediaQueryChange);\n    }\n  };\n\n  private handleMediaQueryChange = (\n    mql: MediaQueryListEvent | MediaQueryList\n  ) => {\n    const { matches, media } = mql;\n    const acc1 = {} as { [k in MediaQueryKey]: { $set: boolean } };\n\n    const updates = Object.entries(mediaQueries).reduce((acc2, [k, v]) => {\n      const isMatchedMedia = v === media;\n\n      if (isMatchedMedia && k === MediaQueryKey.SCREEN_MIN_WIDTH_600) {\n        this.setState({ showSidebar: matches });\n      }\n\n      acc2[k] = { $set: isMatchedMedia ? matches : false };\n      return acc2;\n    }, acc1);\n\n    this.setState(s =>\n      update(s, {\n        mediaQueries: updates\n      })\n    );\n  };\n}\n\nexport default App;\n","import { App } from \"./container\";\n\nexport default App;\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://goo.gl/SC7cgQ\"\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === \"installed\") {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                // console.log(\"New content is available; please refresh.\");\n                showRefreshUI();\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log(\"Content is cached for offline use.\");\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\")!.indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nfunction refreshEvent(e: MouseEvent) {\n  // tslint:disable-next-line:no-any\n  const currentTarget = e.currentTarget as any;\n  if (currentTarget) {\n    currentTarget.removeEventListener(\"click\", refreshEvent, false);\n    // document.body.removeChild(c  urrentTarget);\n  }\n\n  window.location.reload();\n}\n\nfunction showRefreshUI() {\n  const div = document.createElement(\"div\");\n  div.classList.add(\"ui\", \"inverted\", \"menu\");\n  const textNode = document.createTextNode(\n    \"New content is available; please click to refresh.\"\n  );\n  div.appendChild(textNode);\n  div.style.cssText = `\n  border: 1px solid #07526f;\n  padding: 10px;\n  border-radius: 3px;\n  color: #ffffffe6;\n  background-color: #5faac7;\n  `;\n\n  const parent = document.createElement(\"div\");\n  parent.style.cssText = `\n  cursor: pointer;\n  height: 100%;\n  width: 100%;\n  position: absolute;\n  top: 0;\n  left: 0;\n  opacity: 1;\n  background: #fdfdfdc2;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  `;\n  parent.appendChild(div);\n  document.body.appendChild(parent);\n  parent.addEventListener(\"click\", refreshEvent, false);\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport \"semantic-ui-css-offline\";\nimport \"react-select/dist/react-select.css\";\n\nimport App from \"./containers/App\";\nimport \"./index.scss\";\nimport \"./socket\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\") as HTMLElement);\nregisterServiceWorker();\n","import gql from \"graphql-tag\";\n\nexport const userFragment = gql`\n  fragment UserFragment on User {\n    id\n    name\n    email\n    jwt\n  }\n`;\n\nexport default userFragment;\n","import { withClientState } from \"apollo-link-state\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\n\nimport { UserFragment } from \"./../graphql/gen.types\";\nimport { ProjectFragment } from \"./../graphql/gen.types\";\nimport { TOKEN_KEY } from \"./../constants\";\nimport { CURRENT_PROJECT_KEY } from \"./../constants\";\nimport { State as SearchComponentState } from \"../components/SearchComponent/search-component\";\nimport USER_QUERY, { UserLocalGqlData } from \"./auth-user.local.query\";\nimport { Variable as UserMutationVar } from \"./user.local.mutation\";\nimport { resetClientAndPersistor } from \"../apollo-setup\";\n\ntype ClientStateFn<TVariables> = (\n  fieldName: string,\n  variables: TVariables,\n  context: { cache: InMemoryCache }\n) => void;\n\nconst updateNetworkStatus: ClientStateFn<{\n  isConnected: boolean;\n}> = (_, { isConnected }, { cache }) => {\n  const data = {\n    networkStatus: {\n      __typename: \"NetworkStatus\",\n      isConnected\n    }\n  };\n  cache.writeData({ data });\n  return null;\n};\n\nconst userMutation: ClientStateFn<UserMutationVar> = async (\n  _,\n  { user },\n  { cache }\n) => {\n  if (user) {\n    cache.writeData({ data: { user, staleToken: null, loggedOutUser: null } });\n    storeToken(user.jwt);\n\n    return user;\n  }\n  // MEANS WE HAVE LOGGED OUT. we store the current user as `loggedOutUser`\n  // so we can pre-fill the sign in form with e.g. user email\n\n  const { user: loggedOutUser } = {\n    ...(cache.readQuery<UserLocalGqlData>({ query: USER_QUERY }) || {\n      user: null\n    })\n  };\n\n  const data = {\n    user: null,\n    staleToken: null,\n    currentProject: null,\n    searchComponentState: null\n  } as {\n    loggedOutUser?: UserFragment | null;\n  };\n\n  if (loggedOutUser) {\n    await resetClientAndPersistor();\n    data.loggedOutUser = loggedOutUser;\n  }\n\n  await cache.writeData({\n    data\n  });\n  clearToken();\n  clearProject();\n\n  return loggedOutUser;\n};\n\nconst currentProjectMutation: ClientStateFn<{\n  currentProject: ProjectFragment;\n}> = (_, { currentProject }, { cache }) => {\n  const data = { currentProject };\n  cache.writeData({ data });\n\n  storeProject(currentProject);\n\n  return null;\n};\n\nconst searchComponentStateMutation: ClientStateFn<{\n  searchComponentState: SearchComponentState;\n}> = (_, { searchComponentState: d }, { cache }) => {\n  const toSave = {\n    searchText: d.searchText || \"\",\n    searchLoading: d.searchLoading || false,\n    result: d.result || null,\n    searchError: d.searchError || null,\n    __typename: \"SearchComponentState\"\n  };\n\n  const data = {\n    searchComponentState: toSave\n  };\n\n  cache.writeData({ data });\n\n  return null;\n};\n\nexport const initState = (cache: InMemoryCache) => {\n  return withClientState({\n    cache,\n    resolvers: {\n      Mutation: {\n        updateNetworkStatus,\n        user: userMutation,\n        currentProject: currentProjectMutation,\n        searchComponentState: searchComponentStateMutation\n      }\n    },\n    defaults: {\n      staleToken: getToken(),\n      user: null,\n      currentProject: getProject(),\n      searchComponentState: null,\n      loggedOutUser: null\n    }\n  });\n};\n\nexport const getToken = (): string | null =>\n  localStorage.getItem(TOKEN_KEY) || null;\n\nconst storeToken = (token: string) => localStorage.setItem(TOKEN_KEY, token);\n\nconst clearToken = () => localStorage.removeItem(TOKEN_KEY);\n\nconst getProject = (): ProjectFragment | null => {\n  const project = localStorage.getItem(CURRENT_PROJECT_KEY);\n  return project ? JSON.parse(project) : null;\n};\n\nconst storeProject = async (project: ProjectFragment) =>\n  localStorage.setItem(CURRENT_PROJECT_KEY, JSON.stringify(project));\n\nconst clearProject = () => localStorage.removeItem(CURRENT_PROJECT_KEY);\n","import * as React from \"react\";\nimport { Dimmer } from \"semantic-ui-react\";\nimport { Loader } from \"semantic-ui-react\";\n\nimport \"./loading.scss\";\n\nexport const Loading = () => (\n  <Dimmer inverted={true} className=\"loading-state\" active={true}>\n    <Loader size=\"medium\">Loading..</Loader>\n  </Dimmer>\n);\n\nexport default Loading;\n","import { Loading } from \"./component\";\n\nexport default Loading;\n","import { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { ApolloClient } from \"apollo-client\";\nimport { ApolloLink, Operation } from \"apollo-link\";\nimport { onError } from \"apollo-link-error\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { CachePersistor } from \"apollo-cache-persist\";\n\nimport { initState } from \"./state\";\nimport { getToken } from \"./state\";\nimport getBackendUrls from \"./get-backend-urls\";\n\nconst HTTP_URL = getBackendUrls().apiUrl;\n\nlet httpLink;\nhttpLink = new HttpLink({ uri: HTTP_URL }) as ApolloLink;\nhttpLink = middlewareAuthLink().concat(httpLink);\nhttpLink = middlewareErrorLink().concat(httpLink);\n\nif (process.env.NODE_ENV !== \"production\") {\n  httpLink = middlewareLoggerLink(httpLink);\n}\n\nconst cache = new InMemoryCache();\n\nexport const client = new ApolloClient({\n  cache,\n  link: ApolloLink.from([initState(cache), httpLink])\n});\n\nexport default client;\nconst storage = localStorage as any;\n\nconst persistor = new CachePersistor({\n  cache,\n  storage,\n  key: \"thysis-apollo-cache-persist\"\n});\n\nexport async function persistCache() {\n  const SCHEMA_VERSION = \"3.1\"; // Must be a string.\n  const SCHEMA_VERSION_KEY = \"thysis-apollo-schema-version\";\n  const currentVersion = localStorage.getItem(SCHEMA_VERSION_KEY);\n\n  if (currentVersion === SCHEMA_VERSION) {\n    // If the current version matches the latest version,\n    // we're good to go and can restore the cache.\n    await persistor.restore();\n  } else {\n    // Otherwise, we'll want to purge the outdated persisted cache\n    // and mark ourselves as having updated to the latest version.\n    await persistor.purge();\n    localStorage.setItem(SCHEMA_VERSION_KEY, SCHEMA_VERSION);\n  }\n\n  return persistor;\n}\n\nexport const resetClientAndPersistor = async () => {\n  await persistor.pause(); // Pause automatic persistence.\n  await persistor.purge(); // Delete everything in the storage provider.\n  await client.clearStore();\n  await persistor.resume();\n};\n\n// HELPER FUNCTIONS\n\nfunction middlewareAuthLink() {\n  return new ApolloLink((operation, forward) => {\n    const token = getToken();\n\n    if (token) {\n      operation.setContext({\n        headers: {\n          authorization: `Bearer ${token}`\n        }\n      });\n    }\n\n    return forward ? forward(operation) : null;\n  });\n}\n\nconst getNow = () => {\n  const n = new Date();\n  return `${n.getHours()}:${n.getMinutes()}:${n.getSeconds()}`;\n};\n\nfunction middlewareLoggerLink(l: ApolloLink) {\n  const processOperation = (operation: Operation) => ({\n    query: operation.query.loc ? operation.query.loc.source.body : \"\",\n    variables: operation.variables\n  });\n\n  const logger = new ApolloLink((operation, forward) => {\n    const operationName = `Apollo operation: ${operation.operationName}`;\n\n    // tslint:disable-next-line:no-console\n    console.log(\n      \"\\n\\n\\n\",\n      getNow(),\n      `=============================${operationName}========================\\n`,\n      processOperation(operation),\n      `\\n=========================End ${operationName}=========================`\n    );\n\n    if (!forward) {\n      return null;\n    }\n\n    const fop = forward(operation);\n\n    if (fop.map) {\n      return fop.map(response => {\n        // tslint:disable-next-line:no-console\n        console.log(\n          \"\\n\\n\\n\",\n          getNow(),\n          `==============Received response from ${operationName}============\\n`,\n          response,\n          `\\n==========End Received response from ${operationName}=============`\n        );\n        return response;\n      });\n    }\n\n    return fop;\n  });\n\n  return logger.concat(l);\n}\n\nfunction middlewareErrorLink() {\n  return onError(({ graphQLErrors, networkError, response, operation }) => {\n    // tslint:disable-next-line:ban-types\n    const logError = (errorName: string, obj: Object) => {\n      if (process.env.NODE_ENV === \"production\") {\n        return;\n      }\n\n      const operationName = `[${errorName} error] from Apollo operation: ${\n        operation.operationName\n      }`;\n\n      // tslint:disable-next-line:no-console\n      console.error(\n        \"\\n\\n\\n\",\n        getNow(),\n        `============================${operationName}=======================\\n`,\n        obj,\n        `\\n====================End ${operationName}============================`\n      );\n    };\n\n    if (response) {\n      logError(\"Response\", response);\n    }\n\n    if (networkError) {\n      logError(\"Network\", networkError);\n    }\n  });\n}\n","import gql from \"graphql-tag\";\n\nimport { userFragment } from \"../graphql/user.fragment\";\nimport { UserFragment } from \"../graphql/gen.types\";\nimport { DataValue } from \"react-apollo\";\n\nexport const authUserLocalQuery = gql`\n  query UserLocalQuery {\n    user @client {\n      ...UserFragment\n    }\n\n    staleToken @client\n  }\n\n  ${userFragment}\n`;\n\nexport default authUserLocalQuery;\n\nexport interface UserLocalGqlData {\n  user: UserFragment;\n  staleToken: string | null;\n}\n\nexport type UserLocalGqlProps = DataValue<UserLocalGqlData>;\n","const URL_ROOT = \"/__api\";\n\nexport const getBackendUrls = () => {\n  const apiUrl = process.env.REACT_APP_API_URL;\n\n  if (!apiUrl) {\n    throw new Error('You must set the \"ELM_APP_MY_EXP_PHOENIX_API_URL\"');\n  }\n\n  let websocketUrl;\n\n  // if we are in production, we connect directly to the socket using relative uri\n  if (apiUrl === URL_ROOT) {\n    websocketUrl = \"/socket\";\n  } else {\n    const httpHostRegexExec = /https?/.exec(apiUrl);\n\n    if (!httpHostRegexExec) {\n      throw new Error(\"Invalid HTTP host in '\" + apiUrl + \"'\");\n    }\n\n    const httpHost = httpHostRegexExec[0];\n    const websocketHost = httpHost === \"https\" ? \"wss\" : \"ws\";\n\n    websocketUrl = apiUrl\n      .replace(httpHost, websocketHost)\n      .replace(URL_ROOT, \"/socket\");\n  }\n\n  return {\n    apiUrl,\n    websocketUrl\n  };\n};\n\nexport default getBackendUrls;\n"],"sourceRoot":""}