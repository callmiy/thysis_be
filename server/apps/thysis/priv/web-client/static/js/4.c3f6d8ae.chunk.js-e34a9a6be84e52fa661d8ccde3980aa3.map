{"version":3,"sources":["graphql/quote-from-tag.fragment.ts","utils/simple-error-styles.util.ts","components/QuoteItem/component.tsx","components/QuoteItem/index.ts","graphql/tag-with-quotes.fragment.ts","graphql/tag-with-quotes.query.ts","routes/TagDetail/styles.ts","routes/TagDetail/route.tsx","routes/TagDetail/index.ts"],"names":["quoteFromTagFrag","gql","_templateObject","_colors__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","__webpack_exports__","flex","display","justifyContent","alignItems","color","ERROR_COLOR","fontWeight","fontSize","QuoteItem","_React$Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","_this$props","props","id","text","date","source","react_default","a","createElement","List","Item","className","Content","Header","as","NavLink","to","makeQuoteURL","makeSourceURL","Description","React","Component","quote","index","component_QuoteItem","assign","tagQuotesFrag","tagFrag","tagQuoteQuery","tag_with_quotes_query_templateObject","jss","setup","preset","styles","tagDetailRoot","ROOT_CONTAINER_STYLE","tagDetailMain","overflowX","overflowY","flexDirection","padding","tagText","marginBottom","errorContainer","objectSpread","classes","createStyleSheet","attach","TagDetail","_getPrototypeOf2","_this","_len","length","args","Array","_key","call","concat","renderMain","data","tag","_data$tag","question","quotes","react","style","dividing","paddingLeft","fontStyle","divided","relaxed","map","renderQuote","setTitle","_this2","match","params","AppSidebar","components_Header","title","showSideBarTrigger","ops_types","query","TAG_QUOTE_QUERY","variables","_ref","loading","error","message","Dimmer","active","inverted","Loader","size"],"mappings":"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","file":"static/js/4.c3f6d8ae.chunk.js","sourcesContent":["import gql from \"graphql-tag\";\n\nexport const quoteFromTagFrag = gql`\n  fragment QuoteFromTagFrag on Quote {\n    id\n    text\n    date\n    source {\n      id\n      display\n    }\n  }\n`;\n\nexport default quoteFromTagFrag;\n","import { ERROR_COLOR } from \"./colors\";\n\nexport default {\n  flex: 1,\n  display: \"flex\",\n  justifyContent: \"center\",\n  alignItems: \"center\",\n  color: ERROR_COLOR,\n  fontWeight: 900,\n  fontSize: \"1.2em\"\n};\n","import React from \"react\";\nimport { List } from \"semantic-ui-react\";\nimport { NavLink } from \"react-router-dom\";\n\nimport \"./quote-item.scss\";\nimport { QuoteFromTagFrag } from \"../../graphql/gen.types\";\nimport { makeQuoteURL } from \"../../routes/util\";\nimport { makeSourceURL } from \"../../routes/util\";\n\ntype Props = QuoteFromTagFrag;\n\nexport class QuoteItem extends React.Component<Props> {\n  render() {\n    const { id, text, date, source } = this.props;\n    return (\n      <List.Item key={id} className=\"quote-item\">\n        <List.Content>\n          <List.Header\n            as={NavLink}\n            to={makeQuoteURL(id)}\n            className=\"quote-text\"\n          >\n            {text}\n          </List.Header>\n\n          {source && (\n            <NavLink to={makeSourceURL(source.id)} className=\"source-display\">\n              {source.display}\n            </NavLink>\n          )}\n\n          <List.Description className=\"quote-date\">{date}</List.Description>\n        </List.Content>\n      </List.Item>\n    );\n  }\n}\n\nexport default (quote: null | QuoteFromTagFrag, index: number) => {\n  if (!quote) {\n    return undefined;\n  }\n\n  return <QuoteItem key={quote.id} {...quote} />;\n};\n","import QuoteItem from \"./component\";\n\nexport default QuoteItem;\n","import gql from \"graphql-tag\";\n\nimport { tagFrag } from \"./tag-mini.fragment\";\nimport { quoteFromTagFrag } from \"./quote-from-tag.fragment\";\n\nexport const tagQuotesFrag = gql`\n  fragment TagQuotesFrag on Tag {\n    ...TagFrag\n    quotes {\n      ...QuoteFromTagFrag\n    }\n  }\n  ${tagFrag}\n  ${quoteFromTagFrag}\n`;\n\nexport default tagQuotesFrag;\n","import gql from \"graphql-tag\";\n\nimport { tagQuotesFrag } from \"./tag-with-quotes.fragment\";\n\nexport const tagQuoteQuery = gql`\n  query TagQuote($tag: GetTagInput!) {\n    tag(tag: $tag) {\n      ...TagQuotesFrag\n    }\n  }\n  ${tagQuotesFrag}\n`;\n\nexport default tagQuoteQuery;\n","import jss from \"jss\";\nimport preset from \"jss-preset-default\";\n\nimport { ROOT_CONTAINER_STYLE } from \"../../constants\";\nimport { SimpleCss } from \"../../constants\";\nimport errorContainer from \"../../utils/simple-error-styles.util\";\n\njss.setup(preset());\n\nexport const styles = {\n  tagDetailRoot: ROOT_CONTAINER_STYLE,\n\n  tagDetailMain: {\n    flex: 1,\n    overflowX: \"hidden\",\n    overflowY: \"auto\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    padding: \"0 5px 15px 10px\"\n  },\n\n  tagText: {\n    padding: \"3px 5px 10px 5px\",\n    marginBottom: 0\n  },\n\n  errorContainer: { ...errorContainer }\n} as SimpleCss;\n\nexport const { classes } = jss.createStyleSheet(styles).attach();\n","import * as React from \"react\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport { Header } from \"semantic-ui-react\";\nimport { Dimmer } from \"semantic-ui-react\";\nimport { Loader } from \"semantic-ui-react\";\nimport { List } from \"semantic-ui-react\";\n\nimport RootHeader from \"../../components/Header\";\nimport { TagQuoteQueryComponent } from \"../../graphql/ops.types\";\nimport TAG_QUOTE_QUERY from \"../../graphql/tag-with-quotes.query\";\nimport { TagQuote as TagQuoteQuery } from \"../../graphql/gen.types\";\nimport renderQuote from \"../../components/QuoteItem\";\nimport { setTitle } from \"../../routes/util\";\nimport { styles } from \"./styles\";\nimport { classes } from \"./styles\";\nimport AppSideBar from \"../../components/AppSidebar\";\n\ntype TagDetailProps = RouteComponentProps<{ id: string }>;\n\nexport class TagDetail extends React.Component<TagDetailProps> {\n  componentDidMount() {\n    setTitle(\"Tag\");\n  }\n\n  componentWillUnmount() {\n    setTitle();\n  }\n\n  render() {\n    const id = this.props.match.params.id;\n\n    return (\n      <AppSideBar>\n        <div className={`${classes.tagDetailRoot}`}>\n          <RootHeader title=\"Tag Detail\" showSideBarTrigger={true} />\n\n          <TagQuoteQueryComponent\n            query={TAG_QUOTE_QUERY}\n            variables={{ tag: { id } }}\n          >\n            {({ data, loading, error }) => {\n              if (error) {\n                return (\n                  <div\n                    className={`${classes.tagDetailMain} ${\n                      classes.errorContainer\n                    }`}\n                  >\n                    {error.message}\n                  </div>\n                );\n              }\n\n              if (loading) {\n                return (\n                  <Dimmer\n                    className={`${classes.tagDetailRoot}`}\n                    active={true}\n                    inverted={true}\n                  >\n                    <Loader size=\"mini\">Loading</Loader>\n                  </Dimmer>\n                );\n              }\n\n              return (\n                <div className={`${classes.tagDetailRoot}`}>\n                  {this.renderMain(data)}\n                </div>\n              );\n            }}\n          </TagQuoteQueryComponent>\n        </div>\n      </AppSideBar>\n    );\n  }\n\n  renderMain = (data: TagQuoteQuery | undefined) => {\n    if (!data || !data.tag) {\n      return undefined;\n    }\n\n    const { text, question, quotes } = data.tag;\n\n    return (\n      <div className={`${classes.tagDetailRoot}`}>\n        <Header style={styles.tagText} as=\"h3\" dividing={true}>\n          {text}\n          {question && (\n            <div\n              style={{\n                paddingLeft: \"10%\",\n                fontStyle: \"italic\",\n                fontWeight: 100,\n                fontSize: \"0.8em\"\n              }}\n            >\n              {question}\n            </div>\n          )}\n        </Header>\n\n        <div className={`${classes.tagDetailMain}`}>\n          <List divided={true} relaxed={true}>\n            {quotes && quotes.map(renderQuote)}\n          </List>\n        </div>\n      </div>\n    );\n  };\n}\n\nexport default TagDetail;\n","import TagDetail from \"./route\";\n\nexport default TagDetail;\n"],"sourceRoot":""}