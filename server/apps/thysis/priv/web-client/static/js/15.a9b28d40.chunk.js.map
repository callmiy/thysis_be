{"version":3,"sources":["graphql/create-project.mutation.ts","routes/Projects/projects.ts","routes/Projects/route.tsx","state/project.local.mutation.ts","routes/Projects/index.ts"],"names":["createProjectMutation","gql","_templateObject","projectFragment","initialState","form","title","SelectProject","_React$Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","renderForm","_this$props","props","loading","error","formError","react_default","a","createElement","Form","className","Field","control","Input","name","autoComplete","placeholder","autoFocus","onChange","onProjectInputChange","value","Icon","color","onClick","submit","undefined","resetForm","renderProjects","_this$props2","projects","Loading","message","List","divided","relaxed","map","renderProject","project","Item","key","id","Content","projectSelected","Header","Description","dateFormat","parseISO","insertedAt","currentProject","asyncToGenerator","regenerator_default","mark","_callee","_this$props3","history","updateLocalProject","wrap","_context","prev","next","variables","push","makeNewQuoteURL","stop","_callee2","result","data","_context2","createProject","sent","abrupt","e","_ref3","setState","s","update","$set","inherits","createClass","AppSidebar","showSideBarTrigger","React","Component","projectLocalMutation","project_local_mutation_templateObject","projectLocalMutationGql","graphql","mutate","projectsGql","PROJECTS_QUERY","createProjectGql","CREATE_PROJECT_MUTATION","userId","ownProps","user","client","_ref","newProject","readQuery","query","updatedData","$push","writeQuery","compose"],"mappings":"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","file":"static/js/15.a9b28d40.chunk.js","sourcesContent":["import gql from \"graphql-tag\";\nimport { MutationFn } from \"react-apollo\";\nimport { FetchResult } from \"react-apollo\";\n\nimport { projectFragment } from \"./project.fragment\";\nimport { CreateProjectMutation } from \"./gen.types\";\nimport { CreateProjectMutationVariables } from \"./gen.types\";\n\nexport const createProjectMutation = gql`\n  mutation CreateProjectMutation($project: CreateProjectInput!) {\n    project(project: $project) {\n      ...ProjectFragment\n    }\n  }\n\n  ${projectFragment}\n`;\n\nexport default createProjectMutation;\n\nexport type CreateProjectMutationFn = MutationFn<\n  CreateProjectMutation,\n  CreateProjectMutationVariables\n>;\n\nexport interface CreateProjectMutationProps {\n  createProject: (\n    title: string\n  ) => Promise<void | FetchResult<CreateProjectMutation>>;\n}\n","import { DataValue, WithApolloClient } from \"react-apollo\";\nimport { RouteComponentProps } from \"react-router-dom\";\n\nimport { ProjectsQuery, ProjectFragment } from \"../../graphql/gen.types\";\nimport { ProjectLocalMutationProps } from \"../../state/project.local.mutation\";\nimport { CreateProjectMutationProps } from \"../../graphql/create-project.mutation\";\nimport { UserLocalGqlData } from \"../../state/auth-user.local.query\";\n\nexport type OwnProps = WithApolloClient<{}> &\n  RouteComponentProps &\n  CreateProjectMutationProps &\n  ProjectLocalMutationProps &\n  UserLocalGqlData;\n\nexport type ProjectsGqlDataValue = DataValue<ProjectsQuery>;\n\nexport type Props = ProjectsGqlDataValue & OwnProps;\n\nexport interface State {\n  form: {\n    title: string;\n  };\n\n  currentProject?: ProjectFragment;\n}\n\nexport const initialState = {\n  form: {\n    title: \"\"\n  }\n};\n","import React from \"react\";\nimport { Input } from \"semantic-ui-react\";\nimport { Icon } from \"semantic-ui-react\";\nimport { Form } from \"semantic-ui-react\";\nimport { List } from \"semantic-ui-react\";\nimport update from \"immutability-helper\";\nimport dateFormat from \"date-fns/format\";\nimport parseISO from \"date-fns/parseISO\";\n\nimport \"./projects.scss\";\nimport Header from \"../../components/Header\";\nimport Loading from \"../../components/Loading\";\nimport { Props, State, initialState } from \"./projects\";\nimport { SemanticOnInputChangeFunc } from \"../../utils\";\nimport { ProjectFragment } from \"../../graphql/gen.types\";\nimport { makeNewQuoteURL } from \"../util\";\nimport AppSideBar from \"../../components/AppSidebar\";\n\nexport class SelectProject extends React.Component<Props, State> {\n  state: State = initialState;\n\n  render() {\n    return (\n      <AppSideBar>\n        <div className=\"select-project\">\n          <Header title=\"Select Project\" showSideBarTrigger={true} />\n\n          <div className=\"main\">\n            {this.renderForm()}\n            {this.renderProjects()}\n          </div>\n        </div>\n      </AppSideBar>\n    );\n  }\n\n  private renderForm = () => {\n    const { loading, error } = this.props;\n\n    if (loading || error) {\n      return undefined;\n    }\n\n    const { form } = this.state;\n    const formError = this.formError();\n\n    return (\n      <Form className=\"form\">\n        <div className=\"control\">\n          <Form.Field\n            control={Input}\n            className=\"input\"\n            name=\"title\"\n            autoComplete=\"off\"\n            placeholder=\"Project title\"\n            autoFocus={true}\n            onChange={this.onProjectInputChange}\n            value={this.state.form.title}\n            error={formError}\n          />\n\n          {form.title && !formError ? (\n            <Icon name=\"checkmark\" color=\"green\" onClick={this.submit} />\n          ) : (\n            undefined\n          )}\n\n          {form.title ? (\n            <Icon name=\"times\" color=\"red\" onClick={this.resetForm} />\n          ) : (\n            undefined\n          )}\n        </div>\n\n        {formError && <div className=\"message\">Too short</div>}\n      </Form>\n    );\n  };\n\n  private renderProjects = () => {\n    const { projects, loading, error } = this.props;\n\n    if (loading) {\n      return <Loading />;\n    }\n\n    if (error) {\n      return (\n        <div>\n          Unable to load projects\n          <div>{error.message}</div>\n        </div>\n      );\n    }\n\n    if (!projects || !projects.length) {\n      return (\n        <div className=\"no-project\">\n          You currently have no project. You may create one now.\n        </div>\n      );\n    }\n\n    return (\n      <div>\n        <div className=\"your-projects\">\n          <span className=\"label\">Projects</span>\n        </div>\n        <List divided={true} relaxed={true}>\n          {projects.map(this.renderProject)}\n        </List>\n      </div>\n    );\n  };\n\n  private renderProject = (project: null | ProjectFragment) => {\n    if (!project) {\n      return undefined;\n    }\n\n    return (\n      <List.Item key={project.id}>\n        <List.Content\n          className=\"project-row\"\n          onClick={this.projectSelected(project)}\n        >\n          <List.Header className=\"project-row__header\">\n            {project.title}\n          </List.Header>\n          <List.Description className=\"project-row__desc\">\n            Created: &nbsp; &nbsp;\n            {dateFormat(\n              parseISO(project.insertedAt),\n              \"eeee, M/MMM/yyyy HH:mm a\"\n            )}\n          </List.Description>\n        </List.Content>\n      </List.Item>\n    );\n  };\n\n  private projectSelected = (currentProject: ProjectFragment) => async () => {\n    const { history, updateLocalProject } = this.props;\n\n    await updateLocalProject({ variables: { currentProject } });\n    history.push(makeNewQuoteURL());\n  };\n\n  private submit = async () => {\n    const result = await this.props.createProject(this.state.form.title);\n    if (!result) {\n      return;\n    }\n\n    const { data } = result;\n\n    if (!data) {\n      return;\n    }\n\n    const { project } = data;\n\n    if (!project) {\n      return;\n    }\n\n    this.projectSelected(project)();\n  };\n\n  private onProjectInputChange: SemanticOnInputChangeFunc = (e, { value }) => {\n    this.setState(s =>\n      update(s, {\n        form: {\n          title: {\n            $set: value\n          }\n        }\n      })\n    );\n  };\n\n  private resetForm = () =>\n    this.setState(s =>\n      update(s, {\n        form: {\n          title: {\n            $set: \"\"\n          }\n        }\n      })\n    );\n\n  private formError = () => {\n    const {\n      form: { title }\n    } = this.state;\n    return title.length > 0 && title.length < 2;\n  };\n}\n\nexport default SelectProject;\n","import gql from \"graphql-tag\";\nimport { graphql } from \"react-apollo\";\nimport { MutationFn } from \"react-apollo\";\n\nimport { ProjectFragment } from \"../graphql/gen.types\";\n\nexport const projectLocalMutation = gql`\n  mutation ProjectLocalMutation($currentProject: LocalProjectInput!) {\n    currentProject(currentProject: $currentProject) @client\n  }\n`;\n\nexport default projectLocalMutation;\n\ninterface Variable {\n  currentProject: ProjectFragment | null;\n}\n\ntype Fn = MutationFn<void, Variable>;\n\nexport interface ProjectLocalMutationProps {\n  updateLocalProject: Fn;\n}\n\nexport const projectLocalMutationGql = graphql<\n  {},\n  void,\n  Variable,\n  ProjectLocalMutationProps\n>(projectLocalMutation, {\n  props: props => {\n    const mutate = props.mutate as Fn;\n\n    return {\n      updateLocalProject: mutate\n    };\n  }\n});\n","import { graphql, compose } from \"react-apollo\";\nimport update from \"immutability-helper\";\n\nimport PROJECTS_QUERY from \"../../graphql/projects.query\";\nimport { ProjectsQuery } from \"../../graphql/gen.types\";\nimport CREATE_PROJECT_MUTATION, {\n  CreateProjectMutationFn,\n  CreateProjectMutationProps\n} from \"../../graphql/create-project.mutation\";\nimport { CreateProjectMutation } from \"../../graphql/gen.types\";\nimport { CreateProjectMutationVariables } from \"../../graphql/gen.types\";\nimport { SelectProject } from \"./route\";\nimport { projectLocalMutationGql } from \"../../state/project.local.mutation\";\nimport { ProjectsGqlDataValue, OwnProps } from \"./projects\";\n\nconst projectsGql = graphql<\n  OwnProps,\n  ProjectsQuery,\n  {},\n  ProjectsGqlDataValue | undefined\n>(PROJECTS_QUERY, {\n  props: props => props.data\n});\n\nconst createProjectGql = graphql<\n  OwnProps,\n  CreateProjectMutation,\n  CreateProjectMutationVariables,\n  CreateProjectMutationProps\n>(CREATE_PROJECT_MUTATION, {\n  props: props => {\n    const mutate = props.mutate as CreateProjectMutationFn;\n\n    return {\n      createProject: (title: string) =>\n        mutate({\n          variables: {\n            project: {\n              title,\n              userId: props.ownProps.user.id\n            }\n          },\n\n          update(client, { data: newProject }) {\n            if (!newProject) {\n              return;\n            }\n\n            const project = newProject.project;\n\n            if (!project) {\n              return;\n            }\n\n            props.ownProps.updateLocalProject({\n              variables: { currentProject: project }\n            });\n\n            const data = client.readQuery({\n              query: PROJECTS_QUERY\n            }) as ProjectsQuery;\n\n            const updatedData = update(data, {\n              projects: {\n                $push: [project]\n              }\n            });\n\n            client.writeQuery({\n              query: PROJECTS_QUERY,\n              data: updatedData\n            });\n          }\n        })\n    };\n  }\n});\n\nexport default compose(\n  projectsGql,\n  projectLocalMutationGql,\n  createProjectGql\n)(SelectProject);\n"],"sourceRoot":""}