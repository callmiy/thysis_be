{"version":3,"sources":["routes/util.ts","socket.ts","state/project.local.query.ts","graphql/tags-mini.query.ts","graphql/sources-1.query.ts","state/user.local.mutation.ts","graphql/source-for-display.fragment.ts","graphql/source-types.query.ts","graphql/authors.query.ts","state/initial-data.ts","graphql/projects.query.ts","utils/index.ts","graphql/refresh-user.query.ts","containers/App/Refresh/component.tsx","containers/App/Refresh/index.ts","containers/App/AuthRequired/component.tsx","containers/App/AuthRequired/index.ts","containers/App/container.tsx","containers/App/index.ts","registerServiceWorker.ts","index.tsx","constants.ts","containers/App/app.utils.ts","graphql/user.fragment.ts","graphql/project.fragment.ts","graphql/source-type.fragment.ts","state/index.ts","components/Loading/component.tsx","components/Loading/index.ts","apollo-setup.ts","graphql/source-full.fragment.ts","state/auth-user.local.query.ts","graphql/author.fragment.ts","graphql/tag-mini.fragment.ts","get-backend-urls.ts"],"names":["__webpack_require__","d","__webpack_exports__","TAG_URL","makeTagURL","SOURCE_URL","makeSourceURL","QUOTE_URL","makeQuoteURL","AUTHOR_ROUTE_URL","makeAuthorRouteURL","ROOT_URL","makeNewQuoteURL","SEARCH_QUOTES_URL","USER_REG_URL","LOGIN_URL","PROJECTS_URL","setTitle","id","replace","titleEl","document","getElementById","title","innerText","concat","CHANNEL","ChannelTopic","socket","phoenix__WEBPACK_IMPORTED_MODULE_0__","_utils__WEBPACK_IMPORTED_MODULE_1__","_state__WEBPACK_IMPORTED_MODULE_2__","_get_backend_urls__WEBPACK_IMPORTED_MODULE_3__","AppSocket","appSocket","sendDataAuth","query","variables","ok","error","arguments","length","undefined","defaultError","channel","_ref","topic","_ref$ok","params","onTimeout","logger","push","receive","data","reasons","sendChannelMsg","dataAuthChannel","GRAPHQL_AUTH","connect","socketDisconnectedCount","token","getToken","payload","Socket","getBackendUrls","websocketUrl","onOpen","DATA_AUTH","join","message","onData","reason","dispatchDisconnected","joinDataAuthChannel","onError","defineSocket","currentProjectLocalQuery","gql","_templateObject","projectFragment","tagMinimalQuery","tagFrag","sources1Query","sourceFullFrag","userLocalMutation","userFragment","userLocalMutationGql","graphql","props","updateLocalUser","mutate","sourceForDisplayFrag","authorFrag","sourceTypeFrag","sourceTypesQuery","authorsQuery","AUTHORS_PROJECT_INPUT_KEY","connectAndLoad","projects","client","jwt","writeQuery","PROJECTS_QUERY","sourcesProjVariables","authorsProjectVariables","projectIds","map","p","projectId","projectsLen","authorProject","len","queryStr","inputs","forEach","input","makeAuthorsProjectsQuery","sourcesProjects","toSourceId","makeSourcesProjectsQuery","allInputs","Object","F_projects_thysis_client_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_4__","loc","source","body","F_projects_thysis_client_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_2__","_x","_saveTags","apply","this","saveTags","tags","_x3","_saveSources","saveSources","_x2","_saveSourceTypes","saveSourceTypes","sourceTypes","_x4","_saveProjectAuthors","saveProjectAuthors","F_projects_thysis_client_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","F_projects_thysis_client_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","mark","_callee","wrap","_context","prev","next","abrupt","TAGS_MINI_QUERY","stop","_callee2","_context2","SOURCE_TYPES_QUERY","_callee3","_context3","sid","sources","SOURCES_QUERY","_callee4","_context4","authors","AUTHORS_QUERY","author","projectsQuery","prefix","tag","process","refreshUserQuery","Refresh","_React$Component","classCallCheck","possibleConstructorReturn","getPrototypeOf","inherits","createClass","key","value","_this$props","loading","user","refresh","currentProject","react_default","createElement","Loading","_this$props$component","componentProps","Component","component","rest","objectWithoutProperties","includes","Redirect","to","location","pathname","React","refreshUserGql","REFRESH_USER_QUERY","ownProps","objectSpread","options","_ref2","compose","withApollo","AuthRequired","AuthComponent","staleToken","react","Route","assign","render","childProps","path","App_Refresh","authUserLocalGraphQl","AUTH_USER_LOCAL_QUERY","currentProjectLocalGql","CURRENT_PROJECT_QUERY","ReactLazy","TagDetail","lazy","Promise","all","e","then","bind","Source","NewQuote","Quote","AuthorRoute","LoginRoute","ProjectsRoute","SearchQuotes","UserRegRoute","App","_getPrototypeOf2","_this","_len","args","Array","_key","call","state","initialState","mediaListeners","toggleSidebar","showSidebar","setState","handleSidebarHide","tearDownMediaListeners","m","setUpMediaListeners","queries","values","mediaQueries","handleMediaQueryChange","_loop","index","window","matchMedia","addListener","removeListener","mql","matches","media","updates","entries","reduce","acc2","slicedToArray","k","isMatchedMedia","MediaQueryKey","SCREEN_MIN_WIDTH_600","$set","s","update","_componentDidMount","asyncToGenerator","regenerator_default","persistCache","t0","cacheLoaded","_this$state","mQueries","Suspense","fallback","react_apollo_browser_umd","app_utils","Provider","onShowClicked","onHide","minWidth600","BrowserRouter","Switch","exact","App_AuthRequired","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","div","classList","add","textNode","createTextNode","appendChild","style","cssText","parent","addEventListener","refreshEvent","showRefreshUI","console","log","catch","currentTarget","removeEventListener","reload","ReactDOM","containers_App","URL","toString","origin","fetch","response","status","headers","get","indexOf","ready","unregister","checkValidServiceWorker","registerServiceWorker","TOKEN_KEY","CURRENT_PROJECT_KEY","ROOT_CONTAINER_STYLE","MenuItemNames","height","display","flexDirection","flex","AppSidebarContext","AppSidebarConsumer","Consumer","F_projects_thysis_client_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_1__","acc","F_projects_thysis_client_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","updateNetworkStatus","_","networkStatus","__typename","isConnected","cache","writeData","userMutation","_ref5","F_projects_thysis_client_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_2__","_ref3","_ref4","_ref6","loggedOutUser","storeToken","F_projects_thysis_client_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__","readQuery","USER_QUERY","searchComponentState","resetClientAndPersistor","clearToken","clearProject","currentProjectMutation","_ref7","_ref8","storeProject","searchComponentStateMutation","_ref9","_ref10","searchText","searchLoading","result","searchError","initState","withClientState","resolvers","Mutation","defaults","getProject","localStorage","getItem","setItem","removeItem","project","JSON","parse","_ref11","stringify","Dimmer","inverted","className","active","Loader","size","httpLink","HTTP_URL","apiUrl","HttpLink","uri","ApolloLink","operation","forward","setContext","authorization","graphQLErrors","networkError","logError","errorName","obj","InMemoryCache","ApolloClient","link","from","storage","persistor","CachePersistor","_persistCache","SCHEMA_VERSION","SCHEMA_VERSION_KEY","restore","purge","pause","clearStore","resume","authUserLocalQuery","httpHostRegexExec","exec","Error","httpHost"],"mappings":"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","file":"static/js/main.be5e403b.chunk.js","sourcesContent":["// ROUTE URLS\n\nexport const TAG_URL = \"/tags/:id\";\nexport const makeTagURL = (id: string) => {\n  return TAG_URL.replace(\":id\", id);\n};\n\nexport const SOURCE_URL = \"/sources/:id\";\nexport const makeSourceURL = (id: string) => {\n  return SOURCE_URL.replace(\":id\", id);\n};\n\nexport const QUOTE_URL = \"/quotes/:id\";\nexport const makeQuoteURL = (id: string) => {\n  return QUOTE_URL.replace(\":id\", id);\n};\n\nexport const AUTHOR_ROUTE_URL = \"/authors/:id\";\nexport const makeAuthorRouteURL = (id: string) => {\n  return AUTHOR_ROUTE_URL.replace(\":id\", id);\n};\n\nexport const ROOT_URL = \"/:sourceId?\";\nexport const makeNewQuoteURL = (id?: string) => {\n  return ROOT_URL.replace(\":sourceId?\", id || \"\");\n};\n\nexport const SEARCH_QUOTES_URL = \"/search/quotes\";\n\nexport const USER_REG_URL = \"/auth/register\";\nexport const LOGIN_URL = \"/auth/login\";\nexport const PROJECTS_URL = \"/projects\" as string;\n\n// END ROUTE URLS\n\nlet titleEl = document.getElementById(\"thysis-title\");\n\nexport const setTitle = (title?: string) => {\n  if (!titleEl) {\n    titleEl = document.getElementById(\"thysis-title\");\n  }\n\n  if (titleEl) {\n    titleEl.innerText = title ? `Thysis | ${title}` : \"Thysis\";\n  }\n};\n","import { Socket, Channel } from \"phoenix\";\nimport { logger } from \"./utils\";\nimport { getToken } from \"./state\";\nimport getBackendUrls from \"./get-backend-urls\";\nimport { AllQueries } from \"./graphql/gen.types\";\n\nenum CHANNEL {\n  \"DATA_PLAIN\" = \"data:pxy\",\n  \"DATA_AUTH\" = \"data:pxz\"\n}\n\nenum ChannelTopic {\n  \"GRAPHQL_PLAIN\" = \"graphql:pxy\",\n  \"GRAPHQL_AUTH\" = \"graphql:pxz\"\n}\n\nlet socket: Socket;\n\nexport const defineSocket = () => {\n  const appSocket = {\n    sendDataAuth,\n    connect\n  };\n\n  if (socket) {\n    return appSocket;\n  }\n\n  let socketDisconnectedCount = 0;\n  let dataAuthChannel: Channel;\n  // let initialDataSynced = false\n\n  function connect(token = getToken(), payload?: ConnectionPayload) {\n    const params = token ? { params: { token } } : {};\n    socket = new Socket(getBackendUrls().websocketUrl, params);\n    socket.connect();\n\n    if (token) {\n      socket.onOpen(() => joinDataAuthChannel(payload));\n    }\n\n    socket.onError(() => {\n      dispatchDisconnected();\n    });\n  }\n\n  connect();\n\n  function sendDataAuth<TVariables, TData, TError = {}>(\n    query: string,\n    variables: TVariables,\n    ok: OnChannelMessage<TData>,\n    error: OnError<TError> = defaultError\n  ) {\n    return sendChannelMsg(dataAuthChannel, {\n      ok,\n      params: {\n        query,\n        variables\n      },\n      topic: ChannelTopic.GRAPHQL_AUTH,\n      error\n    });\n  }\n\n  function dispatchDisconnected() {\n    if (socketDisconnectedCount === 0) {\n      socketDisconnectedCount = 1;\n    }\n  }\n\n  function joinDataAuthChannel(payload?: ConnectionPayload) {\n    const params = payload\n      ? { query: payload.query, variables: payload.variables }\n      : {};\n\n    dataAuthChannel = socket.channel(CHANNEL.DATA_AUTH, params);\n\n    dataAuthChannel\n      .join()\n      .receive(\"ok\", message => {\n        socketDisconnectedCount = 0;\n\n        if (payload) {\n          payload.onData(message);\n        }\n\n        logger(\"log\", \"Data auth channel joined\", message);\n      })\n      .receive(\"error\", reason => {\n        dispatchDisconnected();\n        logger(\"error\", \"Data auth channel join error\", reason);\n      })\n      .receive(\"timeout\", () => {\n        dispatchDisconnected();\n        logger(\"warn\", \"Data auth channel join timeout\");\n      });\n  }\n\n  function sendChannelMsg<TData, B, C>(\n    channel: Channel,\n    {\n      topic,\n      ok = defaultError,\n      error,\n      params,\n      onTimeout\n    }: ChannelMessageSend<TData, B, C>\n  ) {\n    if (!channel) {\n      logger(\"warn\", \"Sending to channel: - channel unavailable\", channel);\n      return;\n    }\n\n    logger(\"log\", \"Sending to channel topic:\", topic, \"params:\\n\", {\n      ok,\n      error,\n      params,\n      onTimeout\n    });\n\n    channel\n      .push(topic, params || {})\n      .receive(\"ok\", (data: TData) => {\n        logger(\n          \"log\",\n          \"socket send to topic\",\n          topic,\n          \"successful.\\nReceived data:\\n\",\n          data\n        );\n\n        ok(data);\n      })\n      .receive(\"error\", (reasons = {}) => {\n        logger(\"error\", \"socket send to topic\", topic, \"Errors:\\n\", reasons);\n\n        error(reasons);\n      })\n      .receive(\"timeout\", reasons => {\n        if (onTimeout) {\n          onTimeout(reasons);\n        }\n      });\n  }\n\n  function defaultError() {\n    return null;\n  }\n\n  return appSocket;\n};\n\nexport const AppSocket = defineSocket();\nexport default AppSocket;\n\ntype OnChannelMessage<T> = (msg: T) => void;\ntype OnError<T> = (reason: T) => void;\n\ninterface ChannelMessage<TData, TParams, TError = {}, TTimeout = {}> {\n  params: TParams;\n\n  ok: OnChannelMessage<TData>;\n\n  error: OnError<TError>;\n\n  onTimeout?: (reason: TTimeout) => void;\n}\n\ntype ChannelMessageSend<\n  TData,\n  TParams,\n  TError = {},\n  TTimeout = {}\n> = ChannelMessage<TData, TParams, TError, TTimeout> & {\n  topic: ChannelTopic;\n};\n\ninterface ConnectionPayload<TVariables = {}> {\n  query: string;\n  variables: TVariables;\n  onData: (data: { data: AllQueries }) => void;\n}\n","import gql from \"graphql-tag\";\nimport { projectFragment } from \"../graphql/project.fragment\";\nimport { ProjectFragment } from \"../graphql/gen.types\";\nimport { DataValue } from \"react-apollo\";\n\nexport const currentProjectLocalQuery = gql`\n  query CurrentProjectLocalQuery {\n    currentProject @client {\n      ...ProjectFragment\n    }\n  }\n\n  ${projectFragment}\n`;\n\nexport default currentProjectLocalQuery;\n\nexport interface CurrentProjectLocalData {\n  currentProject?: ProjectFragment | null;\n}\n\nexport type CurrProjLocalGqlProps = DataValue<CurrentProjectLocalData>;\n","import gql from \"graphql-tag\";\n\nimport tagFrag from \"./tag-mini.fragment\";\n\nexport const tagMinimalQuery = gql`\n  query TagsMinimal {\n    tags {\n      ...TagFrag\n    }\n  }\n\n  ${tagFrag}\n`;\n\nexport default tagMinimalQuery;\n","import gql from \"graphql-tag\";\n\nimport { sourceFullFrag } from \"./source-full.fragment\";\n\nexport const sources1Query = gql`\n  query Sources1Query($source: GetSourcesInput!) {\n    sources(source: $source) {\n      ...SourceFullFrag\n    }\n  }\n\n  ${sourceFullFrag}\n`;\n\nexport default sources1Query;\n","import gql from \"graphql-tag\";\nimport { graphql } from \"react-apollo\";\nimport { MutationFn } from \"react-apollo\";\n\nimport { UserFragment } from \"./../graphql/gen.types\";\nimport { userFragment } from \"../graphql/user.fragment\";\n\nexport const userLocalMutation = gql`\n  mutation UserLocalMutation($user: LocalUserInput!) {\n    user(user: $user) @client {\n      ...UserFragment\n    }\n  }\n\n  ${userFragment}\n`;\n\nexport default userLocalMutation;\n\nexport interface Variable {\n  user: UserFragment | null;\n}\n\ntype Fn = MutationFn<Variable, Variable>;\n\nexport interface UserLocalMutationProps {\n  updateLocalUser: Fn;\n}\n\nexport const userLocalMutationGql = graphql<\n  {},\n  Variable,\n  Variable,\n  UserLocalMutationProps\n>(userLocalMutation, {\n  props: props => {\n    const mutate = props.mutate as Fn;\n\n    return {\n      updateLocalUser: mutate\n    };\n  }\n});\n","import gql from \"graphql-tag\";\n\nimport { authorFrag } from \"../graphql/author.fragment\";\nimport { sourceTypeFrag } from \"../graphql/source-type.fragment\";\n\nexport const sourceForDisplayFrag = gql`\n  fragment SourceForDisplayFrag on Source {\n    id\n    year\n    topic\n    publication\n    url\n    insertedAt\n    updatedAt\n    __typename\n\n    authors {\n      ...AuthorFrag\n    }\n\n    sourceType {\n      ...SourceTypeFrag\n    }\n  }\n\n  ${authorFrag}\n  ${sourceTypeFrag}\n`;\n\nexport default sourceForDisplayFrag;\n","import gql from \"graphql-tag\";\n\nimport sourceTypeFrag from \"./source-type.fragment\";\n\nexport const sourceTypesQuery = gql`\n  query SourceTypes {\n    sourceTypes {\n      ...SourceTypeFrag\n    }\n  }\n\n  ${sourceTypeFrag}\n`;\n\nexport default sourceTypesQuery;\n","import gql from \"graphql-tag\";\n\nimport { authorFrag } from \"./author.fragment\";\n\nexport const authorsQuery = gql`\n  query GetAllAuthors($author: GetAuthorsInput!) {\n    authors(author: $author) {\n      ...AuthorFrag\n    }\n  }\n\n  ${authorFrag}\n`;\n\nexport default authorsQuery;\n","import ApolloClient from \"apollo-client\";\n\nimport { sourceFullFrag } from \"../graphql/source-full.fragment\";\nimport { tagFrag } from \"../graphql/tag-mini.fragment\";\nimport { sourceTypeFrag } from \"../graphql/source-type.fragment\";\nimport gql from \"graphql-tag\";\nimport socket from \"../socket\";\nimport {\n  ProjectFragment,\n  AllQueries,\n  TagFrag,\n  SourceTypeFrag\n} from \"../graphql/gen.types\";\nimport TAGS_MINI_QUERY from \"../graphql/tags-mini.query\";\nimport SOURCES_QUERY from \"../graphql/sources-1.query\";\nimport SOURCE_TYPES_QUERY from \"../graphql/source-types.query\";\nimport AUTHORS_QUERY from \"../graphql/authors.query\";\nimport PROJECTS_QUERY from \"../graphql/projects.query\";\n\nconst AUTHORS_PROJECT_INPUT_KEY = \"authorProject\";\n\nexport const connectAndLoad = (\n  projects: Array<null | ProjectFragment> | null,\n  client: ApolloClient<{}>,\n  jwt: string\n) => {\n  if (!projects) {\n    return;\n  }\n\n  if (!projects.length) {\n    return;\n  }\n\n  client.writeQuery({\n    query: PROJECTS_QUERY,\n    data: { projects }\n  });\n\n  const sourcesProjVariables = {};\n  const authorsProjectVariables = {};\n\n  const projectIds = projects.map(p => {\n    if (!p) {\n      return \"\";\n    }\n\n    const { id: projectId } = p;\n\n    sourcesProjVariables[`source${projectId}`] = { projectId };\n\n    authorsProjectVariables[`${AUTHORS_PROJECT_INPUT_KEY}${projectId}`] = {\n      projectId\n    };\n\n    return projectId;\n  });\n\n  const projectsLen = projectIds.length;\n\n  const authorProject = makeAuthorsProjectsQuery(projectsLen);\n  const sourcesProjects = makeSourcesProjectsQuery(projectsLen);\n  const allInputs = [...sourcesProjects.inputs, ...authorProject.inputs].join(\n    \",\"\n  );\n\n  const query = gql`\n      query AllQueries(${allInputs}) {\n        ${sourcesProjects.queryStr}\n\n        ${authorProject.queryStr}\n\n        tags: tags {\n          ...TagFrag\n        }\n\n        sourceTypes {\n          ...SourceTypeFrag\n        }\n\n      }\n\n      ${sourceTypeFrag}\n      ${sourceFullFrag}\n      ${tagFrag} `;\n\n  socket.connect(\n    jwt,\n    {\n      query: query.loc.source.body,\n      variables: { ...sourcesProjVariables, ...authorsProjectVariables },\n      onData: onLoaded\n    }\n  );\n\n  async function saveTags(tags: Array<TagFrag | null> | null) {\n    if (!tags) {\n      return;\n    }\n\n    client.writeQuery({ query: TAGS_MINI_QUERY, data: { tags } });\n  }\n\n  async function saveSourceTypes(\n    sourceTypes: Array<SourceTypeFrag | null> | null\n  ) {\n    if (!sourceTypes) {\n      return;\n    }\n\n    client.writeQuery({\n      query: SOURCE_TYPES_QUERY,\n      data: { sourceTypes }\n    });\n  }\n\n  async function saveSources(data: AllQueries) {\n    projectIds.forEach(id => {\n      const sid = toSourceId(id);\n      const sources = data[sid];\n\n      if (!sources) {\n        return;\n      }\n\n      client.writeQuery({\n        query: SOURCES_QUERY,\n        variables: {\n          source: {\n            projectId: id\n          }\n        },\n        data: { sources }\n      });\n    });\n  }\n\n  async function saveProjectAuthors(data: AllQueries) {\n    projectIds.forEach(id => {\n      const authors = data[`${AUTHORS_PROJECT_INPUT_KEY}${id}`];\n\n      if (!authors) {\n        return;\n      }\n\n      client.writeQuery({\n        query: AUTHORS_QUERY,\n        variables: {\n          author: {\n            projectId: id\n          }\n        },\n        data: { authors }\n      });\n    });\n  }\n\n  function onLoaded({ data }: { data: AllQueries }) {\n    saveTags(data.tags);\n    saveSources(data);\n    saveSourceTypes(data.sourceTypes);\n    saveProjectAuthors(data);\n  }\n\n  function toSourceId(id: string) {\n    return `source${id}`;\n  }\n\n  function makeAuthorsProjectsQuery(len: number) {\n    let queryStr = \"\";\n    const inputs: string[] = [];\n\n    if (!len) {\n      return {\n        queryStr,\n        inputs\n      };\n    }\n\n    projectIds.forEach(id => {\n      const input = `${AUTHORS_PROJECT_INPUT_KEY}${id}`;\n      inputs.push(`$${input}: GetAuthorsInput`);\n\n      queryStr += `${input}: authors(author: $${input}) {\n        ...AuthorFrag\n      }\\n`;\n    });\n\n    return {\n      queryStr,\n      inputs\n    };\n  }\n\n  function makeSourcesProjectsQuery(len: number) {\n    let queryStr = \"\";\n    const inputs: string[] = [];\n\n    if (!len) {\n      return {\n        queryStr,\n        inputs\n      };\n    }\n\n    projectIds.forEach(id => {\n      const input = `${toSourceId(id)}`;\n      inputs.push(`$${input}: GetSourcesInput`);\n\n      queryStr += `${input}: sources(source: $${input}) {\n        ...SourceFullFrag\n      }\\n`;\n    });\n\n    return {\n      queryStr,\n      inputs\n    };\n  }\n};\n\nexport default connectAndLoad;\n","import gql from \"graphql-tag\";\n\nimport { projectFragment } from \"./project.fragment\";\n\nexport const projectsQuery = gql`\n  query ProjectsQuery {\n    projects {\n      ...ProjectFragment\n    }\n  }\n\n  ${projectFragment}\n`;\n\nexport default projectsQuery;\n","import { InputOnChangeData } from \"semantic-ui-react/dist/commonjs/elements/Input/Input\";\n\nexport type SemanticOnInputChangeFunc = (\n  e: React.ChangeEvent<HTMLInputElement>,\n  data: InputOnChangeData\n) => void;\n\n// tslint:disable-next-line:no-any\nexport const logger = async (prefix: string, tag: string, ...data: any) => {\n  if (process.env.NODE_ENV === \"development\") {\n    // tslint:disable-next-line:no-console\n    console[prefix](\n      \"\\n\\n     =======logging starts======\\n\",\n      tag,\n      \"\\n\",\n      ...data,\n      \"\\n     =======logging ends======\\n\"\n    );\n  }\n};\n","import gql from \"graphql-tag\";\n\nimport { userFragment } from \"./user.fragment\";\nimport { projectFragment } from \"./project.fragment\";\n\nexport const refreshUserQuery = gql`\n  query RefreshUserQuery($refresh: RefreshInput!) {\n    refresh(refresh: $refresh) {\n      ...UserFragment\n      projects {\n        ...ProjectFragment\n      }\n    }\n  }\n  ${projectFragment}\n  ${userFragment}\n`;\n\nexport default refreshUserQuery;\n","import React from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { LOGIN_URL, PROJECTS_URL } from \"../../../routes/util\";\n\nimport { Props } from \"./refresh\";\nimport Loading from \"../../../components/Loading\";\n\nexport class Refresh extends React.Component<Props, {}> {\n  render() {\n    const { loading, refresh: user, currentProject, error } = this.props;\n    if (loading && !user) {\n      return <Loading />;\n    }\n\n    const { component: Component, ...rest } = this.props.componentProps;\n\n    if (error && !error.message.includes(\"Network\")) {\n      return <Redirect to={LOGIN_URL} />;\n    }\n\n    if (\n      !currentProject &&\n      (rest.location && rest.location.pathname) !== PROJECTS_URL\n    ) {\n      return <Redirect to={PROJECTS_URL} />;\n    }\n\n    return <Component {...rest} />;\n  }\n}\n\nexport default Refresh;\n","import { graphql, compose, withApollo, DataValue } from \"react-apollo\";\n\nimport REFRESH_USER_QUERY from \"../../../graphql/refresh-user.query\";\nimport {\n  RefreshUserQuery,\n  RefreshUserQueryVariables\n} from \"../../../graphql/gen.types\";\nimport { userLocalMutationGql } from \"../../../state/user.local.mutation\";\nimport { OwnProps } from \"./refresh\";\nimport { Refresh } from \"./component\";\nimport connectAndLoad from \"../../../state/initial-data\";\n\nconst refreshUserGql = graphql<\n  OwnProps,\n  RefreshUserQuery,\n  RefreshUserQueryVariables,\n  DataValue<RefreshUserQuery, RefreshUserQueryVariables> | undefined\n>(REFRESH_USER_QUERY, {\n  props: ({ data, ownProps }) => {\n    if (!data) {\n      return data;\n    }\n\n    const { refresh } = data;\n\n    if (!refresh) {\n      return data;\n    }\n\n    const { projects, jwt } = refresh;\n    const { client, updateLocalUser } = ownProps;\n\n    connectAndLoad(projects, client, jwt);\n\n    updateLocalUser({\n      variables: { user: refresh }\n    });\n\n    return { ...data, refresh };\n  },\n\n  options: ({ jwt }) => ({\n    variables: {\n      refresh: { jwt }\n    }\n  })\n});\n\nexport default compose(\n  withApollo,\n  userLocalMutationGql,\n  refreshUserGql\n)(Refresh);\n","import * as React from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { RouteProps } from \"react-router-dom\";\nimport { Route } from \"react-router-dom\";\n\nimport Refresh from \"./../Refresh\";\nimport { Props } from \"./auth-required\";\nimport { LOGIN_URL, PROJECTS_URL } from \"./../../../routes/util\";\n\nexport const AuthRequired = ({\n  component: AuthComponent,\n  user,\n  staleToken,\n  currentProject,\n  ...rest\n}: Props) => {\n  const data = {\n    user,\n    currentProject,\n    ...rest\n  };\n\n  const render = (childProps: RouteProps) => {\n    if (user) {\n      if (!currentProject && rest.path !== PROJECTS_URL) {\n        return <Redirect to={PROJECTS_URL} />;\n      }\n\n      return <AuthComponent {...data} {...childProps} />;\n    }\n\n    if (staleToken) {\n      return (\n        <Refresh\n          componentProps={{ component: AuthComponent, ...childProps }}\n          jwt={staleToken}\n          currentProject={currentProject}\n        />\n      );\n    }\n\n    return <Redirect to={LOGIN_URL} />;\n  };\n\n  return <Route {...data} render={render} />;\n};\n\nexport default AuthRequired;\n","import { graphql } from \"react-apollo\";\nimport { compose } from \"react-apollo\";\n\nimport AUTH_USER_LOCAL_QUERY, {\n  UserLocalGqlData\n} from \"../../../state/auth-user.local.query\";\nimport CURRENT_PROJECT_QUERY from \"../../../state/project.local.query\";\nimport { CurrentProjectLocalData } from \"../../../state/project.local.query\";\nimport { LocalUserGqlProps } from \"./auth-required\";\nimport { OwnProps } from \"./auth-required\";\nimport { CurrentProjectLocalGqlProps } from \"./auth-required\";\nimport { AuthRequired } from \"./component\";\n\nconst authUserLocalGraphQl = graphql<\n  OwnProps,\n  UserLocalGqlData,\n  {},\n  LocalUserGqlProps\n>(AUTH_USER_LOCAL_QUERY, {\n  props: ({ data }) => {\n    return data;\n  }\n});\n\nconst currentProjectLocalGql = graphql<\n  OwnProps,\n  CurrentProjectLocalData,\n  {},\n  CurrentProjectLocalGqlProps\n>(CURRENT_PROJECT_QUERY, {\n  props: ({ data }) => {\n    return data;\n  }\n});\n\nexport default compose(\n  authUserLocalGraphQl,\n  currentProjectLocalGql\n)(AuthRequired);\n","import * as React from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { Switch } from \"react-router-dom\";\nimport { Route } from \"react-router-dom\";\nimport { ApolloProvider } from \"react-apollo\";\nimport update from \"immutability-helper\";\n\nimport { client, persistCache } from \"../../apollo-setup\";\nimport {\n  ROOT_URL,\n  PROJECTS_URL,\n  TAG_URL,\n  SOURCE_URL,\n  SEARCH_QUOTES_URL,\n  QUOTE_URL,\n  AUTHOR_ROUTE_URL,\n  USER_REG_URL,\n  LOGIN_URL\n} from \"./../../routes/util\";\nimport Loading from \"./../../components/Loading\";\nimport AuthRequired from \"./AuthRequired\";\nimport {\n  AppSidebarContext,\n  State,\n  initialState,\n  mediaQueries,\n  MediaQueryKey\n} from \"./app.utils\";\nimport { logger } from \"../../utils\";\n\n// tslint:disable-next-line:no-any\nconst ReactLazy = React as any;\nconst TagDetail = ReactLazy.lazy(() => import(\"./../../routes/TagDetail\"));\nconst Source = ReactLazy.lazy(() => import(\"./../../routes/Source\"));\nconst NewQuote = ReactLazy.lazy(() => import(\"./../../routes/NewQuote\"));\nconst Quote = ReactLazy.lazy(() => import(\"./../../routes/Quote\"));\nconst AuthorRoute = ReactLazy.lazy(() => import(\"./../../routes/Author\"));\nconst LoginRoute = ReactLazy.lazy(() => import(\"./../../routes/Login\"));\nconst ProjectsRoute = ReactLazy.lazy(() => import(\"./../../routes/Projects\"));\n\nconst SearchQuotes = ReactLazy.lazy(() =>\n  import(\"./../../routes/SearchQuotes\")\n);\n\nconst UserRegRoute = ReactLazy.lazy(() =>\n  import(\"./../../routes/Registration\")\n);\n\nexport class App extends React.Component<{}, State> {\n  state: State = initialState;\n  mediaListeners: Array<() => void> = [];\n\n  async componentDidMount() {\n    try {\n      await persistCache();\n    } catch (error) {\n      logger(\"error\", \"Error restoring Apollo cache\", error);\n    }\n\n    this.setState({ cacheLoaded: true });\n    this.setUpMediaListeners();\n  }\n\n  componentWillUnmount() {\n    this.tearDownMediaListeners();\n  }\n\n  render() {\n    const { cacheLoaded } = this.state;\n\n    if (!cacheLoaded) {\n      return <Loading />;\n    }\n\n    const { showSidebar, mediaQueries: mQueries } = this.state;\n\n    return (\n      <ReactLazy.Suspense fallback={<Loading />}>\n        <ApolloProvider client={client}>\n          <AppSidebarContext.Provider\n            value={{\n              showSidebar,\n              onShowClicked: this.toggleSidebar,\n              onHide: this.handleSidebarHide,\n              minWidth600: mQueries[MediaQueryKey.SCREEN_MIN_WIDTH_600]\n            }}\n          >\n            <BrowserRouter>\n              <Switch>\n                <Route\n                  exact={true}\n                  path={USER_REG_URL}\n                  component={UserRegRoute}\n                />\n\n                <Route exact={true} path={LOGIN_URL} component={LoginRoute} />\n\n                <AuthRequired\n                  exact={true}\n                  path={SOURCE_URL}\n                  component={Source}\n                />\n\n                <AuthRequired exact={true} path={QUOTE_URL} component={Quote} />\n\n                <AuthRequired\n                  exact={true}\n                  path={AUTHOR_ROUTE_URL}\n                  component={AuthorRoute}\n                />\n\n                <AuthRequired\n                  exact={true}\n                  path={PROJECTS_URL}\n                  component={ProjectsRoute}\n                />\n\n                <AuthRequired\n                  exact={true}\n                  path={SEARCH_QUOTES_URL}\n                  component={SearchQuotes}\n                />\n\n                <AuthRequired\n                  exact={true}\n                  path={TAG_URL}\n                  component={TagDetail}\n                />\n\n                <AuthRequired\n                  exact={true}\n                  path={ROOT_URL}\n                  component={NewQuote}\n                />\n\n                <Route component={LoginRoute} />\n              </Switch>\n            </BrowserRouter>\n          </AppSidebarContext.Provider>\n        </ApolloProvider>\n      </ReactLazy.Suspense>\n    );\n  }\n\n  private toggleSidebar = () => {\n    const { showSidebar } = this.state;\n    this.setState({ showSidebar: !showSidebar });\n  };\n\n  private handleSidebarHide = () => this.setState({ showSidebar: false });\n\n  private tearDownMediaListeners = () => this.mediaListeners.forEach(m => m());\n\n  private setUpMediaListeners = () => {\n    const queries = Object.values(mediaQueries);\n    // tslint:disable-next-line:no-any\n    const handleMediaQueryChange = this.handleMediaQueryChange as any;\n\n    for (let index = 0; index < queries.length; index++) {\n      const m = window.matchMedia(queries[index]) as MediaQueryList;\n      m.addListener(handleMediaQueryChange);\n      handleMediaQueryChange(m);\n      this.mediaListeners[index] = () =>\n        m.removeListener(handleMediaQueryChange);\n    }\n  };\n\n  private handleMediaQueryChange = (\n    mql: MediaQueryListEvent | MediaQueryList\n  ) => {\n    const { matches, media } = mql;\n    const acc1 = {} as { [k in MediaQueryKey]: { $set: boolean } };\n\n    const updates = Object.entries(mediaQueries).reduce((acc2, [k, v]) => {\n      const isMatchedMedia = v === media;\n\n      if (isMatchedMedia && k === MediaQueryKey.SCREEN_MIN_WIDTH_600) {\n        this.setState({ showSidebar: matches });\n      }\n\n      acc2[k] = { $set: isMatchedMedia ? matches : false };\n      return acc2;\n    }, acc1);\n\n    this.setState(s =>\n      update(s, {\n        mediaQueries: updates\n      })\n    );\n  };\n}\n\nexport default App;\n","import { App } from \"./container\";\n\nexport default App;\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://goo.gl/SC7cgQ\"\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === \"installed\") {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                // console.log(\"New content is available; please refresh.\");\n                showRefreshUI();\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log(\"Content is cached for offline use.\");\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\")!.indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nfunction refreshEvent(e: MouseEvent) {\n  // tslint:disable-next-line:no-any\n  const currentTarget = e.currentTarget as any;\n  if (currentTarget) {\n    currentTarget.removeEventListener(\"click\", refreshEvent, false);\n    // document.body.removeChild(c  urrentTarget);\n  }\n\n  window.location.reload();\n}\n\nfunction showRefreshUI() {\n  const div = document.createElement(\"div\");\n  div.classList.add(\"ui\", \"inverted\", \"menu\");\n  const textNode = document.createTextNode(\n    \"New content is available; please click to refresh.\"\n  );\n  div.appendChild(textNode);\n  div.style.cssText = `\n  border: 1px solid #07526f;\n  padding: 10px;\n  border-radius: 3px;\n  color: #ffffffe6;\n  background-color: #5faac7;\n  `;\n\n  const parent = document.createElement(\"div\");\n  parent.style.cssText = `\n  cursor: pointer;\n  height: 100%;\n  width: 100%;\n  position: absolute;\n  top: 0;\n  left: 0;\n  opacity: 1;\n  background: #fdfdfdc2;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  `;\n  parent.appendChild(div);\n  document.body.appendChild(parent);\n  parent.addEventListener(\"click\", refreshEvent, false);\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport \"semantic-ui-css-offline\";\nimport \"react-select/dist/react-select.css\";\n\nimport App from \"./containers/App\";\nimport \"./index.scss\";\nimport \"./socket\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\") as HTMLElement);\nregisterServiceWorker();\n","import { SimpleStyle } from \"jss/css\";\n\nexport const POSITION_RELATIVE = \"relative\" as \"relative\";\nexport const POSITION_ABSOLUTE = \"absolute\" as \"absolute\";\nexport const FLEX_WRAP_WRAP = \"wrap\" as \"wrap\";\nexport const BORDER_COLLAPSE_SEPARATE = \"separate\" as \"separate\";\nexport const FLEX_DIRECTION_COLUMN = \"column\" as \"column\";\nexport const OVERFLOW_X_HIDDEN = \"hidden\" as \"hidden\";\nexport const OVERFLOW_Y_AUTO = \"auto\" as \"auto\";\nexport const TOKEN_KEY = \"token\";\nexport const CURRENT_PROJECT_KEY = \"current-project\";\n\nexport type SimpleCss = Record<string, SimpleStyle>;\n\nexport const ROOT_CONTAINER_STYLE = {\n  height: \"100%\",\n  display: \"flex\",\n  flexDirection: FLEX_DIRECTION_COLUMN,\n  flex: 1\n};\n\nexport enum MenuItemNames {\n  HOME = \"home\",\n  NEW_TAG = \"newTag\",\n  NEW_SOURCE = \"newSource\",\n  TAG_LIST = \"tagList\",\n  SOURCE_LIST = \"sourceList\",\n  NEW_AUTHOR = \"newAuthor\",\n  NEW_SOURCE_TYPE = \"newSourceType\"\n}\n","import * as React from \"react\";\n\nexport interface SideBarContextProps {\n  showSidebar: boolean;\n  minWidth600?: boolean;\n  onShowClicked: () => void;\n  onHide: () => void;\n}\n\nexport const AppSidebarContext = React.createContext<SideBarContextProps>({\n  showSidebar: false,\n  onShowClicked: () => null,\n  onHide: () => null\n});\n\nexport const AppSidebarConsumer = AppSidebarContext.Consumer;\n\nexport enum MediaQueryKey {\n  SCREEN_MIN_WIDTH_600 = \"screenMinWidth600\"\n}\n\nexport const mediaQueries = {\n  [MediaQueryKey.SCREEN_MIN_WIDTH_600]: \"screen and (min-width: 600px)\"\n};\n\ntype StateMediaQueries = { [k in MediaQueryKey]: boolean };\n\nexport interface State {\n  showSidebar: boolean;\n  cacheLoaded?: boolean;\n  mediaQueries: StateMediaQueries;\n}\n\nexport const initialState: State = {\n  showSidebar: false,\n  mediaQueries: Object.values(MediaQueryKey).reduce(\n    (acc, k) => ({ ...acc, [k]: false }),\n    {} as StateMediaQueries\n  )\n};\n","import gql from \"graphql-tag\";\n\nexport const userFragment = gql`\n  fragment UserFragment on User {\n    id\n    name\n    email\n    jwt\n  }\n`;\n\nexport default userFragment;\n","import gql from \"graphql-tag\";\n\nexport const projectFragment = gql`\n  fragment ProjectFragment on Project {\n    id\n    title\n    insertedAt\n  }\n`;\n\nexport default projectFragment;\n","import gql from \"graphql-tag\";\n\nexport const sourceTypeFrag = gql`\n  fragment SourceTypeFrag on SourceType {\n    id\n    name\n    __typename\n  }\n`;\n\nexport default sourceTypeFrag;\n","import { withClientState } from \"apollo-link-state\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\n\nimport { UserFragment } from \"./../graphql/gen.types\";\nimport { ProjectFragment } from \"./../graphql/gen.types\";\nimport { TOKEN_KEY } from \"./../constants\";\nimport { CURRENT_PROJECT_KEY } from \"./../constants\";\nimport { State as SearchComponentState } from \"../components/SearchComponent/search-component\";\nimport USER_QUERY, { UserLocalGqlData } from \"./auth-user.local.query\";\nimport { Variable as UserMutationVar } from \"./user.local.mutation\";\nimport { resetClientAndPersistor } from \"../apollo-setup\";\n\ntype ClientStateFn<TVariables> = (\n  fieldName: string,\n  variables: TVariables,\n  context: { cache: InMemoryCache }\n) => void;\n\nconst updateNetworkStatus: ClientStateFn<{\n  isConnected: boolean;\n}> = (_, { isConnected }, { cache }) => {\n  const data = {\n    networkStatus: {\n      __typename: \"NetworkStatus\",\n      isConnected\n    }\n  };\n  cache.writeData({ data });\n  return null;\n};\n\nconst userMutation: ClientStateFn<UserMutationVar> = async (\n  _,\n  { user },\n  { cache }\n) => {\n  if (user) {\n    cache.writeData({ data: { user, staleToken: null, loggedOutUser: null } });\n    storeToken(user.jwt);\n\n    return user;\n  }\n  // MEANS WE HAVE LOGGED OUT. we store the current user as `loggedOutUser`\n  // so we can pre-fill the sign in form with e.g. user email\n\n  const { user: loggedOutUser } = {\n    ...(cache.readQuery<UserLocalGqlData>({ query: USER_QUERY }) || {\n      user: null\n    })\n  };\n\n  const data = {\n    user: null,\n    staleToken: null,\n    currentProject: null,\n    searchComponentState: null\n  } as {\n    loggedOutUser?: UserFragment | null;\n  };\n\n  if (loggedOutUser) {\n    await resetClientAndPersistor();\n    data.loggedOutUser = loggedOutUser;\n  }\n\n  await cache.writeData({\n    data\n  });\n  clearToken();\n  clearProject();\n\n  return loggedOutUser;\n};\n\nconst currentProjectMutation: ClientStateFn<{\n  currentProject: ProjectFragment;\n}> = (_, { currentProject }, { cache }) => {\n  const data = { currentProject };\n  cache.writeData({ data });\n\n  storeProject(currentProject);\n\n  return null;\n};\n\nconst searchComponentStateMutation: ClientStateFn<{\n  searchComponentState: SearchComponentState;\n}> = (_, { searchComponentState: d }, { cache }) => {\n  const toSave = {\n    searchText: d.searchText || \"\",\n    searchLoading: d.searchLoading || false,\n    result: d.result || null,\n    searchError: d.searchError || null,\n    __typename: \"SearchComponentState\"\n  };\n\n  const data = {\n    searchComponentState: toSave\n  };\n\n  cache.writeData({ data });\n\n  return null;\n};\n\nexport const initState = (cache: InMemoryCache) => {\n  return withClientState({\n    cache,\n    resolvers: {\n      Mutation: {\n        updateNetworkStatus,\n        user: userMutation,\n        currentProject: currentProjectMutation,\n        searchComponentState: searchComponentStateMutation\n      }\n    },\n    defaults: {\n      staleToken: getToken(),\n      user: null,\n      currentProject: getProject(),\n      searchComponentState: null,\n      loggedOutUser: null\n    }\n  });\n};\n\nexport const getToken = (): string | null =>\n  localStorage.getItem(TOKEN_KEY) || null;\n\nconst storeToken = (token: string) => localStorage.setItem(TOKEN_KEY, token);\n\nconst clearToken = () => localStorage.removeItem(TOKEN_KEY);\n\nconst getProject = (): ProjectFragment | null => {\n  const project = localStorage.getItem(CURRENT_PROJECT_KEY);\n  return project ? JSON.parse(project) : null;\n};\n\nconst storeProject = async (project: ProjectFragment) =>\n  localStorage.setItem(CURRENT_PROJECT_KEY, JSON.stringify(project));\n\nconst clearProject = () => localStorage.removeItem(CURRENT_PROJECT_KEY);\n","import * as React from \"react\";\nimport { Dimmer } from \"semantic-ui-react\";\nimport { Loader } from \"semantic-ui-react\";\n\nimport \"./loading.scss\";\n\nexport const Loading = () => (\n  <Dimmer inverted={true} className=\"loading-state\" active={true}>\n    <Loader size=\"medium\">Loading..</Loader>\n  </Dimmer>\n);\n\nexport default Loading;\n","import { Loading } from \"./component\";\n\nexport default Loading;\n","import { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { ApolloClient } from \"apollo-client\";\nimport { ApolloLink, Operation } from \"apollo-link\";\nimport { onError } from \"apollo-link-error\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { CachePersistor } from \"apollo-cache-persist\";\n\nimport { initState } from \"./state\";\nimport { getToken } from \"./state\";\nimport getBackendUrls from \"./get-backend-urls\";\n\nconst HTTP_URL = getBackendUrls().apiUrl;\n\nlet httpLink;\nhttpLink = new HttpLink({ uri: HTTP_URL }) as ApolloLink;\nhttpLink = middlewareAuthLink().concat(httpLink);\nhttpLink = middlewareErrorLink().concat(httpLink);\n\nif (process.env.NODE_ENV !== \"production\") {\n  httpLink = middlewareLoggerLink(httpLink);\n}\n\nconst cache = new InMemoryCache();\n\nexport const client = new ApolloClient({\n  cache,\n  link: ApolloLink.from([initState(cache), httpLink])\n});\n\nexport default client;\nconst storage = localStorage as any;\n\nconst persistor = new CachePersistor({\n  cache,\n  storage,\n  key: \"thysis-apollo-cache-persist\"\n});\n\nexport async function persistCache() {\n  const SCHEMA_VERSION = \"3.1\"; // Must be a string.\n  const SCHEMA_VERSION_KEY = \"thysis-apollo-schema-version\";\n  const currentVersion = localStorage.getItem(SCHEMA_VERSION_KEY);\n\n  if (currentVersion === SCHEMA_VERSION) {\n    // If the current version matches the latest version,\n    // we're good to go and can restore the cache.\n    await persistor.restore();\n  } else {\n    // Otherwise, we'll want to purge the outdated persisted cache\n    // and mark ourselves as having updated to the latest version.\n    await persistor.purge();\n    localStorage.setItem(SCHEMA_VERSION_KEY, SCHEMA_VERSION);\n  }\n\n  return persistor;\n}\n\nexport const resetClientAndPersistor = async () => {\n  await persistor.pause(); // Pause automatic persistence.\n  await persistor.purge(); // Delete everything in the storage provider.\n  await client.clearStore();\n  await persistor.resume();\n};\n\n// HELPER FUNCTIONS\n\nfunction middlewareAuthLink() {\n  return new ApolloLink((operation, forward) => {\n    const token = getToken();\n\n    if (token) {\n      operation.setContext({\n        headers: {\n          authorization: `Bearer ${token}`\n        }\n      });\n    }\n\n    return forward ? forward(operation) : null;\n  });\n}\n\nconst getNow = () => {\n  const n = new Date();\n  return `${n.getHours()}:${n.getMinutes()}:${n.getSeconds()}`;\n};\n\nfunction middlewareLoggerLink(l: ApolloLink) {\n  const processOperation = (operation: Operation) => ({\n    query: operation.query.loc ? operation.query.loc.source.body : \"\",\n    variables: operation.variables\n  });\n\n  const logger = new ApolloLink((operation, forward) => {\n    const operationName = `Apollo operation: ${operation.operationName}`;\n\n    // tslint:disable-next-line:no-console\n    console.log(\n      \"\\n\\n\\n\",\n      getNow(),\n      `=============================${operationName}========================\\n`,\n      processOperation(operation),\n      `\\n=========================End ${operationName}=========================`\n    );\n\n    if (!forward) {\n      return null;\n    }\n\n    const fop = forward(operation);\n\n    if (fop.map) {\n      return fop.map(response => {\n        // tslint:disable-next-line:no-console\n        console.log(\n          \"\\n\\n\\n\",\n          getNow(),\n          `==============Received response from ${operationName}============\\n`,\n          response,\n          `\\n==========End Received response from ${operationName}=============`\n        );\n        return response;\n      });\n    }\n\n    return fop;\n  });\n\n  return logger.concat(l);\n}\n\nfunction middlewareErrorLink() {\n  return onError(({ graphQLErrors, networkError, response, operation }) => {\n    // tslint:disable-next-line:ban-types\n    const logError = (errorName: string, obj: Object) => {\n      if (process.env.NODE_ENV === \"production\") {\n        return;\n      }\n\n      const operationName = `[${errorName} error] from Apollo operation: ${\n        operation.operationName\n      }`;\n\n      // tslint:disable-next-line:no-console\n      console.error(\n        \"\\n\\n\\n\",\n        getNow(),\n        `============================${operationName}=======================\\n`,\n        obj,\n        `\\n====================End ${operationName}============================`\n      );\n    };\n\n    if (response) {\n      logError(\"Response\", response);\n    }\n\n    if (networkError) {\n      logError(\"Network\", networkError);\n    }\n  });\n}\n","import gql from \"graphql-tag\";\n\nimport { sourceForDisplayFrag } from \"../graphql/source-for-display.fragment\";\n\nexport const sourceFullFrag = gql`\n  fragment SourceFullFrag on Source {\n    ...SourceForDisplayFrag\n  }\n\n  ${sourceForDisplayFrag}\n`;\n\nexport default sourceFullFrag;\n","import gql from \"graphql-tag\";\n\nimport { userFragment } from \"../graphql/user.fragment\";\nimport { UserFragment } from \"../graphql/gen.types\";\nimport { DataValue } from \"react-apollo\";\n\nexport const authUserLocalQuery = gql`\n  query UserLocalQuery {\n    user @client {\n      ...UserFragment\n    }\n\n    staleToken @client\n  }\n\n  ${userFragment}\n`;\n\nexport default authUserLocalQuery;\n\nexport interface UserLocalGqlData {\n  user: UserFragment;\n  staleToken: string | null;\n}\n\nexport type UserLocalGqlProps = DataValue<UserLocalGqlData>;\n","import gql from \"graphql-tag\";\n\nexport const authorFrag = gql`\n  fragment AuthorFrag on Author {\n    id\n    firstName\n    lastName\n    middleName\n    __typename\n  }\n`;\n\nexport default authorFrag;\n","import gql from \"graphql-tag\";\n\nexport const tagFrag = gql`\n  fragment TagFrag on Tag {\n    id\n    text\n    question\n    __typename\n  }\n`;\n\nexport default tagFrag;\n","const URL_ROOT = \"/__api\";\n\nexport const getBackendUrls = () => {\n  const apiUrl = process.env.REACT_APP_API_URL;\n\n  if (!apiUrl) {\n    throw new Error('You must set the \"ELM_APP_MY_EXP_PHOENIX_API_URL\"');\n  }\n\n  let websocketUrl;\n\n  // if we are in production, we connect directly to the socket using relative uri\n  if (apiUrl === URL_ROOT) {\n    websocketUrl = \"/socket\";\n  } else {\n    const httpHostRegexExec = /https?/.exec(apiUrl);\n\n    if (!httpHostRegexExec) {\n      throw new Error(\"Invalid HTTP host in '\" + apiUrl + \"'\");\n    }\n\n    const httpHost = httpHostRegexExec[0];\n    const websocketHost = httpHost === \"https\" ? \"wss\" : \"ws\";\n\n    websocketUrl = apiUrl\n      .replace(httpHost, websocketHost)\n      .replace(URL_ROOT, \"/socket\");\n  }\n\n  return {\n    apiUrl,\n    websocketUrl\n  };\n};\n\nexport default getBackendUrls;\n"],"sourceRoot":""}