{"version":3,"sources":["components/Header/header.utils.ts","components/Header/component.tsx","components/Header/index.ts","routes/Login/login.ts","routes/Login/route.tsx","graphql/login.mutation.ts","state/logged-out-user.local.query.ts","routes/Login/index.ts"],"names":["INITIAL_STATE","showingSidebar","Header","state","renderWithContext","context","_this$props","_this","props","_this$props$className","className","style","currentProject","title","path","match","showSideBarTrigger","onShowClicked","minWidth600","showSidebar","show","react","concat","onClick","Icon","name","ROOT_URL","NavLink","to","makeNewQuoteURL","app_utils","this","React","currentProjectGql","graphql","CURRENT_PROJECT_LOCAL_QUERY","data","compose","withRouter","FORM_VALUES_KEY","initialFormValues","_initialFormValues","Object","defineProperty","EMAIL","PASSWORD","initialState","formValues","Login","_React$Component","_getPrototypeOf2","classCallCheck","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","validate","values","errors","_arr","keys","_i","key","error","formValuesEmpty","charAt","toUpperCase","slice","validateEmail","email","test","setState","prev","update","$set","validatePassword","password","renderError","graphQlError","react_default","a","createElement","Card","Content","extra","Message","onDismiss","handleErrorMsgDismiss","message","submit","_ref","asyncToGenerator","regenerator_default","mark","_callee","formikBag","login","client","updateLocalUser","result","user","projects","jwt","wrap","_context","next","setSubmitting","variables","sent","connectAndLoad","history","replace","PROJECTS_URL","t0","stop","_x","_x2","renderForm","_ref2","dirty","isSubmitting","handleSubmit","disableSubmit","isEmpty","Form","onSubmit","map","_data","slicedToArray","label","type","formik_esm","render","renderInput","Button","id","color","inverted","disabled","loading","fluid","USER_REG_URL","formProps","field","form","booleanError","touched","autoFocus","Field","assign","control","Input","placeholder","autoComplete","onBlur","handleFormControlBlur","onFocus","handleFocus","display","padding","marginBottom","marginTop","header","setFieldTouched","undefined","_arr2","_i2","trim","inherits","createClass","value","_componentDidMount","_callee2","_this$props2","_context2","setTitle","loggedOutUser","s","initialValues","enableReinitialize","nextProps","currentState","Component","loginMutation","gql","_templateObject","userFragment","projectFragment","loggedOutUserLocalQuery","logged_out_user_local_query_templateObject","loginMutationGql","LOGIN_MUTATION","mutate","loggedOutUserGql","USER_LOCAL_QUERY","userLocalMutationGql","withApollo"],"mappings":"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","file":"static/js/9.f6449ca2.chunk.js","sourcesContent":["import React from \"react\";\nimport { RouteComponentProps } from \"react-router-dom\";\n\nimport { CurrentProjectLocalData } from \"../../state/project.local.query\";\n\nexport type Props = RouteComponentProps<{}> &\n  CurrentProjectLocalData & {\n    title: string;\n    style?: React.CSSProperties;\n    className?: string;\n    showSideBarTrigger?: boolean;\n  };\n\nexport interface State {\n  showingSidebar: boolean;\n}\n\nexport const INITIAL_STATE: State = {\n  showingSidebar: false\n};\n","import * as React from \"react\";\nimport { Icon } from \"semantic-ui-react\";\nimport { NavLink } from \"react-router-dom\";\n\nimport \"./header.scss\";\nimport { Props, State, INITIAL_STATE } from \"./header.utils\";\nimport {\n  AppSidebarConsumer,\n  SideBarContextProps\n} from \"../../containers/App/app.utils\";\nimport { ROOT_URL, makeNewQuoteURL } from \"../../routes/util\";\n\nexport default class Header extends React.Component<Props, State> {\n  state = INITIAL_STATE;\n\n  render() {\n    return <AppSidebarConsumer>{this.renderWithContext}</AppSidebarConsumer>;\n  }\n\n  private renderWithContext = (context: SideBarContextProps) => {\n    const {\n      className = \"\",\n      style,\n      currentProject,\n      title,\n      match: { path },\n      showSideBarTrigger\n    } = this.props;\n\n    const { onShowClicked, minWidth600, showSidebar } = context;\n    const show = minWidth600 ? !showSidebar : true;\n\n    return (\n      <div className={`${className} src-components-header`} style={style}>\n        <div className=\"top\">\n          {showSideBarTrigger && show && (\n            <a className=\"sidebar-trigger item\" onClick={onShowClicked}>\n              <Icon name=\"content\" />\n            </a>\n          )}\n\n          <div className=\"title\">{title}</div>\n        </div>\n\n        {currentProject && (\n          <div className=\"bottom\">\n            {path === ROOT_URL ? (\n              <span className=\"project-title\">{currentProject.title}</span>\n            ) : (\n              <NavLink to={makeNewQuoteURL()} className=\"project-title\">\n                {currentProject.title}\n              </NavLink>\n            )}\n          </div>\n        )}\n      </div>\n    );\n  };\n}\n","import { graphql, compose } from \"react-apollo\";\nimport { withRouter } from \"react-router-dom\";\n\nimport Header from \"./component\";\nimport CURRENT_PROJECT_LOCAL_QUERY, {\n  CurrentProjectLocalData\n} from \"../../state/project.local.query\";\nimport { Props } from \"./header.utils\";\n\nconst currentProjectGql = graphql<\n  Props,\n  CurrentProjectLocalData,\n  {},\n  CurrentProjectLocalData | void\n>(CURRENT_PROJECT_LOCAL_QUERY, {\n  props: props => props.data\n});\n\nexport default compose(\n  withRouter,\n  currentProjectGql\n)(Header);\n","import { ApolloError } from \"apollo-client\";\nimport { ChildProps, WithApolloClient } from \"react-apollo\";\nimport { RouteComponentProps } from \"react-router-dom\";\n\nimport { LoginMutation } from \"../../graphql/gen.types\";\nimport { LoginMutationVariables } from \"../../graphql/gen.types\";\nimport { LoginMutationProps } from \"../../graphql/ops.types\";\nimport { UserLocalMutationProps } from \"../../state/user.local.mutation\";\nimport { LoggedOutUserProps } from \"../../state/logged-out-user.local.query\";\n\nexport type OwnProps = WithApolloClient<{}> &\n  RouteComponentProps<{}> &\n  LoginMutation;\n\nexport type Props = ChildProps<\n  OwnProps & LoginMutationProps & UserLocalMutationProps & LoggedOutUserProps,\n  LoginMutation,\n  LoginMutationVariables\n>;\n\nexport interface FormValues {\n  email: string;\n  password: string;\n}\n\nexport enum FORM_VALUES_KEY {\n  EMAIL = \"email\",\n  PASSWORD = \"password\"\n}\n\nexport const initialFormValues = {\n  [FORM_VALUES_KEY.EMAIL]: \"\",\n  [FORM_VALUES_KEY.PASSWORD]: \"\"\n};\n\nexport interface State {\n  initialFormValues: FormValues;\n  formValues: FormValues;\n  graphQlError?: ApolloError;\n}\n\nexport const initialState: State = {\n  formValues: initialFormValues,\n  initialFormValues\n};\n","import React from \"react\";\nimport { Button, Card } from \"semantic-ui-react\";\nimport { Input } from \"semantic-ui-react\";\nimport { Message } from \"semantic-ui-react\";\nimport { Icon } from \"semantic-ui-react\";\nimport { Form } from \"semantic-ui-react\";\nimport { Formik } from \"formik\";\nimport { FormikProps } from \"formik\";\nimport { Field } from \"formik\";\nimport { FieldProps, FormikActions } from \"formik\";\nimport { FormikErrors } from \"formik\";\nimport isEmpty from \"lodash/isEmpty\";\nimport { NavLink } from \"react-router-dom\";\nimport update from \"immutability-helper\";\n\nimport \"./login.scss\";\nimport { initialState } from \"./login\";\nimport { Props } from \"./login\";\nimport { State } from \"./login\";\nimport { FORM_VALUES_KEY } from \"./login\";\nimport { FormValues } from \"./login\";\nimport { setTitle, PROJECTS_URL } from \"../../routes/util\";\nimport { USER_REG_URL } from \"./../../routes/util\";\nimport RootHeader from \"../../components/Header\";\nimport connectAndLoad from \"../../state/initial-data\";\n\nexport class Login extends React.Component<Props, State> {\n  static getDerivedStateFromProps(nextProps: Props, currentState: State) {\n    const { loggedOutUser } = nextProps;\n\n    if (loggedOutUser) {\n      return update(currentState, {\n        initialFormValues: {\n          email: {\n            $set: loggedOutUser.email\n          }\n        }\n      });\n    }\n\n    return null;\n  }\n\n  state = initialState;\n\n  async componentDidMount() {\n    setTitle(\"Sign In\");\n\n    const { updateLocalUser, loggedOutUser } = this.props;\n    // If we have loggedOutUser, then it means we have signed out before and\n    // thus will not sign out again\n    if (!loggedOutUser) {\n      // sign out the user\n      const result = await updateLocalUser({\n        variables: {\n          user: null\n        }\n      });\n\n      if (result) {\n        const { data } = result;\n\n        if (data) {\n          const { user } = data;\n\n          if (user) {\n            this.setState(s =>\n              update(s, {\n                initialFormValues: {\n                  email: {\n                    $set: user.email\n                  }\n                }\n              })\n            );\n          }\n        }\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    setTitle();\n  }\n\n  render() {\n    return (\n      <div className=\"login-route\">\n        <RootHeader title=\"Thysis\" />\n\n        <div className=\"main\">\n          <Formik\n            initialValues={this.state.initialFormValues}\n            enableReinitialize={true}\n            onSubmit={this.submit}\n            render={this.renderForm}\n            validate={this.validate}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  validate = (values: FormValues) => {\n    const errors: FormikErrors<FormValues> = {};\n\n    for (const key of Object.keys(values)) {\n      const error = this.formValuesEmpty(values)\n        ? \"\"\n        : this[`validate${key.charAt(0).toUpperCase()}${key.slice(1)}`](\n            values[key]\n          );\n\n      if (error) {\n        errors[key] = error;\n        return errors;\n      }\n    }\n\n    return errors;\n  };\n\n  validateEmail = (email: string | null) => {\n    if (\n      !(\n        email &&\n        /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/.test(\n          email\n        )\n      )\n    ) {\n      return \"Enter valid email\";\n    }\n\n    this.setState(prev =>\n      update(prev, {\n        formValues: {\n          email: {\n            $set: email\n          }\n        }\n      })\n    );\n\n    return \"\";\n  };\n\n  validatePassword = (password: string | null) => {\n    if (!password) {\n      return \"Enter Password\";\n    }\n\n    if (password.length < 4) {\n      return \"Too short\";\n    }\n\n    this.setState(prev =>\n      update(prev, {\n        formValues: {\n          password: {\n            $set: password\n          }\n        }\n      })\n    );\n\n    return \"\";\n  };\n\n  renderError = () => {\n    const { graphQlError } = this.state;\n\n    if (graphQlError) {\n      return (\n        <Card.Content extra={true}>\n          <Message error={true} onDismiss={this.handleErrorMsgDismiss}>\n            <Message.Content>{graphQlError.message}</Message.Content>\n          </Message>\n        </Card.Content>\n      );\n    }\n\n    return undefined;\n  };\n\n  private submit = async (\n    values: FormValues,\n    formikBag: FormikActions<FormValues>\n  ) => {\n    formikBag.setSubmitting(true);\n\n    const { login, client, updateLocalUser } = this.props;\n\n    try {\n      const result = await login({\n        variables: {\n          login: this.state.formValues\n        }\n      });\n\n      if (result && result.data) {\n        const user = result.data.login;\n\n        if (user) {\n          const { projects, jwt } = user;\n          connectAndLoad(projects, client, jwt);\n\n          await updateLocalUser({\n            variables: { user }\n          });\n\n          this.props.history.replace(PROJECTS_URL);\n        }\n      }\n    } catch (error) {\n      formikBag.setSubmitting(false);\n      this.setState({ graphQlError: error });\n    }\n  };\n\n  private renderForm = ({\n    dirty,\n    isSubmitting,\n    errors,\n    handleSubmit\n  }: FormikProps<FormValues>) => {\n    const { graphQlError } = this.state;\n    const dirtyOrSubmitting = !dirty || isSubmitting;\n    const disableSubmit =\n      dirtyOrSubmitting || !isEmpty(errors) || !!graphQlError;\n\n    return (\n      <Card>\n        <Card.Content className=\"form-title\" extra={true}>\n          Login to Thysis\n        </Card.Content>\n\n        {this.renderError()}\n\n        <Card.Content>\n          <Form onSubmit={handleSubmit}>\n            {[\n              [\"Email\", \"email\", FORM_VALUES_KEY.EMAIL],\n              [\"Password\", \"password\", FORM_VALUES_KEY.PASSWORD]\n            ].map(data => {\n              const [label, type, name] = data;\n              return (\n                <Field\n                  key={name}\n                  name={name}\n                  render={this.renderInput(label, type)}\n                />\n              );\n            })}\n\n            <Button\n              id=\"author-modal-submit\"\n              color=\"green\"\n              inverted={true}\n              disabled={disableSubmit}\n              loading={isSubmitting}\n              type=\"submit\"\n              fluid={true}\n            >\n              <Icon name=\"checkmark\" /> Ok\n            </Button>\n          </Form>\n        </Card.Content>\n\n        <Card.Content extra={true}>\n          <NavLink className=\"to-reg-button\" to={USER_REG_URL}>\n            Don't have an account? Sign Up\n          </NavLink>\n        </Card.Content>\n      </Card>\n    );\n  };\n\n  private renderInput = (label: string, type: string) => (\n    formProps: FieldProps<FormValues>\n  ) => {\n    const { field, form } = formProps;\n    const {\n      initialFormValues: { email }\n    } = this.state;\n    const name = field.name as FORM_VALUES_KEY;\n    const error = form.errors[name];\n    const booleanError = !!error;\n    const touched = form.touched[name];\n\n    let autoFocus = false;\n\n    if (name === FORM_VALUES_KEY.EMAIL && !email) {\n      autoFocus = true;\n    } else if (name === FORM_VALUES_KEY.PASSWORD && email) {\n      autoFocus = true;\n    }\n\n    return (\n      <div>\n        <Form.Field\n          {...field}\n          type={type}\n          control={Input}\n          placeholder={label}\n          autoComplete=\"off\"\n          label={label}\n          id={name}\n          error={booleanError}\n          onBlur={this.handleFormControlBlur(name, form)}\n          onFocus={this.handleFocus}\n          autoFocus={autoFocus}\n        />\n\n        {booleanError && touched && (\n          <Message\n            style={{\n              display: \"block\",\n              padding: \"0.5em\",\n              marginBottom: \"1em\",\n              marginTop: \"-10px\"\n            }}\n            error={true}\n            header={error}\n          />\n        )}\n      </div>\n    );\n  };\n\n  private handleFormControlBlur = (\n    name: FORM_VALUES_KEY,\n    form: FormikProps<FormValues>\n  ) => () => {\n    form.setFieldTouched(name, true);\n  };\n\n  private handleFocus = () => {\n    this.setState({ graphQlError: undefined });\n  };\n\n  private handleErrorMsgDismiss = () =>\n    this.setState({ graphQlError: undefined });\n\n  private formValuesEmpty = (values: FormValues) => {\n    let result = true;\n\n    for (const value of Object.values(values)) {\n      if (value.trim()) {\n        result = false;\n      }\n    }\n\n    return result;\n  };\n}\n\nexport default Login;\n","import gql from \"graphql-tag\";\n\nimport userFragment from \"./user.fragment\";\nimport { projectFragment } from \"./project.fragment\";\n\nexport const loginMutation = gql`\n  mutation LoginMutation($login: LoginUser!) {\n    login(login: $login) {\n      ...UserFragment\n      projects {\n        ...ProjectFragment\n      }\n    }\n  }\n  ${userFragment}\n  ${projectFragment}\n`;\n\nexport default loginMutation;\n","import gql from \"graphql-tag\";\n\nimport { userFragment } from \"../graphql/user.fragment\";\nimport { UserFragment } from \"../graphql/gen.types\";\nimport { DataValue } from \"react-apollo\";\n\nexport const loggedOutUserLocalQuery = gql`\n  query LoggedOutUserLocalQuery {\n    loggedOutUser @client {\n      ...UserFragment\n    }\n  }\n\n  ${userFragment}\n`;\n\nexport default loggedOutUserLocalQuery;\n\nexport interface LoggedOutUserData {\n  loggedOutUser: UserFragment;\n}\n\nexport type LoggedOutUserProps = DataValue<LoggedOutUserData>;\n","import { graphql, compose, withApollo } from \"react-apollo\";\n\nimport { Login } from \"./route\";\nimport { LoginMutation } from \"../../graphql/gen.types\";\nimport { LoginMutationVariables } from \"../../graphql/gen.types\";\nimport { LoginFn } from \"../../graphql/ops.types\";\nimport { LoginMutationProps } from \"../../graphql/ops.types\";\nimport LOGIN_MUTATION from \"../../graphql/login.mutation\";\nimport { userLocalMutationGql } from \"../../state/user.local.mutation\";\nimport USER_LOCAL_QUERY, {\n  LoggedOutUserData,\n  LoggedOutUserProps\n} from \"../../state/logged-out-user.local.query\";\nimport { OwnProps } from \"./login\";\n\nconst loginMutationGql = graphql<\n  OwnProps,\n  LoginMutation,\n  LoginMutationVariables,\n  LoginMutationProps\n>(LOGIN_MUTATION, {\n  props: props => {\n    const mutate = props.mutate as LoginFn;\n\n    return {\n      login: mutate\n    };\n  }\n});\n\nconst loggedOutUserGql = graphql<\n  {},\n  LoggedOutUserData,\n  {},\n  LoggedOutUserProps | undefined\n>(USER_LOCAL_QUERY, {\n  props: props => props.data\n});\n\nexport default compose(\n  loggedOutUserGql,\n  userLocalMutationGql,\n  loginMutationGql,\n  withApollo\n)(Login);\n"],"sourceRoot":""}