{"version":3,"sources":["components/Header/header.utils.ts","components/Header/component.tsx","components/Header/index.ts","graphql/user-reg.mutation.ts","routes/Registration/reg.ts","routes/Registration/route.tsx","routes/Registration/index.ts"],"names":["INITIAL_STATE","showingSidebar","Header","state","renderWithContext","context","_this$props","_this","props","_this$props$className","className","style","currentProject","title","path","match","showSideBarTrigger","onShowClicked","minWidth600","showSidebar","show","react","concat","onClick","Icon","name","ROOT_URL","NavLink","to","makeNewQuoteURL","app_utils","this","React","currentProjectGql","graphql","CURRENT_PROJECT_LOCAL_QUERY","data","compose","withRouter","FORM_VALUES_KEY","userRegMutation","gql","_templateObject","userFragment","formValues","Object","values","reduce","acc","k","objectSpread","defineProperty","undefined","initialState","initialFormValues","_initialFormValues","NAME","EMAIL","PASSWORD","PASSWORD_CONFIRM","SOURCE","UserReg","_React$Component","_getPrototypeOf2","classCallCheck","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","renderErrorOrSuccess","graphQlError","react_default","a","createElement","Card","Content","extra","Message","error","onDismiss","handleFormErrorDismissed","message","submit","_ref","asyncToGenerator","regenerator_default","mark","_callee","formikBag","regValues","result","user","wrap","_context","prev","next","setSubmitting","entries","_ref2","_ref3","slicedToArray","v","regUser","variables","registration","sent","socket","connect","jwt","updateLocalUser","history","replace","PROJECTS_URL","t0","setState","stop","_x","_x2","renderForm","_ref4","dirty","isSubmitting","errors","handleSubmit","disableSubmit","isEmpty","Form","onSubmit","map","_data","label","type","formik_esm","key","render","renderInput","Button","id","color","inverted","disabled","loading","fluid","LOGIN_URL","formProps","field","form","formIsEmpty","isFormEmpty","booleanError","touched","isSourceField","Field","assign","control","Input","placeholder","autoComplete","onBlur","handleFormControlBlur","onFocus","handleFocus","autoFocus","readOnly","header","setFieldTouched","validate","_arr","_i","_ref7","_ref6","val","validateName","validateEmail","validatePassword","validatePasswordConfirm","validateSource","trim","s","update","$set","email","test","password","confirm","pwd","source","_arr2","_i2","_ref10","_ref9","inherits","createClass","value","setTitle","initialValues","enableReinitialize","Component","regUserGql","REG_USER_MUTATION","mutate","userLocalMutationGql"],"mappings":"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","file":"static/js/12.278898f4.chunk.js","sourcesContent":["import React from \"react\";\nimport { RouteComponentProps } from \"react-router-dom\";\n\nimport { CurrentProjectLocalData } from \"../../state/project.local.query\";\n\nexport type Props = RouteComponentProps<{}> &\n  CurrentProjectLocalData & {\n    title: string;\n    style?: React.CSSProperties;\n    className?: string;\n    showSideBarTrigger?: boolean;\n  };\n\nexport interface State {\n  showingSidebar: boolean;\n}\n\nexport const INITIAL_STATE: State = {\n  showingSidebar: false\n};\n","import * as React from \"react\";\nimport { Icon } from \"semantic-ui-react\";\nimport { NavLink } from \"react-router-dom\";\n\nimport \"./header.scss\";\nimport { Props, State, INITIAL_STATE } from \"./header.utils\";\nimport {\n  AppSidebarConsumer,\n  SideBarContextProps\n} from \"../../containers/App/app.utils\";\nimport { ROOT_URL, makeNewQuoteURL } from \"../../routes/util\";\n\nexport default class Header extends React.Component<Props, State> {\n  state = INITIAL_STATE;\n\n  render() {\n    return <AppSidebarConsumer>{this.renderWithContext}</AppSidebarConsumer>;\n  }\n\n  private renderWithContext = (context: SideBarContextProps) => {\n    const {\n      className = \"\",\n      style,\n      currentProject,\n      title,\n      match: { path },\n      showSideBarTrigger\n    } = this.props;\n\n    const { onShowClicked, minWidth600, showSidebar } = context;\n    const show = minWidth600 ? !showSidebar : true;\n\n    return (\n      <div className={`${className} src-components-header`} style={style}>\n        <div className=\"top\">\n          {showSideBarTrigger && show && (\n            <a className=\"sidebar-trigger item\" onClick={onShowClicked}>\n              <Icon name=\"content\" />\n            </a>\n          )}\n\n          <div className=\"title\">{title}</div>\n        </div>\n\n        {currentProject && (\n          <div className=\"bottom\">\n            {path === ROOT_URL ? (\n              <span className=\"project-title\">{currentProject.title}</span>\n            ) : (\n              <NavLink to={makeNewQuoteURL()} className=\"project-title\">\n                {currentProject.title}\n              </NavLink>\n            )}\n          </div>\n        )}\n      </div>\n    );\n  };\n}\n","import { graphql, compose } from \"react-apollo\";\nimport { withRouter } from \"react-router-dom\";\n\nimport Header from \"./component\";\nimport CURRENT_PROJECT_LOCAL_QUERY, {\n  CurrentProjectLocalData\n} from \"../../state/project.local.query\";\nimport { Props } from \"./header.utils\";\n\nconst currentProjectGql = graphql<\n  Props,\n  CurrentProjectLocalData,\n  {},\n  CurrentProjectLocalData | void\n>(CURRENT_PROJECT_LOCAL_QUERY, {\n  props: props => props.data\n});\n\nexport default compose(\n  withRouter,\n  currentProjectGql\n)(Header);\n","import gql from \"graphql-tag\";\nimport userFragment from \"./user.fragment\";\n\nexport const userRegMutation = gql`\n  mutation UserRegMutation($registration: Registration!) {\n    registration(registration: $registration) {\n      ...UserFragment\n    }\n  }\n  ${userFragment}\n`;\n\nexport default userRegMutation;\n","import { ApolloError } from \"apollo-client\";\nimport { ChildProps } from \"react-apollo\";\nimport { RouteComponentProps } from \"react-router-dom\";\n\nimport { UserRegMutation } from \"../../graphql/gen.types\";\nimport { UserRegMutationVariables } from \"../../graphql/gen.types\";\nimport { UserRegMutationProps } from \"../../graphql/ops.types\";\nimport { UserLocalMutationProps } from \"../../state/user.local.mutation\";\n\nexport type OwnProps = RouteComponentProps<{}> &\n  UserRegMutationProps &\n  UserLocalMutationProps;\n\nexport type Props = ChildProps<\n  OwnProps,\n  UserRegMutation,\n  UserRegMutationVariables\n>;\n\nexport interface FormValues {\n  email: string | undefined;\n  name: string | undefined;\n  password: string | undefined;\n  passwordConfirmation: string | undefined;\n  source: string;\n}\n\nexport enum FORM_VALUES_KEY {\n  EMAIL = \"email\",\n  NAME = \"name\",\n  PASSWORD = \"password\",\n  PASSWORD_CONFIRM = \"passwordConfirmation\",\n  SOURCE = \"source\"\n}\n\nconst formValuesAcc = {} as FormValues;\nconst formValues = Object.values(FORM_VALUES_KEY).reduce(\n  (acc, k) => ({ ...acc, [k]: undefined }),\n  formValuesAcc\n);\n\nexport const initialFormValues = {\n  [FORM_VALUES_KEY.NAME]: \"\",\n  [FORM_VALUES_KEY.EMAIL]: \"\",\n  [FORM_VALUES_KEY.PASSWORD]: \"\",\n  [FORM_VALUES_KEY.PASSWORD_CONFIRM]: \"\",\n  [FORM_VALUES_KEY.SOURCE]: \"password\"\n};\n\nexport interface State {\n  initialFormValues: FormValues;\n  graphQlError?: ApolloError;\n  formValues: FormValues;\n}\n\nexport const initialState: State = {\n  initialFormValues,\n  formValues\n};\n","import React from \"react\";\nimport { Button, Card } from \"semantic-ui-react\";\nimport { Input } from \"semantic-ui-react\";\nimport { Message } from \"semantic-ui-react\";\nimport { Icon } from \"semantic-ui-react\";\nimport { Form } from \"semantic-ui-react\";\nimport { NavLink } from \"react-router-dom\";\nimport { Formik } from \"formik\";\nimport { FormikProps, FormikActions } from \"formik\";\nimport { Field } from \"formik\";\nimport { FieldProps } from \"formik\";\nimport { FormikErrors } from \"formik\";\nimport isEmpty from \"lodash/isEmpty\";\nimport update from \"immutability-helper\";\n\nimport \"./reg.scss\";\nimport { Props, FORM_VALUES_KEY, State, initialState, FormValues } from \"./reg\";\nimport { setTitle, PROJECTS_URL, LOGIN_URL } from \"../../routes/util\";\nimport RootHeader from \"../../components/Header\";\nimport { Registration } from \"../../graphql/gen.types\";\nimport socket from \"../../socket\";\n\nexport class UserReg extends React.Component<Props, State> {\n  state = initialState;\n\n  componentDidMount() {\n    setTitle(\"Sign Up\");\n  }\n\n  componentWillUnmount() {\n    setTitle();\n  }\n\n  render() {\n    return (\n      <div className=\"user-reg-route\">\n        <RootHeader title=\"Thysis\" />\n\n        <div className=\"main\">\n          <Formik\n            initialValues={this.state.initialFormValues}\n            enableReinitialize={true}\n            onSubmit={this.submit}\n            render={this.renderForm}\n            validate={this.validate}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  private renderErrorOrSuccess = () => {\n    const { graphQlError } = this.state;\n\n    if (graphQlError) {\n      return (\n        <Card.Content extra={true}>\n          <Message error={true} onDismiss={this.handleFormErrorDismissed}>\n            <Message.Content>{graphQlError.message}</Message.Content>\n          </Message>\n        </Card.Content>\n      );\n    }\n\n    return undefined;\n  };\n\n  private submit = async (\n    values: FormValues,\n    formikBag: FormikActions<FormValues>\n  ) => {\n    formikBag.setSubmitting(true);\n\n    let regValues = {} as Registration;\n    regValues = Object.entries(this.state.formValues).reduce(\n      (acc, [k, v]) => ({ ...acc, [k]: v }),\n      regValues\n    );\n\n    try {\n      const result = await this.props.regUser({\n        variables: {\n          registration: regValues\n        }\n      });\n\n      if (result && result.data) {\n        const user = result.data.registration;\n\n        if (user) {\n          socket.connect(user.jwt);\n        }\n\n        await this.props.updateLocalUser({\n          variables: { user }\n        });\n\n        this.props.history.replace(PROJECTS_URL);\n      }\n    } catch (error) {\n      formikBag.setSubmitting(false);\n      this.setState({ graphQlError: error });\n    }\n  };\n\n  private renderForm = ({\n    dirty,\n    isSubmitting,\n    errors,\n    handleSubmit\n  }: FormikProps<FormValues>) => {\n    const { graphQlError } = this.state;\n    const dirtyOrSubmitting = !dirty || isSubmitting;\n    const disableSubmit =\n      dirtyOrSubmitting || !isEmpty(errors) || !!graphQlError;\n\n    return (\n      <Card>\n        <Card.Content className=\"form-title\" extra={true}>\n          Sign up for Thysis\n        </Card.Content>\n\n        {this.renderErrorOrSuccess()}\n\n        <Card.Content>\n          <Form onSubmit={handleSubmit}>\n            {[\n              [\"Name\", \"text\", FORM_VALUES_KEY.NAME],\n              [\"Email\", \"email\", FORM_VALUES_KEY.EMAIL],\n              [\"Password\", \"password\", FORM_VALUES_KEY.PASSWORD],\n              [\n                \"Password Confirm\",\n                \"password\",\n                FORM_VALUES_KEY.PASSWORD_CONFIRM\n              ],\n              [\"Source\", \"text\", FORM_VALUES_KEY.SOURCE]\n            ].map(data => {\n              const [label, type, name] = data;\n              return (\n                <Field\n                  key={name}\n                  name={name}\n                  render={this.renderInput(label, type)}\n                />\n              );\n            })}\n\n            <Button\n              id=\"author-modal-submit\"\n              color=\"green\"\n              inverted={true}\n              disabled={disableSubmit}\n              loading={isSubmitting}\n              type=\"submit\"\n              fluid={true}\n            >\n              <Icon name=\"checkmark\" /> Ok\n            </Button>\n          </Form>\n        </Card.Content>\n\n        <Card.Content extra={true}>\n          <NavLink className=\"to-login-button\" to={LOGIN_URL}>\n            Already have an account? Login\n          </NavLink>\n        </Card.Content>\n      </Card>\n    );\n  };\n\n  private renderInput = (label: string, type: string) => (\n    formProps: FieldProps<FormValues>\n  ) => {\n    const { field, form } = formProps;\n    const name = field.name as FORM_VALUES_KEY;\n    const error = form.errors[name];\n    const formIsEmpty = this.isFormEmpty();\n    const booleanError = !!error && !formIsEmpty;\n    const touched = form.touched[name];\n    const isSourceField = name === FORM_VALUES_KEY.SOURCE;\n\n    return (\n      <div>\n        <Form.Field\n          {...field}\n          className={`form-field ${isSourceField ? \"disabled\" : \"\"}`}\n          type={type}\n          control={Input}\n          placeholder={label}\n          autoComplete=\"off\"\n          label={label}\n          id={name}\n          error={booleanError}\n          onBlur={this.handleFormControlBlur(name, form)}\n          onFocus={this.handleFocus}\n          autoFocus={name === FORM_VALUES_KEY.NAME}\n          readOnly={isSourceField}\n        />\n\n        {booleanError && touched && !formIsEmpty && (\n          <Message error={true} header={error} />\n        )}\n      </div>\n    );\n  };\n\n  private handleFormControlBlur = (\n    name: FORM_VALUES_KEY,\n    form: FormikProps<FormValues>\n  ) => () => {\n    form.setFieldTouched(name, true);\n  };\n\n  private handleFocus = () => {\n    this.setState({ graphQlError: undefined });\n  };\n\n  private handleFormErrorDismissed = () =>\n    this.setState({ graphQlError: undefined });\n\n  private validate = (values: FormValues) => {\n    const errors: FormikErrors<FormValues> = {};\n\n    for (const [key, val] of Object.entries(values)) {\n      let error;\n\n      switch (key) {\n        case FORM_VALUES_KEY.NAME:\n          error = this.validateName(val);\n          break;\n\n        case FORM_VALUES_KEY.EMAIL:\n          error = this.validateEmail(val);\n          break;\n\n        case FORM_VALUES_KEY.PASSWORD:\n          error = this.validatePassword(val);\n          break;\n\n        case FORM_VALUES_KEY.PASSWORD_CONFIRM:\n          error = this.validatePasswordConfirm(\n            val,\n            values[FORM_VALUES_KEY.PASSWORD] || \"\"\n          );\n          break;\n\n        case FORM_VALUES_KEY.SOURCE:\n          error = this.validateSource(val);\n      }\n\n      if (error) {\n        errors[key] = error;\n        return errors;\n      }\n    }\n\n    return errors;\n  };\n\n  private validateName = (name: string | undefined) => {\n    name = (name || \"\").trim();\n\n    this.setState(s =>\n      update(s, {\n        formValues: {\n          [FORM_VALUES_KEY.NAME]: {\n            $set: name || undefined\n          }\n        }\n      })\n    );\n\n    if (!name) {\n      return \"Enter name\";\n    }\n\n    if (name.length < 2) {\n      return \"Too short\";\n    }\n\n    return \"\";\n  };\n\n  private validateEmail = (email: string | undefined) => {\n    email = (email || \"\").trim();\n    let error = \"\";\n\n    if (\n      !(\n        email &&\n        /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/.test(\n          email\n        )\n      )\n    ) {\n      error = \"Enter valid email\";\n    }\n\n    this.setState(s =>\n      update(s, {\n        formValues: {\n          [FORM_VALUES_KEY.EMAIL]: {\n            $set: (error && undefined) || email\n          }\n        }\n      })\n    );\n\n    return error;\n  };\n\n  private validatePassword = (password: string | undefined) => {\n    password = (password || \"\").trim();\n    let error = \"\";\n\n    if (!password) {\n      error = \"Enter Password\";\n    } else if (password.length < 4) {\n      error = \"Too short\";\n    }\n\n    this.setState(s =>\n      update(s, {\n        formValues: {\n          [FORM_VALUES_KEY.PASSWORD]: {\n            $set: (error && undefined) || password\n          }\n        }\n      })\n    );\n\n    return error;\n  };\n\n  private validatePasswordConfirm = (\n    confirm: string | undefined,\n    pwd: string\n  ) => {\n    confirm = (confirm || \"\").trim();\n    let error = \"\";\n\n    if (!confirm) {\n      error = \"Confirm Password\";\n    } else if (confirm !== pwd) {\n      error = \"Passwords don't match\";\n    }\n\n    this.setState(s =>\n      update(s, {\n        formValues: {\n          [FORM_VALUES_KEY.PASSWORD_CONFIRM]: {\n            $set: (error && undefined) || confirm\n          }\n        }\n      })\n    );\n\n    return error;\n  };\n\n  private validateSource = (source: string | undefined) => {\n    source = (source || \"\").trim();\n\n    this.setState(s =>\n      update(s, {\n        formValues: {\n          [FORM_VALUES_KEY.SOURCE]: {\n            $set: source || \"password\"\n          }\n        }\n      })\n    );\n\n    return \"\";\n  };\n\n  private isFormEmpty = () => {\n    for (const [key, val] of Object.entries(this.state.formValues)) {\n      if (key !== FORM_VALUES_KEY.SOURCE && val !== undefined) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n}\n\nexport default UserReg;\n","import { graphql, compose } from \"react-apollo\";\n\nimport { UserRegMutation } from \"../../graphql/gen.types\";\nimport { UserRegMutationVariables } from \"../../graphql/gen.types\";\nimport { UserRegFn } from \"../../graphql/ops.types\";\nimport { UserRegMutationProps } from \"../../graphql/ops.types\";\nimport REG_USER_MUTATION from \"../../graphql/user-reg.mutation\";\nimport { userLocalMutationGql } from \"./../../state/user.local.mutation\";\nimport { UserReg } from \"./route\";\n\nconst regUserGql = graphql<\n  {},\n  UserRegMutation,\n  UserRegMutationVariables,\n  UserRegMutationProps\n>(REG_USER_MUTATION, {\n  props: props => {\n    const mutate = props.mutate as UserRegFn;\n\n    return {\n      regUser: mutate\n    };\n  }\n});\n\nexport default compose(\n  userLocalMutationGql,\n  regUserGql\n)(UserReg);\n"],"sourceRoot":""}