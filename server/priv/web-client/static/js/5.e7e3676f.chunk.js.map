{"version":3,"sources":["graphql/quote-from-tag.fragment.ts","graphql/quotes-1.query.ts","utils/simple-error-styles.util.ts","components/QuoteItem/component.tsx","components/QuoteItem/index.ts","routes/Source/styles.ts","routes/Source/SourceAccordion/source-accordion.ts","graphql/update-source.mutation.ts","../node_modules/semantic-ui-react/dist/es/modules/Accordion/AccordionTitle.js","../node_modules/semantic-ui-react/dist/es/modules/Accordion/AccordionContent.js","../node_modules/semantic-ui-react/dist/es/modules/Accordion/AccordionPanel.js","../node_modules/semantic-ui-react/dist/es/modules/Accordion/AccordionAccordion.js","../node_modules/semantic-ui-react/dist/es/modules/Accordion/Accordion.js","routes/Source/SourceAccordion/styles.ts","graphql/source-full.query.ts","routes/Source/SourceAccordion/SuccessModal/styles.ts","routes/Source/SourceAccordion/SuccessModal/index.ts","routes/Source/SourceAccordion/SuccessModal/component.tsx","routes/Source/SourceAccordion/ErrorModal/styles.ts","routes/Source/SourceAccordion/ErrorModal/index.ts","routes/Source/SourceAccordion/ErrorModal/component.tsx","routes/Source/SourceAccordion/component.tsx","routes/Source/SourceAccordion/index.ts","routes/Source/route.tsx","routes/Source/index.ts"],"names":["quoteFromTagFrag","gql","_templateObject","quotes1Query","_colors__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","__webpack_exports__","flex","display","justifyContent","alignItems","color","ERROR_COLOR","fontWeight","fontSize","QuoteItem","_React$Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","_this$props","props","id","text","date","source","react_default","a","createElement","List","Item","className","Content","Header","as","NavLink","to","makeQuoteURL","makeSourceURL","Description","React","Component","quote","index","component_QuoteItem","assign","jss","setup","preset","DetailAction","AccordionIndex","styles","SourceRoot","height","overflow","position","gridTemplateAreas","gridTemplateRows","gridTemplateColumns","rootHeader","gridArea","sourceMain","bottomMenu","header","flexShrink","maxHeight","padding","newQuoteButton","bottom","right","zIndex","&:hover","errorContainer","objectSpread","classes","createStyleSheet","attach","initialState","detailAction","VIEWING","openUpdateSourceSuccessModal","accordionProps","_accordionProps","defineProperty","DETAIL","LIST_QUOTES","formikConfig","handleSubmit","_handleSubmit","asyncToGenerator","regenerator_default","mark","_callee","values","wrap","_context","prev","next","abrupt","stop","_x","mapPropsToValues","_ref","authors","reduce","acc2","push","fullName","authorFullName","enableReinitialize","validate","_ref2","topic","errors","sourceType","length","updateSource","sourceFullFrag","AccordionTitle_AccordionTitle","_Component","AccordionTitle","_getPrototypeOf2","_this","classCallCheck_default","_len","args","Array","_key","possibleConstructorReturn_default","getPrototypeOf_default","call","concat","defineProperty_default","assertThisInitialized_default","e","invoke_default","inherits_default","createClass_default","active","children","content","classnames_default","classNameBuilders","rest","getUnhandledProps","ElementType","getElementType","isNil_default","extends_default","onClick","handleClick","Icon","name","react","AccordionContent","es_lib","isNil","propTypes","create","factories","handledProps","Accordion_AccordionContent","AccordionPanel_AccordionPanel","AccordionPanel","predefinedProps","titleProps","title","autoGenerateKey","defaultProps","overrideProps","handleTitleOverrides","Accordion_AccordionPanel","AccordionAccordion_AccordionAccordion","AccordionAccordion","exclusive","activeIndex","state","includes_default","without_default","toConsumableArray_default","trySetState","computeNewIndex","_this2","panels","map_default","panel","isIndexActive","onTitleClick","handleTitleClick","AutoControlledComponent","Accordion","fluid","inverted","styled","Panel","Title","Accordion_Accordion","accordion","flexDirection","root","labels","details","paddingLeft","detailsAccordionContent","&> div","marginBottom","toggleEditView","top","&>.icon","width","cursor","&.edit-icon","&.editing-icon","paddingTop","accordionContent","overflowY","overflowX","wordWrap","wordBreak","quotesAccordionStyle","errorMessage","error","&>.ui.fluid.input>input","borderColor","accordionContentStyle","sourceFullQuery","source_full_query_templateObject","modal","marginTop","maxWidth","background","SUCCESS_BG_COLOR","SUCCESS_COLOR","messageContainer","messageIcon","paddingRight","messageHeader","textAlign","buttonsContainer","borderTop","modalStyle","contentStyle","messageIconStyle","SuccessModal","dismiss","open","Modal","style","dimmer","onClose","Button","ERROR_BG_COLOR","errorStyle","ErrorModal","cotent","message","SourceAccordion","renderDetail","year","publication","url","renderUpdatingUI","renderSourceType","isEditing","renderAuthorsControl","map","renderAuthor","renderTextField","sourceDisplay","renderEditViewControls","handleToggleEditView","isEqual","isEmpty","submit","author","makeAuthorRouteURL","isSubmitting","_this$state","updateSourceError","SourceAccordion_ErrorModal","handleDismissErrorModal","SourceAccordion_SuccessModal","handleDismissSuccessModal","renderLoader","renderAccordionQuotes","quotesAccordion","renderAccordionContentQuotes","_this$state2","loadingQuotes","fetchQuotesError","whiteSpace","JSON","stringify","quotes","divided","relaxed","renderQuote","label","Dimmer","Loader","size","charAt","toUpperCase","slice","renderTextControl","href","booleanError","touched","fieldWrapper","Form","Field","control","AuthorsControlComponent","selectError","handleBlur","handleFormControlBlur","handleChange","handleControlChange","renderFieldError","renderSourceTypeControl","SourceTypeControlComponent","Input","placeholder","autoComplete","onBlur","onChange","show","undefined","setFieldTouched","val","other","setFieldValue","_x2","handleAccordionClick","event","fetchQuotes","setState","s","update","$set","getNewDetailState","EDITING","_callee2","result","_context2","client","query","QUOTES_QUERY","variables","sent","data","t0","_callee3","_this$props2","setSubmitting","previousAuthors","authorIds","updatedSource","_context3","sourceTypeId","filter","includes","deletedAuthors","_ref4","newData","newSource","writeQuery","SOURCE_QUERY","_this$state3","shouldResetEditSourceForm","editedSource","prevProps","prevState","resetForm","snapshot","updateSourceGraphql","graphql","UPDATE_SOURCE_MUTATION","mutate","compose","withFormik","withApollo","Source","showingQuotes","renderMainOrLoading","loading","makeNewQuoteURL","circular","Source_SourceAccordion","setTitle","AppSidebar","RootHeader","showSideBarTrigger","sourceGraphQl","options","match","params"],"mappings":"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","file":"static/js/5.e7e3676f.chunk.js","sourcesContent":["import gql from \"graphql-tag\";\n\nexport const quoteFromTagFrag = gql`\n  fragment QuoteFromTagFrag on Quote {\n    id\n    text\n    date\n    source {\n      id\n      display\n    }\n  }\n`;\n\nexport default quoteFromTagFrag;\n","import gql from \"graphql-tag\";\n\nimport { quoteFromTagFrag } from \"./quote-from-tag.fragment\";\n\nexport const quotes1Query = gql`\n  query Quotes1($quote: GetQuotes) {\n    quotes(quote: $quote) {\n      ...QuoteFromTagFrag\n    }\n  }\n\n  ${quoteFromTagFrag}\n`;\n\nexport default quotes1Query;\n","import { ERROR_COLOR } from \"./colors\";\n\nexport default {\n  flex: 1,\n  display: \"flex\",\n  justifyContent: \"center\",\n  alignItems: \"center\",\n  color: ERROR_COLOR,\n  fontWeight: 900,\n  fontSize: \"1.2em\"\n};\n","import React from \"react\";\nimport { List } from \"semantic-ui-react\";\nimport { NavLink } from \"react-router-dom\";\n\nimport \"./quote-item.scss\";\nimport { QuoteFromTagFrag } from \"../../graphql/gen.types\";\nimport { makeQuoteURL } from \"../../routes/util\";\nimport { makeSourceURL } from \"../../routes/util\";\n\ntype Props = QuoteFromTagFrag;\n\nexport class QuoteItem extends React.Component<Props> {\n  render() {\n    const { id, text, date, source } = this.props;\n    return (\n      <List.Item key={id} className=\"quote-item\">\n        <List.Content>\n          <List.Header\n            as={NavLink}\n            to={makeQuoteURL(id)}\n            className=\"quote-text\"\n          >\n            {text}\n          </List.Header>\n\n          {source && (\n            <NavLink to={makeSourceURL(source.id)} className=\"source-display\">\n              {source.display}\n            </NavLink>\n          )}\n\n          <List.Description className=\"quote-date\">{date}</List.Description>\n        </List.Content>\n      </List.Item>\n    );\n  }\n}\n\nexport default (quote: null | QuoteFromTagFrag, index: number) => {\n  if (!quote) {\n    return undefined;\n  }\n\n  return <QuoteItem key={quote.id} {...quote} />;\n};\n","import QuoteItem from \"./component\";\n\nexport default QuoteItem;\n","import jss from \"jss\";\nimport preset from \"jss-preset-default\";\n\nimport { SimpleCss } from \"../../constants\";\nimport errorContainer from \"../../utils/simple-error-styles.util\";\n\njss.setup(preset());\n\nexport const styles = {\n  SourceRoot: {\n    height: \"100%\",\n    overflow: \"hidden\",\n    position: \"relative\",\n    flex: 1,\n    display: \"grid\",\n    gridTemplateAreas: `\n      \"header\"\n      \"main\"\n      \"bottom-menu\";\n    `,\n    gridTemplateRows: \"auto 1fr auto\",\n    gridTemplateColumns: \"100%\"\n  },\n\n  rootHeader: {\n    gridArea: \"header\"\n  },\n\n  sourceMain: {\n    gridArea: \"main\",\n    overflow: \"hidden\",\n    position: \"relative\"\n  },\n\n  bottomMenu: {\n    gridArea: \"bottom-menu\"\n  },\n  header: {\n    flexShrink: 0,\n    maxHeight: \"15vh\",\n    overflow: \"hidden\",\n    padding: \"0 0 0 5px\"\n  },\n\n  newQuoteButton: {\n    position: \"absolute\",\n    bottom: 15,\n    right: 15,\n    color: \"#5faac7\",\n    zIndex: 10,\n    fontWeight: 900,\n    fontSize: \"1.3em\",\n\n    \"&:hover\": {\n      color: \"#5faac7\"\n    }\n  },\n\n  errorContainer: {\n    ...errorContainer\n  }\n} as SimpleCss;\n\nexport const { classes } = jss.createStyleSheet(styles).attach();\n","import { AccordionTitleProps } from \"semantic-ui-react\";\nimport { WithApolloClient } from \"react-apollo\";\nimport { ApolloError } from \"apollo-client\";\nimport { InjectedFormikProps } from \"formik\";\nimport { WithFormikConfig } from \"formik\";\nimport { FormikErrors } from \"formik\";\n\nimport { SourceFullFrag, QuoteFromTagFrag } from \"../../../graphql/gen.types\";\nimport { UpdateSourceMutationFn } from \"../../../graphql/ops.types\";\nimport { AuthorWithFullName, authorFullName } from \"../../../graphql/utils\";\n\nexport enum DetailAction {\n  EDITING = \"editing\", // when we are editing source\n  VIEWING = \"viewing\" // when we are viewing source\n}\n\nexport interface FormOutput extends SourceFullFrag {\n  authors: AuthorWithFullName[];\n}\n\nexport type AccordionTitleClickCb = (\n  event: React.MouseEvent<HTMLDivElement>,\n  data: AccordionTitleProps\n) => void;\n\nexport interface OwnProps {\n  source: SourceFullFrag;\n  updateSource: UpdateSourceMutationFn;\n}\n\nexport type FormErrors = { [k in keyof FormOutput]: string };\n\nexport type PropsWithApolloClient = WithApolloClient<OwnProps>;\n\nexport type Props = InjectedFormikProps<PropsWithApolloClient, FormOutput> & {\n  errors: FormErrors;\n};\n\nexport enum AccordionIndex {\n  DETAIL = 0,\n  LIST_QUOTES = 1\n}\n\nexport interface State {\n  detailAction: DetailAction;\n  loadingQuotes?: boolean;\n  quotes?: QuoteFromTagFrag[];\n  fetchQuotesError?: ApolloError;\n  updateSourceError?: ApolloError;\n  openUpdateSourceSuccessModal: boolean;\n  accordionProps: { [T in AccordionIndex]: boolean };\n}\n\nexport const initialState: State = {\n  detailAction: DetailAction.VIEWING,\n  openUpdateSourceSuccessModal: false,\n  accordionProps: {\n    [AccordionIndex.DETAIL]: true,\n    [AccordionIndex.LIST_QUOTES]: false\n  }\n};\n\nexport const formikConfig: WithFormikConfig<Props, FormOutput> = {\n  handleSubmit: async values => null,\n\n  mapPropsToValues: ({ source }) => {\n    const authors = source.authors.reduce(\n      (acc2, a) => {\n        if (a) {\n          acc2.push({\n            ...a,\n            fullName: authorFullName(a)\n          });\n        }\n        return acc2;\n      },\n      [] as AuthorWithFullName[]\n    );\n\n    return { ...source, authors };\n  },\n\n  enableReinitialize: true,\n\n  validate: ({ authors, topic, sourceType }) => {\n    const errors: FormikErrors<FormErrors> = {};\n\n    if (!sourceType) {\n      errors.sourceType = \"Select a source type\";\n    }\n\n    if (!authors || !authors.length) {\n      errors.authors = \"Select at least one author\";\n    }\n\n    if (!topic || topic.length < 3) {\n      errors.topic = \"Enter source topic according to author(s)\";\n    }\n\n    return errors;\n  }\n};\n","import gql from \"graphql-tag\";\n\nimport sourceFullFrag from \"./source-full.fragment\";\n\nexport const updateSource = gql`\n  mutation UpdateSource($source: UpdateSourceInput!) {\n    updateSource(source: $source) {\n      ...SourceFullFrag\n    }\n  }\n\n  ${sourceFullFrag}\n`;\n\nexport default updateSource;\n","import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _isNil from \"lodash/isNil\";\nimport _invoke from \"lodash/invoke\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { createShorthandFactory, customPropTypes, getElementType, getUnhandledProps, useKeyOnly } from '../../lib';\nimport Icon from '../../elements/Icon';\n/**\n * A title sub-component for Accordion component.\n */\n\nvar AccordionTitle =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(AccordionTitle, _Component);\n\n  function AccordionTitle() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, AccordionTitle);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AccordionTitle)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleClick\", function (e) {\n      return _invoke(_this.props, 'onClick', e, _this.props);\n    });\n\n    return _this;\n  }\n\n  _createClass(AccordionTitle, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          active = _this$props.active,\n          children = _this$props.children,\n          className = _this$props.className,\n          content = _this$props.content;\n      var classes = cx(useKeyOnly(active, 'active'), 'title', className);\n      var rest = getUnhandledProps(AccordionTitle, this.props);\n      var ElementType = getElementType(AccordionTitle, this.props);\n\n      if (_isNil(content)) {\n        return React.createElement(ElementType, _extends({}, rest, {\n          className: classes,\n          onClick: this.handleClick\n        }), children);\n      }\n\n      return React.createElement(ElementType, _extends({}, rest, {\n        className: classes,\n        onClick: this.handleClick\n      }), React.createElement(Icon, {\n        name: \"dropdown\"\n      }), content);\n    }\n  }]);\n\n  return AccordionTitle;\n}(Component);\n\n_defineProperty(AccordionTitle, \"handledProps\", [\"active\", \"as\", \"children\", \"className\", \"content\", \"index\", \"onClick\"]);\n\nexport { AccordionTitle as default };\nAccordionTitle.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Whether or not the title is in the open state. */\n  active: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** AccordionTitle index inside Accordion. */\n  index: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * Called on click.\n   *\n   * @param {SyntheticEvent} event - React's original SyntheticEvent.\n   * @param {object} data - All props.\n   */\n  onClick: PropTypes.func\n} : {};\nAccordionTitle.create = createShorthandFactory(AccordionTitle, function (content) {\n  return {\n    content: content\n  };\n});","import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthandFactory, customPropTypes, getElementType, getUnhandledProps, useKeyOnly } from '../../lib';\n/**\n * A content sub-component for Accordion component.\n */\n\nfunction AccordionContent(props) {\n  var active = props.active,\n      children = props.children,\n      className = props.className,\n      content = props.content;\n  var classes = cx('content', useKeyOnly(active, 'active'), className);\n  var rest = getUnhandledProps(AccordionContent, props);\n  var ElementType = getElementType(AccordionContent, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nAccordionContent.handledProps = [\"active\", \"as\", \"children\", \"className\", \"content\"];\nAccordionContent.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Whether or not the content is visible. */\n  active: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand\n} : {};\nAccordionContent.create = createShorthandFactory(AccordionContent, function (content) {\n  return {\n    content: content\n  };\n});\nexport default AccordionContent;","import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _invoke from \"lodash/invoke\";\nimport PropTypes from 'prop-types';\nimport { Component } from 'react';\nimport { createShorthandFactory, customPropTypes } from '../../lib';\nimport AccordionTitle from './AccordionTitle';\nimport AccordionContent from './AccordionContent';\n/**\n * A panel sub-component for Accordion component.\n */\n\nvar AccordionPanel =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(AccordionPanel, _Component);\n\n  function AccordionPanel() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, AccordionPanel);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AccordionPanel)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleTitleOverrides\", function (predefinedProps) {\n      return {\n        onClick: function onClick(e, titleProps) {\n          _invoke(predefinedProps, 'onClick', e, titleProps);\n\n          _invoke(_this.props, 'onTitleClick', e, titleProps);\n        }\n      };\n    });\n\n    return _this;\n  }\n\n  _createClass(AccordionPanel, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          active = _this$props.active,\n          content = _this$props.content,\n          index = _this$props.index,\n          title = _this$props.title;\n      return [AccordionTitle.create(title, {\n        autoGenerateKey: false,\n        defaultProps: {\n          active: active,\n          index: index,\n          key: 'title'\n        },\n        overrideProps: this.handleTitleOverrides\n      }), AccordionContent.create(content, {\n        autoGenerateKey: false,\n        defaultProps: {\n          active: active,\n          key: 'content'\n        }\n      })];\n    }\n  }]);\n\n  return AccordionPanel;\n}(Component);\n\n_defineProperty(AccordionPanel, \"handledProps\", [\"active\", \"content\", \"index\", \"onTitleClick\", \"title\"]);\n\nAccordionPanel.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** Whether or not the title is in the open state. */\n  active: PropTypes.bool,\n\n  /** A shorthand for Accordion.Content. */\n  content: customPropTypes.itemShorthand,\n\n  /** A panel index. */\n  index: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * Called when a panel title is clicked.\n   *\n   * @param {SyntheticEvent} event - React's original SyntheticEvent.\n   * @param {object} data - All item props.\n   */\n  onTitleClick: PropTypes.func,\n\n  /** A shorthand for Accordion.Title. */\n  title: customPropTypes.itemShorthand\n} : {};\nAccordionPanel.create = createShorthandFactory(AccordionPanel, null);\nexport default AccordionPanel;","import _extends from \"@babel/runtime/helpers/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _map from \"lodash/map\";\nimport _invoke from \"lodash/invoke\";\nimport _without from \"lodash/without\";\nimport _includes from \"lodash/includes\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { AutoControlledComponent as Component, childrenUtils, createShorthandFactory, customPropTypes, getElementType, getUnhandledProps } from '../../lib';\nimport AccordionPanel from './AccordionPanel';\n/**\n * An Accordion can contain sub-accordions.\n */\n\nvar AccordionAccordion =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(AccordionAccordion, _Component);\n\n  function AccordionAccordion() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, AccordionAccordion);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AccordionAccordion)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"computeNewIndex\", function (index) {\n      var exclusive = _this.props.exclusive;\n      var activeIndex = _this.state.activeIndex;\n      if (exclusive) return index === activeIndex ? -1 : index; // check to see if index is in array, and remove it, if not then add it\n\n      return _includes(activeIndex, index) ? _without(activeIndex, index) : _toConsumableArray(activeIndex).concat([index]);\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleTitleClick\", function (e, titleProps) {\n      var index = titleProps.index;\n\n      _this.trySetState({\n        activeIndex: _this.computeNewIndex(index)\n      });\n\n      _invoke(_this.props, 'onTitleClick', e, titleProps);\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"isIndexActive\", function (index) {\n      var exclusive = _this.props.exclusive;\n      var activeIndex = _this.state.activeIndex;\n      return exclusive ? activeIndex === index : _includes(activeIndex, index);\n    });\n\n    return _this;\n  }\n\n  _createClass(AccordionAccordion, [{\n    key: \"getInitialAutoControlledState\",\n    value: function getInitialAutoControlledState(_ref) {\n      var exclusive = _ref.exclusive;\n      return {\n        activeIndex: exclusive ? -1 : []\n      };\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          className = _this$props.className,\n          children = _this$props.children,\n          panels = _this$props.panels;\n      var classes = cx('accordion', className);\n      var rest = getUnhandledProps(AccordionAccordion, this.props);\n      var ElementType = getElementType(AccordionAccordion, this.props);\n      return React.createElement(ElementType, _extends({}, rest, {\n        className: classes\n      }), childrenUtils.isNil(children) ? _map(panels, function (panel, index) {\n        return AccordionPanel.create(panel, {\n          defaultProps: {\n            active: _this2.isIndexActive(index),\n            index: index,\n            onTitleClick: _this2.handleTitleClick\n          }\n        });\n      }) : children);\n    }\n  }]);\n\n  return AccordionAccordion;\n}(Component);\n\n_defineProperty(AccordionAccordion, \"defaultProps\", {\n  exclusive: true\n});\n\n_defineProperty(AccordionAccordion, \"autoControlledProps\", ['activeIndex']);\n\n_defineProperty(AccordionAccordion, \"handledProps\", [\"activeIndex\", \"as\", \"children\", \"className\", \"defaultActiveIndex\", \"exclusive\", \"onTitleClick\", \"panels\"]);\n\nexport { AccordionAccordion as default };\nAccordionAccordion.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Index of the currently active panel. */\n  activeIndex: customPropTypes.every([customPropTypes.disallow(['children']), PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number])]),\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Initial activeIndex value. */\n  defaultActiveIndex: customPropTypes.every([customPropTypes.disallow(['children']), PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number])]),\n\n  /** Only allow one panel open at a time. */\n  exclusive: PropTypes.bool,\n\n  /**\n   * Called when a panel title is clicked.\n   *\n   * @param {SyntheticEvent} event - React's original SyntheticEvent.\n   * @param {object} data - All item props.\n   */\n  onTitleClick: customPropTypes.every([customPropTypes.disallow(['children']), PropTypes.func]),\n\n  /** Shorthand array of props for Accordion. */\n  panels: customPropTypes.every([customPropTypes.disallow(['children']), PropTypes.arrayOf(PropTypes.shape({\n    content: customPropTypes.itemShorthand,\n    title: customPropTypes.itemShorthand\n  }))])\n} : {};\nAccordionAccordion.create = createShorthandFactory(AccordionAccordion, function (content) {\n  return {\n    content: content\n  };\n});","import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { getUnhandledProps, useKeyOnly } from '../../lib';\nimport AccordionAccordion from './AccordionAccordion';\nimport AccordionContent from './AccordionContent';\nimport AccordionPanel from './AccordionPanel';\nimport AccordionTitle from './AccordionTitle';\n/**\n * An accordion allows users to toggle the display of sections of content.\n */\n\nfunction Accordion(props) {\n  var className = props.className,\n      fluid = props.fluid,\n      inverted = props.inverted,\n      styled = props.styled;\n  var classes = cx('ui', useKeyOnly(fluid, 'fluid'), useKeyOnly(inverted, 'inverted'), useKeyOnly(styled, 'styled'), className);\n  var rest = getUnhandledProps(Accordion, props);\n  return React.createElement(AccordionAccordion, _extends({}, rest, {\n    className: classes\n  }));\n}\n\nAccordion.handledProps = [\"className\", \"fluid\", \"inverted\", \"styled\"];\nAccordion.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Format to take up the width of its container. */\n  fluid: PropTypes.bool,\n\n  /** Format for dark backgrounds. */\n  inverted: PropTypes.bool,\n\n  /** Adds some basic styling to accordion panels. */\n  styled: PropTypes.bool\n} : {};\nAccordion.Accordion = AccordionAccordion;\nAccordion.Content = AccordionContent;\nAccordion.Panel = AccordionPanel;\nAccordion.Title = AccordionTitle;\nexport default Accordion;","import jss from \"jss\";\nimport preset from \"jss-preset-default\";\n\nimport { SimpleCss } from \"../../../constants\";\nimport { ERROR_COLOR } from \"../../../utils/colors\";\n\njss.setup(preset());\n\nconst styles = {\n  accordion: {\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    position: \"relative\"\n  },\n\n  root: {\n    display: \"grid\",\n    gridTemplateAreas: `\n      \"labels details\"\n    `,\n    gridTemplateColumns: \"1fr 3fr\"\n  },\n\n  labels: {\n    gridArea: \"labels\"\n  },\n\n  details: {\n    gridArea: \"details\",\n    paddingLeft: 15\n  },\n\n  detailsAccordionContent: {\n    \"&> div\": {\n      marginBottom: 15\n    }\n  },\n\n  toggleEditView: {\n    position: \"absolute\",\n    right: 0,\n    top: -3,\n\n    \"&>.icon\": {\n      width: \"3em\",\n      height: \"3em\",\n      cursor: \"pointer\",\n\n      \"&.edit-icon\": {\n        padding: \"15px 35px 10px 50px\"\n      },\n\n      \"&.editing-icon\": {\n        paddingTop: \"15px\"\n      }\n    }\n  },\n\n  accordionContent: {\n    overflowY: \"auto\",\n    overflowX: \"hidden\",\n    wordWrap: \"break-word\",\n    wordBreak: \"break-all\"\n  },\n\n  quotesAccordionStyle: {\n    padding: \"0em 0.2em 0.8em\"\n  },\n\n  errorMessage: {\n    color: ERROR_COLOR\n  },\n\n  error: {\n    \"&>.ui.fluid.input>input\": {\n      color: ERROR_COLOR,\n      borderColor: ERROR_COLOR\n    }\n  }\n} as SimpleCss;\n\nexport const accordionContentStyle = styles.accordionContent;\nexport const { classes } = jss.createStyleSheet(styles).attach();\n","import gql from \"graphql-tag\";\n\nimport sourceFullFrag from \"./source-full.fragment\";\n\nexport const sourceFullQuery = gql`\n  query SourceFull($source: GetSourceInput!) {\n    source(source: $source) {\n      ...SourceFullFrag\n    }\n  }\n\n  ${sourceFullFrag}\n`;\n\nexport default sourceFullQuery;\n","import jss from \"jss\";\nimport preset from \"jss-preset-default\";\n\nimport { SUCCESS_COLOR } from \"../../../../utils/colors\";\nimport { SUCCESS_BG_COLOR } from \"../../../../utils/colors\";\nimport { SimpleCss } from \"../../../../constants\";\n\njss.setup(preset());\n\nconst styles = {\n  modal: {\n    marginTop: \"20px\",\n    maxHeight: \"40%\",\n    maxWidth: 300\n  },\n\n  content: {\n    background: SUCCESS_BG_COLOR,\n    color: SUCCESS_COLOR\n  },\n\n  messageContainer: {\n    flex: 1,\n    display: \"flex\",\n    padding: 10,\n    fontSize: \"1.5em\"\n  },\n\n  messageIcon: {\n    paddingRight: \"10px\",\n    fontSize: \"1.5em\"\n  },\n\n  messageHeader: {\n    fontWeight: 900,\n    textAlign: \"center\"\n  },\n\n  buttonsContainer: {\n    flexShrink: 0,\n    padding: \"10px 8px 5px 10px\",\n    borderTop: \"1px solid #b3dcb4\",\n    textAlign: \"right\"\n  }\n} as SimpleCss;\n\nexport const modalStyle = styles.modal as React.CSSProperties;\nexport const contentStyle = styles.content as React.CSSProperties;\nexport const messageIconStyle = styles.messageIcon as React.CSSProperties;\n\nexport const { classes } = jss.createStyleSheet(styles).attach();\n","import SuccessModal from \"./component\";\n\nexport default SuccessModal;\n","import * as React from \"react\";\nimport { Icon } from \"semantic-ui-react\";\nimport { Modal } from \"semantic-ui-react\";\nimport { Button } from \"semantic-ui-react\";\n\nimport { modalStyle } from \"./styles\";\nimport { contentStyle } from \"./styles\";\nimport { messageIconStyle } from \"./styles\";\nimport { classes } from \"./styles\";\n\ninterface Props {\n  open: boolean;\n  dismiss: () => void;\n}\n\nexport class SuccessModal extends React.Component<Props> {\n  render() {\n    const { dismiss, open } = this.props;\n\n    return (\n      <Modal style={modalStyle} dimmer=\"inverted\" open={open} onClose={dismiss}>\n        <Modal.Content style={contentStyle}>\n          <div className={classes.messageContainer}>\n            <Icon style={messageIconStyle} name=\"thumbs up\" />\n\n            <div>\n              <div className={classes.messageHeader}>\n                Source successfully updated!\n              </div>\n            </div>\n          </div>\n\n          <div className={`${classes.buttonsContainer}`}>\n            <Button color=\"green\" inverted={true} onClick={dismiss}>\n              <Icon name=\"remove\" /> Dismiss\n            </Button>\n          </div>\n        </Modal.Content>\n      </Modal>\n    );\n  }\n}\n\nexport default SuccessModal;\n","import jss from \"jss\";\nimport preset from \"jss-preset-default\";\n\nimport { ERROR_COLOR } from \"../../../../utils/colors\";\nimport { ERROR_BG_COLOR } from \"../../../../utils/colors\";\nimport { SimpleCss } from \"../../../../constants\";\n\njss.setup(preset());\n\nconst styles = {\n  modal: {\n    marginTop: \"20px\",\n    maxHeight: \"40%\",\n    maxWidth: 300\n  },\n\n  content: {\n    background: ERROR_BG_COLOR,\n    color: ERROR_COLOR\n  },\n\n  messageContainer: {\n    flex: 1,\n    display: \"flex\",\n    padding: 10,\n    fontSize: \"1.3em\"\n  },\n\n  messageIcon: {\n    paddingRight: \"10px\",\n    fontSize: \"1.5em\"\n  },\n\n  messageHeader: {\n    fontWeight: 900,\n    textAlign: \"center\"\n  },\n\n  buttonsContainer: {\n    flexShrink: 0,\n    padding: \"10px 8px 5px 10px\",\n    borderTop: `1px solid ${ERROR_COLOR}`,\n    textAlign: \"right\"\n  },\n\n  error: {\n    flex: 1,\n    padding: 20,\n    textAlign: \"center\"\n  }\n} as SimpleCss;\n\nexport const modalStyle = styles.modal as React.CSSProperties;\nexport const contentStyle = styles.content as React.CSSProperties;\nexport const messageIconStyle = styles.messageIcon as React.CSSProperties;\nexport const errorStyle = styles.error as React.CSSProperties;\n\nexport const { classes } = jss.createStyleSheet(styles).attach();\n","import ErrorModal from \"./component\";\n\nexport default ErrorModal;\n","import * as React from \"react\";\nimport { Icon } from \"semantic-ui-react\";\nimport { Modal } from \"semantic-ui-react\";\nimport { Button } from \"semantic-ui-react\";\n\nimport { modalStyle } from \"./styles\";\nimport { contentStyle } from \"./styles\";\nimport { messageIconStyle } from \"./styles\";\nimport { classes } from \"./styles\";\nimport { errorStyle } from \"./styles\";\n\ninterface Props {\n  open: boolean;\n  dismiss: () => void;\n  error: { message: string };\n}\n\nexport class ErrorModal extends React.Component<Props> {\n  render() {\n    const { dismiss, open } = this.props;\n\n    return (\n      <Modal style={modalStyle} dimmer=\"inverted\" open={open} onClose={dismiss}>\n        <Modal.Content style={contentStyle}>\n          <div className={classes.messageContainer}>\n            <Icon style={messageIconStyle} name=\"warning\" />\n\n            <div className={classes.cotent}>\n              <div className={classes.messageHeader}>\n                Source successfully updated!\n              </div>\n\n              <div style={errorStyle}>{this.props.error.message}</div>\n            </div>\n          </div>\n\n          <div className={`${classes.buttonsContainer}`}>\n            <Button color=\"red\" inverted={true} onClick={dismiss}>\n              <Icon name=\"remove\" /> Dismiss\n            </Button>\n          </div>\n        </Modal.Content>\n      </Modal>\n    );\n  }\n}\n\nexport default ErrorModal;\n","import React from \"react\";\nimport { Accordion } from \"semantic-ui-react\";\nimport { Icon } from \"semantic-ui-react\";\nimport { Dimmer } from \"semantic-ui-react\";\nimport { Loader } from \"semantic-ui-react\";\nimport { List } from \"semantic-ui-react\";\nimport { Form } from \"semantic-ui-react\";\nimport { Input } from \"semantic-ui-react\";\nimport update from \"immutability-helper\";\nimport isEqual from \"lodash/isEqual\";\nimport isEmpty from \"lodash/isEmpty\";\nimport { NavLink } from \"react-router-dom\";\n\nimport {\n  AuthorFrag,\n  SourceTypeFrag,\n  Quotes1,\n  Quotes1Variables\n} from \"../../../graphql/gen.types\";\nimport { Quotes1_quotes } from \"../../../graphql/gen.types\";\nimport QUOTES_QUERY from \"../../../graphql/quotes-1.query\";\nimport { sourceDisplay } from \"../../../graphql/utils\";\nimport { authorFullName } from \"../../../graphql/utils\";\nimport { classes } from \"./styles\";\nimport { accordionContentStyle } from \"./styles\";\nimport { initialState } from \"./source-accordion\";\nimport { DetailAction } from \"./source-accordion\";\nimport { AccordionTitleClickCb } from \"./source-accordion\";\nimport { Props } from \"./source-accordion\";\nimport { State } from \"./source-accordion\";\nimport { AccordionIndex } from \"./source-accordion\";\nimport renderQuote from \"../../../components/QuoteItem\";\nimport AuthorsControlComponent from \"../../../components/AuthorsControl\";\nimport SourceTypeControlComponent from \"../../../components/SourceTypeControl\";\nimport SOURCE_QUERY from \"../../../graphql/source-full.query\";\nimport SuccessModal from \"./SuccessModal\";\nimport ErrorModal from \"./ErrorModal\";\nimport { makeAuthorRouteURL } from \"../../../routes/util\";\n\nexport class SourceAccordion extends React.Component<Props, State> {\n  state: State = initialState;\n\n  getSnapshotBeforeUpdate(prevProps: Props, prevState: State) {\n    // if we were editing and we change view, then we cancel all\n    // editing changes\n    if (\n      prevState.detailAction === DetailAction.EDITING &&\n      this.state.detailAction === DetailAction.VIEWING\n    ) {\n      if (this.shouldResetEditSourceForm()) {\n        return { resetForm: true };\n      }\n    }\n    return null;\n  }\n\n  // tslint:disable-next-line:no-any\n  componentDidUpdate(prevProps: Props, prevState: State, snapshot: any) {\n    if (snapshot && snapshot.resetForm) {\n      this.props.resetForm();\n    }\n  }\n\n  render() {\n    const { accordionProps } = this.state;\n\n    return (\n      <Accordion\n        fluid={true}\n        styled={true}\n        className={classes.accordion}\n        exclusive={false}\n      >\n        {this.renderEditViewControls()}\n\n        <Accordion.Title\n          active={accordionProps[AccordionIndex.DETAIL]}\n          index={AccordionIndex.DETAIL}\n          onClick={this.handleAccordionClick}\n        >\n          <Icon name=\"dropdown\" />\n          Details\n        </Accordion.Title>\n\n        {this.renderDetail()}\n\n        <Accordion.Title\n          active={accordionProps[AccordionIndex.LIST_QUOTES]}\n          index={AccordionIndex.LIST_QUOTES}\n          onClick={this.handleAccordionClick}\n        >\n          <Icon name=\"dropdown\" />\n          Quotes\n        </Accordion.Title>\n\n        {this.renderAccordionQuotes()}\n      </Accordion>\n    );\n  }\n\n  renderDetail = () => {\n    const { source } = this.props;\n\n    const { sourceType, authors, year, topic, publication, url } = source;\n\n    const { accordionProps } = this.state;\n\n    return (\n      <Accordion.Content\n        style={accordionContentStyle}\n        className={classes.detailsAccordionContent}\n        active={accordionProps[AccordionIndex.DETAIL]}\n      >\n        {this.renderUpdatingUI()}\n\n        <div className={`source-type ${classes.root}`}>\n          <div className={classes.labels}>Type</div>\n\n          <div className={classes.details}>\n            {this.renderSourceType(sourceType)}\n          </div>\n        </div>\n\n        <div className={`authors ${classes.root}`}>\n          <div className={classes.labels}>Authors</div>\n\n          <div className={classes.details}>\n            {this.isEditing()\n              ? this.renderAuthorsControl()\n              : authors.map(this.renderAuthor)}\n          </div>\n        </div>\n\n        {this.renderTextField(topic, \"topic\")}\n\n        {this.renderTextField(year, \"year\")}\n\n        {this.renderTextField(publication, \"publication\")}\n\n        {this.renderTextField(url, \"url\", \"URL\")}\n\n        <div>\n          <div style={{ fontWeight: \"bolder\", fontSize: \"1.2rem\" }}>\n            Citation\n          </div>\n          <div>{sourceDisplay(source)}</div>\n        </div>\n      </Accordion.Content>\n    );\n  };\n\n  renderEditViewControls = () => {\n    const { accordionProps } = this.state;\n\n    if (!accordionProps[AccordionIndex.DETAIL]) {\n      return undefined;\n    }\n\n    if (this.isEditing()) {\n      const { errors, source, values } = this.props;\n\n      return (\n        <div className={classes.toggleEditView}>\n          <Icon\n            className=\"editing-icon\"\n            name=\"remove\"\n            color=\"red\"\n            onClick={this.handleToggleEditView}\n          />\n\n          {!isEqual(source, values) && isEmpty(errors) && (\n            <Icon\n              className=\"editing-icon\"\n              name=\"checkmark\"\n              color=\"green\"\n              onClick={this.submit}\n            />\n          )}\n        </div>\n      );\n    }\n\n    return (\n      <div className={classes.toggleEditView}>\n        <Icon\n          className=\"edit-icon\"\n          name=\"edit\"\n          onClick={this.handleToggleEditView}\n        />\n      </div>\n    );\n  };\n\n  renderAuthor = (author: AuthorFrag | null) => {\n    if (!author) {\n      return undefined;\n    }\n\n    return (\n      <div key={author.id}>\n        <NavLink to={makeAuthorRouteURL(author.id)}>\n          {authorFullName(author)}\n        </NavLink>\n      </div>\n    );\n  };\n\n  renderUpdatingUI = () => {\n    const { isSubmitting } = this.props;\n    const { updateSourceError, openUpdateSourceSuccessModal } = this.state;\n\n    if (updateSourceError) {\n      return (\n        <ErrorModal\n          error={updateSourceError}\n          open={!!updateSourceError}\n          dismiss={this.handleDismissErrorModal}\n        />\n      );\n    }\n\n    if (openUpdateSourceSuccessModal) {\n      return (\n        <SuccessModal\n          open={openUpdateSourceSuccessModal}\n          dismiss={this.handleDismissSuccessModal}\n        />\n      );\n    }\n\n    if (isSubmitting) {\n      return this.renderLoader(\"Updating...\");\n    }\n\n    return undefined;\n  };\n\n  renderAccordionQuotes = () => {\n    const { accordionProps } = this.state;\n    return (\n      <Accordion.Content\n        className={classes.quotesAccordion}\n        style={accordionContentStyle}\n        active={accordionProps[AccordionIndex.LIST_QUOTES]}\n      >\n        {this.renderAccordionContentQuotes()}\n      </Accordion.Content>\n    );\n  };\n\n  renderAccordionContentQuotes = () => {\n    const { loadingQuotes, fetchQuotesError } = this.state;\n\n    if (fetchQuotesError) {\n      return (\n        <pre style={{ whiteSpace: \"pre-wrap\" }}>\n          {JSON.stringify(fetchQuotesError, null, 2)}\n        </pre>\n      );\n    }\n\n    if (loadingQuotes) {\n      return this.renderLoader(\"Loading quotes...\");\n    }\n\n    const { quotes } = this.state;\n\n    if (!quotes || !quotes.length) {\n      return (\n        <div>\n          <div>No quote for source</div>\n          <p>Click New Quote to add quote</p>\n        </div>\n      );\n    }\n\n    return (\n      <List divided={true} relaxed={true}>\n        {quotes.map(renderQuote)}\n      </List>\n    );\n  };\n\n  renderLoader = (label: string) => {\n    return (\n      <Dimmer inverted={true} className={`${classes.SourceRoot}`} active={true}>\n        <Loader inverted={true} size=\"medium\">\n          {label}\n        </Loader>\n      </Dimmer>\n    );\n  };\n\n  // tslint:disable-next-line:no-any\n  renderTextField = (value: any, name: string, label?: string) => {\n    label = label ? label : name.charAt(0).toUpperCase() + name.slice(1);\n\n    if (this.isEditing()) {\n      return (\n        <div className={`${classes.root}`}>\n          <div className={classes.labels}> {label} </div>\n\n          <div className={classes.details}>{this.renderTextControl(name)}</div>\n        </div>\n      );\n    }\n\n    if (value) {\n      return (\n        <div className={`${classes.root}`}>\n          <div className={classes.labels}> {label} </div>\n\n          {name === \"url\" ? (\n            <a style={{ paddingLeft: \"15px\" }} href={value}>\n              {value}\n            </a>\n          ) : (\n            <div className={classes.details}>{value}</div>\n          )}\n        </div>\n      );\n    }\n\n    return undefined;\n  };\n\n  renderAuthorsControl = () => {\n    const name = \"authors\";\n    const error = this.props.errors[name];\n    const booleanError = !!error;\n    const touched = !!this.props.touched[name];\n\n    return (\n      <div className={classes.fieldWrapper}>\n        <Form.Field\n          control={AuthorsControlComponent}\n          error={booleanError}\n          selectError={booleanError}\n          name={name}\n          value={this.props.values[name]}\n          handleBlur={this.handleFormControlBlur(name)}\n          handleChange={this.handleControlChange(name)}\n        />\n\n        {this.renderFieldError(booleanError && touched, error)}\n      </div>\n    );\n  };\n\n  renderSourceTypeControl = () => {\n    const name = \"sourceType\";\n    const error = this.props.errors[name];\n    const booleanError = !!error;\n    const touched = !!this.props.touched[name];\n\n    return (\n      <div className={classes.fieldWrapper}>\n        <Form.Field\n          control={SourceTypeControlComponent}\n          error={booleanError}\n          selectError={booleanError}\n          name={name}\n          value={this.props.values[name]}\n          handleBlur={this.handleFormControlBlur(name)}\n          handleChange={this.handleControlChange(name)}\n        />\n\n        {this.renderFieldError(booleanError && touched, error)}\n      </div>\n    );\n  };\n\n  renderSourceType = (sourceType: SourceTypeFrag) => {\n    if (this.isEditing()) {\n      return this.renderSourceTypeControl();\n    }\n\n    return sourceType.name;\n  };\n\n  renderTextControl = (name: string) => {\n    const error = this.props.errors[name];\n    const booleanError = !!error;\n    const touched = !!this.props.touched[name];\n\n    return (\n      <div className={classes.fieldWrapper}>\n        <Form.Field\n          className={error ? classes.error : \"\"}\n          control={Input}\n          placeholder={name}\n          fluid={true}\n          id={name}\n          error={booleanError}\n          autoComplete=\"off\"\n          value={this.props.values[name] || \"\"}\n          onBlur={this.props.handleBlur}\n          onChange={this.handleControlChange(name)}\n        />\n\n        {this.renderFieldError(booleanError && touched, error)}\n      </div>\n    );\n  };\n\n  renderFieldError = (show: boolean, error: string | undefined) => {\n    return show ? (\n      <div className={classes.errorMessage}> {error} </div>\n    ) : (\n      undefined\n    );\n  };\n\n  handleFormControlBlur = (name: string) => () => {\n    this.props.setFieldTouched(name, true);\n  };\n\n  handleControlChange = (name: string) => async (\n    // tslint:disable-next-line:no-any\n    val: any,\n    // tslint:disable-next-line:no-any\n    other: any\n  ) => {\n    val = other ? other.value : val;\n    this.props.setFieldValue(name, val);\n  };\n\n  handleAccordionClick: AccordionTitleClickCb = (event, titleProps) => {\n    const index = titleProps.index as AccordionIndex;\n\n    if (index === AccordionIndex.LIST_QUOTES) {\n      this.fetchQuotes();\n    }\n\n    const { accordionProps } = this.state;\n\n    this.setState(s =>\n      update(s, {\n        accordionProps: {\n          [index]: {\n            $set: !accordionProps[index]\n          }\n        },\n        ...this.getNewDetailState(index as number)\n      })\n    );\n  };\n\n  handleToggleEditView = () => {\n    this.setState({\n      detailAction:\n        this.state.detailAction === DetailAction.VIEWING\n          ? DetailAction.EDITING\n          : DetailAction.VIEWING\n    });\n  };\n\n  handleDismissSuccessModal = () => {\n    this.setState({\n      openUpdateSourceSuccessModal: false,\n      detailAction: DetailAction.VIEWING\n    });\n  };\n\n  handleDismissErrorModal = () => {\n    this.setState({ updateSourceError: undefined });\n  };\n\n  private fetchQuotes = async () => {\n    try {\n      this.setState({ loadingQuotes: true });\n\n      const result = await this.props.client.query<Quotes1, Quotes1Variables>({\n        query: QUOTES_QUERY,\n        variables: {\n          quote: {\n            source: this.props.source.id\n          }\n        }\n      });\n\n      const quotes = result.data.quotes as Quotes1_quotes[];\n      this.setState({ quotes, loadingQuotes: false });\n    } catch (error) {\n      this.setState({ loadingQuotes: false, fetchQuotesError: error });\n    }\n  };\n\n  private submit = async () => {\n    const { values, setSubmitting, updateSource, source } = this.props;\n    const {\n      sourceType: { id },\n      authors,\n      year,\n      topic,\n      publication,\n      url\n    } = values;\n\n    setSubmitting(true);\n\n    const previousAuthors = source.authors.map(\n      (a: null | AuthorFrag) => a && a.id\n    );\n    const authorIds = authors.map((a: AuthorFrag) => a && a.id);\n\n    const updatedSource = {\n      id: values.id,\n      sourceTypeId: id,\n      authorIds: authorIds.filter((a: string) => !previousAuthors.includes(a)),\n      deletedAuthors: previousAuthors.filter(\n        (a: string | null) => a && !authorIds.includes(a)\n      ),\n      year,\n      topic,\n      publication,\n      url\n    };\n\n    try {\n      await updateSource({\n        variables: {\n          source: updatedSource\n        },\n\n        update: (client, { data: newData }) => {\n          if (!newData) {\n            return;\n          }\n\n          const newSource = newData.updateSource;\n\n          if (!newSource) {\n            return;\n          }\n\n          client.writeQuery({\n            query: SOURCE_QUERY,\n            variables: {\n              source: {\n                id: source.id\n              }\n            },\n            data: newSource\n          });\n        }\n      });\n\n      setSubmitting(false);\n      this.setState({ openUpdateSourceSuccessModal: true });\n    } catch (error) {\n      setSubmitting(false);\n      this.setState({ updateSourceError: error });\n    }\n  };\n\n  private isEditing = () => {\n    const { detailAction, accordionProps } = this.state;\n\n    return (\n      accordionProps[AccordionIndex.DETAIL] &&\n      detailAction === DetailAction.EDITING\n    );\n  };\n\n  private shouldResetEditSourceForm = () => {\n    const { source } = this.props;\n    const editedSource = this.props.values;\n\n    return !isEqual(source, editedSource);\n  };\n\n  private getNewDetailState = (index: number) => {\n    if (index !== AccordionIndex.DETAIL) {\n      return {};\n    }\n\n    if (this.state.detailAction === DetailAction.VIEWING) {\n      return {};\n    }\n\n    return {\n      detailAction: {\n        $set: DetailAction.VIEWING\n      }\n    };\n  };\n}\n\nexport default SourceAccordion;\n","import { withApollo } from \"react-apollo\";\nimport { compose } from \"react-apollo\";\nimport { withFormik } from \"formik\";\nimport { graphql } from \"react-apollo\";\n\nimport { OwnProps, formikConfig } from \"./source-accordion\";\nimport UPDATE_SOURCE_MUTATION from \"../../../graphql/update-source.mutation\";\nimport { UpdateSource as UpdateSourceMutation } from \"../../../graphql/gen.types\";\nimport { UpdateSourceVariables } from \"../../../graphql/gen.types\";\nimport SourceAccordion from \"./component\";\n\nconst updateSourceGraphql = graphql<\n  OwnProps,\n  UpdateSourceMutation,\n  UpdateSourceVariables,\n  {}\n>(UPDATE_SOURCE_MUTATION, {\n  props: ({ mutate }) => {\n    return {\n      updateSource: mutate\n    };\n  }\n});\n\nexport default compose(\n  withFormik(formikConfig),\n  withApollo,\n  updateSourceGraphql\n)(SourceAccordion);\n","import React from \"react\";\nimport { Dimmer } from \"semantic-ui-react\";\nimport { Loader } from \"semantic-ui-react\";\nimport { Icon } from \"semantic-ui-react\";\nimport { NavLink } from \"react-router-dom\";\n\nimport RootHeader from \"../../components/Header\";\nimport { setTitle } from \"../../routes/util\";\nimport { makeNewQuoteURL } from \"../../routes/util\";\nimport { classes } from \"./styles\";\nimport { SourceProps } from \"./utils\";\nimport { SourceState } from \"./utils\";\nimport SourceAccordion from \"./SourceAccordion\";\nimport AppSideBar from \"../../components/AppSidebar\";\n\nexport class Source extends React.Component<SourceProps, SourceState> {\n  state: SourceState = {\n    loadingQuotes: false,\n    showingQuotes: false\n  };\n\n  componentDidMount() {\n    setTitle(\"Source\");\n  }\n\n  componentWillUnmount() {\n    setTitle();\n  }\n\n  render() {\n    return (\n      <AppSideBar>\n        <div className={`${classes.SourceRoot}`}>\n          <RootHeader\n            title=\"Source\"\n            className={classes.RootHeader}\n            showSideBarTrigger={true}\n          />\n\n          {this.renderMainOrLoading()}\n        </div>\n      </AppSideBar>\n    );\n  }\n\n  renderMainOrLoading = () => {\n    const { loading, source, error } = this.props;\n\n    if (error) {\n      return (\n        <div className={`${classes.sourceMain} ${classes.errorContainer}`}>\n          {error.message}\n        </div>\n      );\n    }\n\n    if (loading || !source) {\n      return (\n        <Dimmer\n          inverted={true}\n          className={`${classes.sourceMain}`}\n          active={true}\n        >\n          <Loader size=\"medium\">Loading..</Loader>\n        </Dimmer>\n      );\n    }\n\n    return (\n      <div className={`${classes.sourceMain}`}>\n        <NavLink\n          to={makeNewQuoteURL(source.id)}\n          className={classes.newQuoteButton}\n        >\n          <Icon name=\"add circle\" circular={true} />\n          <span style={{ fontWeight: 100, fontSize: \"0.65em\" }}>New Quote</span>\n        </NavLink>\n\n        <SourceAccordion source={source} />\n      </div>\n    );\n  };\n}\n\nexport default Source;\n","import { graphql } from \"react-apollo\";\nimport { withApollo } from \"react-apollo\";\nimport { compose } from \"react-apollo\";\n\nimport Source from \"./route\";\nimport { OwnProps } from \"./utils\";\nimport { SourceFull as SourceFullQuery } from \"../../graphql/gen.types\";\nimport { SourceFullVariables } from \"../../graphql/gen.types\";\nimport SOURCE_QUERY from \"../../graphql/source-full.query\";\n\nconst sourceGraphQl = graphql<OwnProps, SourceFullQuery, SourceFullVariables>(\n  SOURCE_QUERY,\n  {\n    props: ({ data }) => {\n      return { ...data };\n    },\n\n    options: ({ match }) => {\n      return {\n        variables: {\n          source: {\n            id: match.params.id\n          }\n        }\n      };\n    }\n  }\n);\n\nexport default compose(\n  withApollo,\n  sourceGraphQl\n)(Source);\n"],"sourceRoot":""}